<?xml version="1.0"?>
<doc>
    <assembly>
        "ManageLiteAV"
    </assembly>
    <members>
        <member name="M:ITRTCCloud.startScreenCapture(HWND__*)">
 15.2 启动屏幕分享

 @deprecated 从 v7.2 版本开始废弃
 @note 使用 startScreenCapture(HWND rendHwnd, TRTCVideoStreamType type, TRTCVideoEncParam* params) 接口替代。

</member>
        <member name="M:ITRTCCloud.setMicVolumeOnMixing(System.UInt32)">
@}
@name 弃用接口函数
@{
 15.1 设置麦克风的音量大小

 @deprecated 从 v6.9 版本开始废弃
 @note 使用 setAudioCaptureVolume 接口替代。 

</member>
        <member name="M:ITRTCCloud.callExperimentalAPI(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 14.8 调用实验性 API 接口

 @note 该接口用于调用一些实验性功能
 @param jsonStr 接口及参数描述的 JSON 字符串

</member>
        <member name="M:ITRTCCloud.showDebugView(System.Int32)">
 14.7 显示仪表盘

 仪表盘是状态统计和事件消息浮层 view，方便调试。

 @param showType 0：不显示；1：显示精简版；2：显示全量版，默认为不显示

</member>
        <member name="M:ITRTCCloud.setLogCallback(ITRTCLogCallback*)">
 14.6 设置日志回调

 @param callback 日志回调

</member>
        <member name="M:ITRTCCloud.setLogDirPath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 14.5 设置日志保存路径

 @note 日志文件默认保存在 C:/Users/[系统用户名]/AppData/Roaming/Tencent/liteav/log，即 %appdata%/Tencent/liteav/log 下，如需修改，必须在所有方法前调用。
 @param path 存储日志的文件夹，例如 "D:\\Log"，UTF-8 编码

</member>
        <member name="M:ITRTCCloud.setLogCompressEnabled(System.Boolean)">
 14.4 启用或禁用 Log 的本地压缩

  开启压缩后，Log 存储体积明显减小，但需要腾讯云提供的 Python 脚本解压后才能阅读。
  禁用压缩后，Log 采用明文存储，可以直接用记事本打开阅读，但占用空间较大。

 @param enabled 指定是否启用，默认为禁止状态

</member>
        <member name="M:ITRTCCloud.setConsoleEnabled(System.Boolean)">
 14.3 启用或禁用控制台日志打印

 @param enabled 指定是否启用，默认为禁止状态

</member>
        <member name="M:ITRTCCloud.setLogLevel(TRTCLogLevel)">
 14.2 设置 Log 输出级别

 @param level 参见 TRTCLogLevel，默认值：TRTCLogLevelNone

</member>
        <member name="M:ITRTCCloud.getSDKVersion">
@}
@name LOG 相关接口函数
@{
 14.1 获取 SDK 版本信息

 @return UTF-8 编码的版本号。

</member>
        <member name="M:ITRTCCloud.stopSpeakerDeviceTest">
13.8 停止扬声器测试

</member>
        <member name="M:ITRTCCloud.startSpeakerDeviceTest(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 13.7 开启扬声器测试

 回调接口 onTestSpeakerVolume 获取测试数据

 该方法播放指定的音频文件测试播放设备是否能正常工作。如果能听到声音，说明播放设备能正常工作。

 @param testAudioFilePath 音频文件的绝对路径，路径字符串使用 UTF-8 编码格式，支持文件格式：WAV、MP3

</member>
        <member name="M:ITRTCCloud.stopMicDeviceTest">
13.6 停止麦克风测试

</member>
        <member name="M:ITRTCCloud.startMicDeviceTest(System.UInt32)">
 13.5 开启麦克风测试

 回调接口 onTestMicVolume 获取测试数据

 该方法测试麦克风是否能正常工作，volume 的取值范围为0 - 100。

 @param interval 反馈音量提示的时间间隔（ms），建议设置到大于 200 毫秒

</member>
        <member name="M:ITRTCCloud.stopCameraDeviceTest">
13.4 停止摄像头测试

</member>
        <member name="M:ITRTCCloud.startCameraDeviceTest(HWND__*)">
 13.3 开始进行摄像头测试

 会触发 onFirstVideoFrame 回调接口

 @note 在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。
 @param rendHwnd 承载预览画面的 HWND

</member>
        <member name="M:ITRTCCloud.stopSpeedTest">
13.2 停止网络测速

</member>
        <member name="M:ITRTCCloud.startSpeedTest(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name 设备和网络测试
@{
 13.1 开始进行网络测速（视频通话期间请勿测试，以免影响通话质量）

 测速结果将会用于优化 SDK 接下来的服务器选择策略，因此推荐您在用户首次通话前先进行一次测速，这将有助于我们选择最佳的服务器。
 同时，如果测试结果非常不理想，您可以通过醒目的 UI 提示用户选择更好的网络。

 @note 测速本身会消耗一定的流量，所以也会产生少量额外的流量费用。

 @param sdkAppId 应用标识
 @param userId 用户标识
 @param userSig 用户签名

</member>
        <member name="M:ITRTCCloud.resumeAudioEffect(System.Int32)">
 12.7 恢复音效

 @param effectId 音效 Id

</member>
        <member name="M:ITRTCCloud.pauseAudioEffect(System.Int32)">
 12.6 暂停音效

 @param effectId 音效 Id

</member>
        <member name="M:ITRTCCloud.setAllAudioEffectsVolume(System.Int32)">
 12.5 设置所有音效的音量

 @note 该操作会覆盖通过 setAudioEffectVolume 指定的单独音效音量。

 @param volume 音量大小，取值范围为0 - 100；默认值：100

</member>
        <member name="M:ITRTCCloud.stopAllAudioEffects">
12.4 停止所有音效

</member>
        <member name="M:ITRTCCloud.stopAudioEffect(System.Int32)">
 12.3 停止音效

 @param effectId 音效 ID

</member>
        <member name="M:ITRTCCloud.setAudioEffectVolume(System.Int32,System.Int32)">
 12.2 设置音效音量

 @note 会覆盖通过 setAllAudioEffectsVolume 指定的整体音效音量。

 @param effectId 音效 ID
 @param volume   音量大小，取值范围为0 - 100；默认值：100

</member>
        <member name="M:ITRTCCloud.playAudioEffect(TRTCAudioEffectParam*)">
@}
@name 音效相关接口函数
@{
 12.1 播放音效

 每个音效都需要您指定具体的 ID，您可以通过该 ID 对音效的开始、停止、音量等进行设置。
 支持的文件格式：aac, mp3。

 @note 若您想同时播放多个音效，请分配不同的 ID 进行播放。因为使用同一个 ID 播放不同音效，SDK 将会停止上一个 ID 对应的音效播放，再启动新的音效播放。

 @param effect 音效

</member>
        <member name="M:ITRTCCloud.setSystemAudioLoopbackVolume(System.UInt32)">
 11.12 设置系统声音采集的音量。

 @param volume 音量大小，取值范围为0 - 100。

</member>
        <member name="M:ITRTCCloud.stopSystemAudioLoopback">
11.11 关闭系统声音采集。

</member>
        <member name="M:ITRTCCloud.startSystemAudioLoopback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 11.10 打开系统声音采集（64位 SDK 尚不支持系统混音能力）

 开启后可以采集整个操作系统的播放声音（path 为空）或某一个播放器（path 不为空）的声音，
 并将其混入到当前麦克风采集的声音中一起发送到云端。

 @param path
    - path 为空，代表采集整个操作系统的声音。
    - path 填写 exe 程序（如 QQ音乐）所在的路径，将会启动此程序并只采集此程序的声音。


</member>
        <member name="M:ITRTCCloud.setBGMPublishVolume(System.UInt32)">
 11.9 设置背景音乐远端播放音量的大小

 播放背景音乐混音时使用，用来控制背景音乐在远端播放时的音量大小。

 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:ITRTCCloud.setBGMPlayoutVolume(System.UInt32)">
 11.8 设置背景音乐本地播放音量的大小

 播放背景音乐混音时使用，用来控制背景音乐在本地播放时的音量大小。

 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:ITRTCCloud.setBGMVolume(System.UInt32)">
 11.7 设置背景音乐播放音量的大小

 播放背景音乐混音时使用，用来控制背景音乐播放音量的大小，
 该接口会同时控制远端播放音量的大小和本地播放音量的大小，
 因此调用该接口后，setBGMPlayoutVolume和setBGMPublishVolume设置的音量值会被覆盖

 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:ITRTCCloud.setBGMPosition(System.UInt32)">
 11.6 设置 BGM 播放进度

 @param pos 单位毫秒

</member>
        <member name="M:ITRTCCloud.getBGMDuration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 11.5 获取音乐文件总时长，单位毫秒

 @param path 音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长
 @return     成功返回时长，失败返回-1

</member>
        <member name="M:ITRTCCloud.resumeBGM">
11.4 继续播放背景音乐

</member>
        <member name="M:ITRTCCloud.pauseBGM">
11.3 暂停播放背景音乐

</member>
        <member name="M:ITRTCCloud.stopBGM">
11.2 停止播放背景音乐

</member>
        <member name="M:ITRTCCloud.playBGM(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name 背景混音相关接口函数
@{
 11.1 启动播放背景音乐

 @param path 音乐文件路径，支持的文件格式：aac, mp3。

</member>
        <member name="M:ITRTCCloud.sendSEIMsg(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)">
 10.2 将小数据量的自定义数据嵌入视频帧中

 跟 sendCustomCmdMsg 的原理不同，sendSEIMsg 是将数据直接塞入视频数据头中。因此，即使视频帧被旁路到了直播 CDN 上，
 这些数据也会一直存在。但是由于要把数据嵌入视频帧中，所以数据本身不能太大，推荐几个字节就好。

 最常见的用法是把自定义的时间戳（timstamp）用 sendSEIMsg 嵌入视频帧中，这种方案的最大好处就是可以实现消息和画面的完美对齐。

 @param data          待发送的数据，最大支持1kb（1000字节）的数据大小
 @param dataSize      待发送的数据大小
 @param repeatCount   发送数据次数
 @return true：消息已通过限制，等待后续视频帧发送；false:消息被限制发送

 @note 本接口有以下限制：
       - 数据在接口调用完后不会被即时发送出去，而是从下一帧视频帧开始带在视频帧中发送。
       - 发送消息到房间内所有用户，每秒最多能发送30条消息（与 sendCustomCmdMsg 共享限制）。
       - 每个包最大为1KB，若发送大量数据，会导致视频码率增大，可能导致视频画质下降甚至卡顿（与 sendCustomCmdMsg 共享限制）。
       - 每个客户端每秒最多能发送总计8KB数据（与 sendCustomCmdMsg 共享限制）。
       - 若指定多次发送（repeatCount&gt;1），则数据会被带在后续的连续 repeatCount 个视频帧中发送出去，同样会导致视频码率增大。
       - 如果 repeatCount&gt;1，多次发送，接收消息 onRecvSEIMsg 回调也可能会收到多次相同的消息，需要去重。

</member>
        <member name="M:ITRTCCloud.sendCustomCmdMsg(System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Boolean,System.Boolean)">
@}
@name 自定义消息发送
@{
 10.1 发送自定义消息给房间内所有用户

 该接口可以借助音视频数据通道向当前房间里的其他用户广播您自定义的数据，但因为复用了音视频数据通道，
 请务必严格控制自定义消息的发送频率和消息体的大小，否则会影响音视频数据的质量控制逻辑，造成不确定性的问题。

 @param cmdId    消息 ID，取值范围为1 - 10
 @param data     待发送的消息，最大支持1KB（1000字节）的数据大小
 @param dataSize 待发送的数据大小
 @param reliable 是否可靠发送，可靠发送的代价是会引入一定的延时，因为接收端要暂存一段时间的数据来等待重传
 @param ordered  是否要求有序，即是否要求接收端接收的数据顺序和发送端发送的顺序一致，这会带来一定的接收延时，因为在接收端需要暂存并排序这些消息
 @return true：消息已经发出；false：消息发送失败

 @note 本接口有以下限制：
       - 发送消息到房间内所有用户，每秒最多能发送30条消息。
       - 每个包最大为1KB，超过则很有可能会被中间路由器或者服务器丢弃。
       - 每个客户端每秒最多能发送总计8KB数据。
       - 将 reliable 和 ordered 同时设置为 true 或 false，暂不支持交叉设置。
       - 强烈建议不同类型的消息使用不同的 cmdID，这样可以在要求有序的情况下减小消息时延。

</member>
        <member name="M:ITRTCCloud.sendCustomAudioData(LiteAVAudioFrame*)">
 9.4 向 SDK 投送自己采集的音频数据

 TRTCAudioFrame 推荐如下填写方式（其他字段不需要填写）：
 - audioFormat：仅支持 LiteAVAudioFrameFormatPCM。
 - data：音频帧 buffer。
 - length：音频帧数据长度，推荐每帧20ms采样数。【PCM格式、48000采样率、单声道的帧长度：48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。
 - sampleRate：采样率，仅支持48000。
 - channel：频道数量（如果是立体声，数据是交叉的），单声道：1； 双声道：2。
 - timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。

 参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。

 @param frame 音频帧，仅支持 LiteAVAudioFrameFormatPCM 格式。目前只支持单声道，仅支持48K采样率，LiteAVAudioFrameFormatPCM 格式。
 @note 可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomAudioData 的调用间隔，否则会导致声音断断续续。

</member>
        <member name="M:ITRTCCloud.enableCustomAudioCapture(System.Boolean)">
 9.3 启用音频自定义采集模式
 开启该模式后，SDK 停止运行原有的音频采集流程，只保留编码和发送能力。
 您需要用 sendCustomAudioData() 不断地向 SDK 塞入自己采集的音频数据。

 @param enable 是否启用，默认值：false

</member>
        <member name="M:ITRTCCloud.sendCustomVideoData(LiteAVVideoFrame*)">
 9.2 向 SDK 投送自己采集的视频数据

 TRTCVideoFrame 推荐如下填写方式（其他字段不需要填写）：
 - pixelFormat：仅支持 LiteAVVideoPixelFormat_I420。
 - bufferType：仅支持 LiteAVVideoBufferType_Buffer。
 - data：视频帧 buffer。
 - length：视频帧数据长度，I420 格式下，其值等于：width × height × 3 / 2。
 - width：视频图像长度。
 - height：视频图像宽度。
 - timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。

 参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。

 @param frame 视频数据，支持 I420 格式数据。
 @note - SDK 内部有帧率控制逻辑，目标帧率以您在 setVideoEncoderParam 中设置的为准，太快会自动丢帧，太慢则会自动补帧。
 @note - 可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomVideoData 的调用间隔，否则会导致视频帧率不稳定。

</member>
        <member name="M:ITRTCCloud.enableCustomVideoCapture(System.Boolean)">
@}
@name 自定义采集和渲染
@{
 9.1 启用视频自定义采集模式

 开启该模式后，SDK 不在运行原有的视频采集流程，只保留编码和发送能力。
 您需要用 sendCustomVideoData() 不断地向 SDK 塞入自己采集的视频画面。

 @param enable 是否启用，默认值：false

</member>
        <member name="M:ITRTCCloud.setSubStreamMixVolume(System.UInt32)">
 8.12 设置屏幕分享的混音音量大小

 这个数值越高，屏幕分享音量的占比就越高，麦克风音量占比就越小，所以不推荐设置得太大，否则麦克风的声音就被压制了。

 @param volume 设置的混音音量大小，范围0 - 100

</member>
        <member name="M:ITRTCCloud.setSubStreamEncoderParam(TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 8.11 设置屏幕分享的编码器参数
 - setVideoEncoderParam() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的编码参数。
 - setSubStreamEncoderParam() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的编码参数。
 该设置决定远端用户看到的画面质量，同时也是云端录制出的视频文件的画面质量。

 @param params 辅流编码参数，详情请参考 TRTCCloudDef.h 中的 TRTCVideoEncParam 定义
 @note 即使使用主路传输屏幕分享的数据（在调用 startScreenCapture 时设置 type=TRTCVideoStreamTypeBig），依然要使用此接口更新屏幕分享的编码参数。

</member>
        <member name="M:ITRTCCloud.setRemoteSubStreamViewRotation(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,LiteAVVideoRotation)">
 8.10 设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的顺时针旋转角度
 - setRemoteViewRotation() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的旋转角度。
 - setRemoteSubStreamViewRotation() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的旋转角度。

 @param userId 用户 ID
 @param rotation 支持90、180、270旋转角度

</member>
        <member name="M:ITRTCCloud.setRemoteSubStreamViewFillMode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoFillMode)">
 8.9 设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式
 - setRemoteViewFillMode() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的显示模式。
 - setRemoteSubStreamViewFillMode() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式。

 @param userId 用户的 ID
 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:ITRTCCloud.stopRemoteSubStreamView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.8 停止显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。
@param userId 对方的用户标识

</member>
        <member name="M:ITRTCCloud.startRemoteSubStreamView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,HWND__*)">
 8.7 开始显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）

 - startRemoteView() 用于显示主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）。
 - startRemoteSubStreamView() 用于显示辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。

 @param userId  对方的用户标识
 @param rendHwnd 渲染画面的 HWND
 @note 请在 onUserSubStreamAvailable 回调后再调用这个接口。

</member>
        <member name="M:ITRTCCloud.selectScreenCaptureTarget(LiteAVScreenCaptureSourceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
 8.6 设置屏幕共享参数，该方法在屏幕共享过程中也可以调用

 如果您期望在屏幕分享的过程中，切换想要分享的窗口，可以再次调用这个函数而不需要重新开启屏幕分享。

 支持如下四种情况：
 - 共享整个屏幕：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为 { 0, 0, 0, 0 }
 - 共享指定区域：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为非 NULL，例如 { 100, 100, 300, 300 }
 - 共享整个窗口：sourceInfoList 中 type 为 Window 的 source，captureRect 设为 { 0, 0, 0, 0 }
 - 共享窗口区域：sourceInfoList 中 type 为 Window 的 source，captureRect 设为非 NULL，例如 { 100, 100, 300, 300 }


 @param source            指定分享源
 @param captureRect       指定捕获的区域
 @param captureMouse      指定是否捕获鼠标指针
 @param highlightWindow   指定是否高亮正在共享的窗口，以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡


</member>
        <member name="M:ITRTCCloud.getScreenCaptureSources(tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 8.5 枚举可分享的屏幕窗口，建议在 startScreenCapture 之前调用

 如果您要给您的 App 增加屏幕分享功能，一般需要先显示一个窗口选择界面，这样用户可以选择希望分享的窗口。
 通过如下函数，您可以获得可分享窗口的 ID、类型、窗口名称以及缩略图。
 拿到这些信息后，您就可以实现一个窗口选择界面，当然，您也可以使用我们在 Demo 源码中已经实现好的一个界面。

 @note 返回的列表中包括屏幕和应用窗口，屏幕会在列表的前面几个元素中。
 @note 如果 delete ITRTCScreenCaptureSourceList*指针会编译错误，SDK 维护 ITRTCScreenCaptureSourceList 对象的生命周期。

 @param thumbSize 指定要获取的窗口缩略图大小，缩略图可用于绘制在窗口选择界面上
 @param iconSize  指定要获取的窗口图标大小

 @return 窗口列表包括屏幕

</member>
        <member name="M:ITRTCCloud.resumeScreenCapture">
8.4 恢复屏幕分享

</member>
        <member name="M:ITRTCCloud.pauseScreenCapture">
8.3 暂停屏幕分享

</member>
        <member name="M:ITRTCCloud.stopScreenCapture">
8.2 停止屏幕采集

</member>
        <member name="M:ITRTCCloud.startScreenCapture(HWND__*,TRTCVideoStreamType,TRTCVideoEncParam*)">
@}
@name 屏幕共享相关接口函数
@{
 8.1 启动屏幕分享

 @param rendHwnd 承载预览画面的 HWND，可以设置为 nullptr，表示不显示屏幕分享的预览效果。
 @param type 屏幕分享使用的线路，可以设置为主路（TRTCVideoStreamTypeBig）或者辅路（TRTCVideoStreamTypeSub），默认使用辅路。
 @param params 屏幕分享的画面编码参数，可以设置为 nullptr，表示让 SDK 选择最佳的编码参数（分辨率、码率等）。

 @note 一个用户同时最多只能上传一条主路（TRTCVideoStreamTypeBig）画面和一条辅路（TRTCVideoStreamTypeSub）画面，
 默认情况下，屏幕分享使用辅路画面，如果使用主路画面，建议您提前停止摄像头采集（stopLocalPreview）避免相互冲突。

</member>
        <member name="M:ITRTCCloud.setWaterMark(TRTCVideoStreamType,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCWaterMarkSrcType,System.UInt32,System.UInt32,System.Single,System.Single,System.Single)">
 7.2 设置水印

 水印的位置是通过 xOffset, yOffset, fWidthRatio 来指定的。
 - xOffset：水印的坐标，取值范围为0 - 1的浮点数。
 - yOffset：水印的坐标，取值范围为0 - 1的浮点数。
 - fWidthRatio：水印的大小比例，取值范围为0 - 1的浮点数。

 @param streamType 要设置水印的流类型(TRTCVideoStreamTypeBig、TRTCVideoStreamTypeSub)
 @param srcData    水印图片源数据（传 NULL 表示去掉水印）
 @param srcType    水印图片源数据类型（传 NULL 时忽略该参数）
 @param nWidth     水印图片像素宽度（源数据为文件路径时忽略该参数）
 @param nHeight    水印图片像素高度（源数据为文件路径时忽略该参数）
 @param xOffset    水印显示的左上角 x 轴偏移
 @param yOffset    水印显示的左上角 y 轴偏移
 @param fWidthRatio 水印显示的宽度占画面宽度比例（水印按该参数等比例缩放显示）
 @note 只支持主路视频流

</member>
        <member name="M:ITRTCCloud.setBeautyStyle(TRTCBeautyStyle,System.UInt32,System.UInt32,System.UInt32)">
@}
@name 美颜相关接口函数
@{
 7.1 设置美颜、美白、红润效果级别

 SDK 内部集成了两套风格不同的磨皮算法，一套我们取名叫“光滑”，适用于美女秀场，效果比较明显。
 另一套我们取名“自然”，磨皮算法更多地保留了面部细节，主观感受上会更加自然。

 @param style     美颜风格，光滑或者自然，光滑风格磨皮更加明显，适合娱乐场景。
 @param beauty    美颜级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显
 @param white     美白级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显
 @param ruddiness 红润级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显，该参数暂未生效

</member>
        <member name="M:ITRTCCloud.setCurrentSpeakerVolume(System.UInt32)">
 6.10 设置系统当前扬声器设备音量

 @note 该接口的功能是调节系统播放音量，如果用户直接调节 WIN 系统设置的播放音量时，该接口的设置结果会被用户的操作所覆盖。

 @param volume 设置的扬声器音量，范围0 - 100

</member>
        <member name="M:ITRTCCloud.getCurrentSpeakerVolume">
 6.9 获取系统当前扬声器设备音量

 @note 查询的是系统硬件音量大小。

 @return 扬声器音量，范围0 - 100

</member>
        <member name="M:ITRTCCloud.setCurrentSpeakerDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 6.8 设置要使用的扬声器

 @param speakerId 从 getSpeakerDevicesList 中得到的设备 ID

</member>
        <member name="M:ITRTCCloud.getCurrentSpeakerDevice">
 6.7 获取当前的扬声器设备

 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:ITRTCCloud.setCurrentMicDeviceVolume(System.UInt32)">
 6.5 设置系统当前麦克风设备的音量

 @note 该接口的功能是调节系统采集音量，如果用户直接调节 WIN 系统设置的采集音量时，该接口的设置结果会被用户的操作所覆盖。

 @param volume 麦克风音量值，范围0 - 100

</member>
        <member name="M:ITRTCCloud.getCurrentMicDeviceVolume">
 6.4 获取系统当前麦克风设备音量

 @note 查询的是系统硬件音量大小。

 @return 音量值，范围是0 - 100

</member>
        <member name="M:ITRTCCloud.setCurrentMicDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 6.3 设置要使用的麦克风

 选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风

 @param micId 从 getMicDevicesList 中得到的设备 ID

</member>
        <member name="M:ITRTCCloud.getCurrentMicDevice">
 6.2 获取当前选择的麦克风

 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:ITRTCCloud.getCurrentCameraDevice">
 5.3 获取当前使用的摄像头

 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:ITRTCCloud.setCurrentCameraDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 5.2 设置要使用的摄像头

 @param deviceId 从 getCameraDevicesList 中得到的设备 ID

</member>
        <member name="M:ITRTCCloud.stopAudioRecording">
 4.12 停止录音

 如果调用 exitRoom 时还在录音，录音会自动停止。

</member>
        <member name="M:ITRTCCloud.startAudioRecording(TRTCAudioRecordingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 4.11 开始录音

 该方法调用后， SDK 会将通话过程中的所有音频(包括本地音频，远端音频，BGM等)录制到一个文件里。
 无论是否进房，调用该接口都生效。
 如果调用 exitRoom 时还在录音，录音会自动停止。

 @param audioRecordingParams 录音参数，请参考TRTCAudioRecordingParams
 @return 0：成功；-1：录音已开始；-2：文件或目录创建失败；-3：后缀指定的音频格式不支持

</member>
        <member name="M:ITRTCCloud.enableAudioVolumeEvaluation(System.UInt32)">
 4.10 启用或关闭音量大小提示

 开启此功能后，SDK 会在 onUserVoiceVolume() 中反馈对每一路声音音量大小值的评估。
 我们在 Demo 中有一个音量大小的提示条，就是基于这个接口实现的。
 如希望打开此功能，请在 startLocalAudio() 之前调用。

 @param interval 设置 onUserVoiceVolume 回调的触发间隔，单位为ms，最小间隔为100ms，如果小于等于0则会关闭回调，建议设置为300ms

</member>
        <member name="M:ITRTCCloud.getAudioPlayoutVolume">
4.9 获取 SDK 播放音量

</member>
        <member name="M:ITRTCCloud.setAudioPlayoutVolume(System.Int32)">
 4.8 设置 SDK 播放音量。

 @note 该函数会控制最终交给系统播放的声音音量，会影响录制本地音频文件的音量大小，但不会影响耳返的音量

 @param volume 音量大小，取值0 - 100，默认值为100

</member>
        <member name="M:ITRTCCloud.getAudioCaptureVolume">
4.7 获取 SDK 采集音量

</member>
        <member name="M:ITRTCCloud.setAudioCaptureVolume(System.Int32)">
 4.6 设置 SDK 采集音量。

 @param volume 音量大小，取值0 - 100，默认值为100

</member>
        <member name="M:ITRTCCloud.muteAllRemoteAudio(System.Boolean)">
 4.5  静音/取消静音所有用户的声音

 @param mute true：静音；false：取消静音

 @note 静音时会停止接收所有用户的远端音频流并停止播放，取消静音时会自动拉取所有用户的远端音频流并进行播放。

</member>
        <member name="M:ITRTCCloud.muteRemoteAudio(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 4.4 静音/取消静音指定的远端用户的声音

 @param userId 用户 ID
 @param mute true：静音；false：取消静音

 @note 静音时会停止接收该用户的远端音频流并停止播放，取消静音时会自动拉取该用户的远端音频流并进行播放。

</member>
        <member name="M:ITRTCCloud.muteLocalAudio(System.Boolean)">
 4.3 静音/取消静音本地的音频

 当静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, false) 回调通知。
 当取消静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, true) 回调通知。

 与 stopLocalAudio 不同之处在于，muteLocalAudio(true) 并不会停止发送音视频数据，而是继续发送码率极低的静音包。
 由于 MP4 等视频文件格式，对于音频的连续性是要求很高的，使用 stopLocalAudio 会导致录制出的 MP4 不易播放。
 因此在对录制质量要求很高的场景中，建议选择 muteLocalAudio，从而录制出兼容性更好的 MP4 文件。

 @param mute true：静音；false：取消静音

</member>
        <member name="M:ITRTCCloud.stopLocalAudio">
 4.2 关闭本地音频的采集和上行

 当关闭本地音频的采集和上行，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。

</member>
        <member name="M:ITRTCCloud.startLocalAudio">
@}
@name 音频相关接口函数
@{
 4.1 开启本地音频的采集和上行

 该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。
 SDK 并不会默认开启本地的音频上行，也就说，如果您不调用这个函数，房间里的其他用户就听不到您的声音。

 @note TRTC SDK 并不会默认打开本地的麦克风采集。

</member>
        <member name="M:ITRTCCloud.setPriorRemoteVideoStreamType(TRTCVideoStreamType)">
 3.20 设定观看方优先选择的视频质量

 低端设备推荐优先选择低清晰度的小画面。
 如果对方没有开启双路视频模式，则此操作无效。

 @param type 默认观看大画面还是小画面，默认为 TRTCVideoStreamTypeBig

</member>
        <member name="M:ITRTCCloud.setRemoteVideoStreamType(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoStreamType)">
 3.19 选定观看指定 userId 的大画面还是小画面

 此功能需要该 userId 通过 enableEncSmallVideoStream 提前开启双路编码模式。
 如果该 userId 没有开启双路编码模式，则此操作无效。

 @param userId 用户 ID
 @param type 视频流类型，即选择看大画面还是小画面，默认为 TRTCVideoStreamTypeBig

</member>
        <member name="M:ITRTCCloud.enableSmallVideoStream(System.Boolean,TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 3.18 开启大小画面双路编码模式

 如果当前用户是房间中的主要角色（例如主播、老师、主持人等），并且使用 PC 或者 Mac 环境，可以开启该模式。
 开启该模式后，当前用户会同时输出【高清】和【低清】两路视频流（但只有一路音频流）。
 对于开启该模式的当前用户，会占用更多的网络带宽，并且会更加消耗 CPU 计算资源。

 对于同一房间的远程观众而言：
 - 如果用户的下行网络很好，可以选择观看【高清】画面
 - 如果用户的下行网络较差，可以选择观看【低清】画面

 @param enable 是否开启小画面编码，默认值：false
 @param smallVideoParam 小流的视频参数

</member>
        <member name="M:ITRTCCloud.setVideoEncoderMirror(System.Boolean)">
 3.17 设置编码器输出的画面镜像模式

 该接口不改变本地摄像头的预览画面，但会改变另一端用户看到的（以及服务器录制的）画面效果。

 @param mirror 是否开启远端镜像, true：远端画面镜像；false：远端画面非镜像。默认值：false

</member>
        <member name="M:ITRTCCloud.setLocalViewMirror(System.Boolean)">
 3.16 设置本地摄像头预览画面的镜像模式

 @param mirror 镜像模式，默认值：false（非镜像模式）

</member>
        <member name="M:ITRTCCloud.setVideoEncoderRotation(LiteAVVideoRotation)">
 3.15 设置视频编码输出的（也就是远端用户观看到的，以及服务器录制下来的）画面方向

 @param rotation 目前支持 TRTCVideoRotation0 和 TRTCVideoRotation180 旋转角度，默认值：TRTCVideoRotation0

</member>
        <member name="M:ITRTCCloud.setRemoteViewRotation(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,LiteAVVideoRotation)">
 3.14 设置远端图像的顺时针旋转角度

 @param userId 用户 ID
 @param rotation 支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0

</member>
        <member name="M:ITRTCCloud.setLocalViewRotation(LiteAVVideoRotation)">
 3.13 设置本地图像的顺时针旋转角度

 @param rotation 支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0

</member>
        <member name="M:ITRTCCloud.setRemoteViewFillMode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoFillMode)">
 3.12 设置远端图像的渲染模式

 @param userId 用户 ID
 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:ITRTCCloud.setLocalViewFillMode(TRTCVideoFillMode)">
 3.11 设置本地图像的渲染模式

 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:ITRTCCloud.setNetworkQosParam(TRTCNetworkQosParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 3.10 设置网络流控相关参数

 该设置决定了 SDK 在各种网络环境下的调控策略（例如弱网下是“保清晰”还是“保流畅”）

 @param params 网络流控参数，详情请参考 TRTCCloudDef.h 中的 TRTCNetworkQosParam 定义

</member>
        <member name="M:ITRTCCloud.setVideoEncoderParam(TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 3.9 设置视频编码器相关参数

 该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）

 @param params 视频编码参数，详情请参考 TRTCCloudDef.h 中的 TRTCVideoEncParam 定义

</member>
        <member name="M:ITRTCCloud.muteAllRemoteVideoStreams(System.Boolean)">
 3.8 暂停/恢复接收所有远端视频流

 该接口仅暂停/恢复接收所有远端用户的视频流，但并不释放显示资源，所以如果暂停，视频画面会冻屏在 mute 前的最后一帧。

 @param mute 是否暂停接收

</member>
        <member name="M:ITRTCCloud.muteRemoteVideoStream(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 3.7 暂停/恢复接收指定的远端视频流

 该接口仅暂停/恢复接收指定的远端用户的视频流，但并不释放显示资源，所以如果暂停，视频画面会冻屏在 mute 前的最后一帧。

 @param userId 对方的用户标识
 @param mute  是否暂停接收

</member>
        <member name="M:ITRTCCloud.stopAllRemoteView">
 3.6 停止显示所有远端视频画面，同时不再拉取远端用户的视频数据流

 @note 如果有屏幕分享的画面在显示，则屏幕分享的画面也会一并被关闭。

</member>
        <member name="M:ITRTCCloud.stopRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 3.5 停止显示远端视频画面，同时不再拉取该远端用户的视频数据流

 调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。

 @param userId 对方的用户标识

</member>
        <member name="M:ITRTCCloud.startRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,HWND__*)">
 3.4 开始显示远端视频画面

 在收到 SDK 的 onUserVideoAvailable(userId, true) 通知时，可以获知该远程用户开启了视频，
 此后调用 startRemoteView(userId) 接口加载该用户的远程画面时，可以用 loading 动画优化加载过程中的等待体验。
 待该用户的首帧画面开始显示时，您会收到 onFirstVideoFrame(userId) 事件回调。

 @param userId   对方的用户标识
 @param rendHwnd 承载预览画面的窗口句柄

</member>
        <member name="M:ITRTCCloud.muteLocalVideo(System.Boolean)">
 3.3 暂停/恢复推送本地的视频数据

 当暂停推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, false) 回调通知
 当恢复推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, true) 回调通知

 @param mute true：暂停；false：恢复

</member>
        <member name="M:ITRTCCloud.stopLocalPreview">
3.2 停止本地视频采集及预览

</member>
        <member name="M:ITRTCCloud.startLocalPreview(HWND__*)">
@}
@name  视频相关接口函数
@{
 3.1 开启本地视频的预览画面

 这个接口会启动默认的摄像头，可以通过 setCurrentCameraDevice 接口选用其他摄像头
 当开始渲染首帧摄像头画面时，您会收到 TRTCCloudCallback 中的 onFirstVideoFrame(null) 回调。

 @param rendHwnd 承载预览画面的 HWND

</member>
        <member name="M:ITRTCCloud.setMixTranscodingConfig(TRTCTranscodingConfig*)">
 2.5 设置云端的混流转码参数

 如果您在实时音视频 [控制台](https://console.cloud.tencent.com/trtc/) 中的功能配置页开启了“启动自动旁路直播”功能，
 房间里的每一路画面都会有一个默认的直播 [CDN 地址](https://cloud.tencent.com/document/product/647/16826)。

 一个直播间中可能有不止一位主播，而且每个主播都有自己的画面和声音，但对于 CDN 观众来说，他们只需要一路直播流，
 所以您需要将多路音视频流混成一路标准的直播流，这就需要混流转码。

 当您调用 setMixTranscodingConfig() 接口时，SDK 会向腾讯云的转码服务器发送一条指令，目的是将房间里的多路音视频流混合为一路,
 您可以通过 mixUsers 参数来调整每一路画面的位置，以及是否只混合声音，也可以通过 videoWidth、videoHeight、videoBitrate 等参数控制混合音视频流的编码参数。

 <pre>
 【画面1】=&gt; 解码 ====&gt; 
                         
 【画面2】=&gt; 解码 =&gt;  画面混合 =&gt; 编码 =&gt; 【混合后的画面】
                         /
 【画面3】=&gt; 解码 ====&gt; /

 【声音1】=&gt; 解码 ====&gt; 
                         
 【声音2】=&gt; 解码 =&gt;  声音混合 =&gt; 编码 =&gt; 【混合后的声音】
                         /
 【声音3】=&gt; 解码 ====&gt; /
 </pre>

 参考文档：[云端混流转码](https://cloud.tencent.com/document/product/647/16827)。

 @param config 请参考 TRTCCloudDef.h 中关于 TRTCTranscodingConfig 的介绍。如果传入 nil 则取消云端混流转码。
 @note 关于云端混流的注意事项：
  - 云端转码会引入一定的 CDN 观看延时，大概会增加1 - 2秒。
  - 调用该函数的用户，会将连麦中的多路画面混合到自己当前这路画面中。

</member>
        <member name="M:ITRTCCloud.stopPublishCDNStream">
2.4 停止向非腾讯云地址转推

</member>
        <member name="M:ITRTCCloud.startPublishCDNStream(TRTCPublishCDNParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 2.3 开始向友商云的直播 CDN 转推

 该接口跟 startPublishing() 类似，但 startPublishCDNStream() 支持向非腾讯云的直播 CDN 转推。
 使用 startPublishing() 绑定腾讯云直播 CDN 不收取额外的费用。
 使用 startPublishCDNStream() 绑定非腾讯云直播 CDN 需要收取转推费用，且需要通过工单联系我们开通。
 
 @param param 转推参数

</member>
        <member name="M:ITRTCCloud.stopPublishing">
2.2 停止向腾讯云的直播 CDN 推流

</member>
        <member name="M:ITRTCCloud.startPublishing(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoStreamType)">
@}
@name CDN 相关接口函数
@{
 2.1 开始向腾讯云的直播 CDN 推流

 该接口会指定当前用户的音视频流在腾讯云 CDN 所对应的 StreamId，进而可以指定当前用户的 CDN 播放地址。

 例如：如果我们采用如下代码设置当前用户的主画面 StreamId 为 user_stream_001，那么该用户主画面对应的 CDN 播放地址为：
 “http://yourdomain/live/user_stream_001.flv”，其中 yourdomain 为您自己备案的播放域名，
 您可以在直播[控制台](https://console.cloud.tencent.com/live) 配置您的播放域名，腾讯云不提供默认的播放域名。

 <pre>
  ITRTCCloud *trtcCloud = getTRTCShareInstance();
  trtcCloud-&gt;enterRoom(params, TRTCAppSceneLIVE);
  trtcCloud-&gt;startLocalPreview(HWND);
  trtcCloud-&gt;startLocalAudio();
  trtcCloud-&gt;startPublishing("user_stream_001", TRTCVideoStreamTypeBig);
 </pre>

 您也可以在设置 enterRoom 的参数 TRTCParams 时指定 streamId, 而且我们更推荐您采用这种方案。

 @param streamId 自定义流 Id。
 @param type 仅支持 TRTCVideoStreamTypeBig 和 TRTCVideoStreamTypeSub。
 @note 您需要先在实时音视频 [控制台](https://console.cloud.tencent.com/rav/) 中的功能配置页开启“启动自动旁路直播”才能生效。

</member>
        <member name="M:ITRTCCloud.setDefaultStreamRecvMode(System.Boolean,System.Boolean)">
 1.6 设置音视频数据接收模式（需要在进房前设置才能生效）

 为实现进房秒开的绝佳体验，SDK 默认进房后自动接收音视频。即在您进房成功的同时，您将立刻收到远端所有用户的音视频数据。
 若您没有调用 startRemoteView，视频数据将自动超时取消。
 若您主要用于语音聊天等没有自动接收视频数据需求的场景，您可以根据实际需求选择接收模式。

 \param autoRecvAudio true：自动接收音频数据；false：需要调用 muteRemoteAudio 进行请求或取消。默认值：true
 \param autoRecvVideo true：自动接收视频数据；false：需要调用 startRemoteView/stopRemoteView 进行请求或取消。默认值：true

 \note 需要在进房前设置才能生效。

</member>
        <member name="M:ITRTCCloud.disconnectOtherRoom">
 1.5 关闭跨房连麦

 跨房通话的退出结果会通过 TRTCCloudCallback 中的 onDisconnectOtherRoom() 回调通知给您。

</member>
        <member name="M:ITRTCCloud.connectOtherRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 1.4 请求跨房通话（主播 PK）

 TRTC 中两个不同音视频房间中的主播，可以通过“跨房通话”功能拉通连麦通话功能。使用此功能时，
 两个主播无需退出各自原来的直播间即可进行“连麦 PK”。

 例如：当房间“001”中的主播 A 通过 connectOtherRoom() 跟房间“002”中的主播 B 拉通跨房通话后，
 房间“001”中的用户都会收到主播 B 的 onUserEnter(B) 回调和 onUserVideoAvailable(B,true) 回调。
 房间“002”中的用户都会收到主播 A 的 onUserEnter(A) 回调和 onUserVideoAvailable(A,true) 回调。

 简言之，跨房通话的本质，就是把两个不同房间中的主播相互分享，让每个房间里的观众都能看到两个主播。

 <pre>
                 房间 001                     房间 002
               -------------               ------------
  跨房通话前：| 主播 A      |             | 主播 B     |
              | 观众 U V W  |             | 观众 X Y Z |
               -------------               ------------

                 房间 001                     房间 002
               -------------               ------------
  跨房通话后：| 主播 A B    |             | 主播 B A   |
              | 观众 U V W  |             | 观众 X Y Z |
               -------------               ------------
 </pre>

 跨房通话的参数考虑到后续扩展字段的兼容性问题，暂时采用了 JSON 格式的参数，要求至少包含两个字段：
 - roomId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 roomId 应指定为“002”。
 - userId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 userId 应指定为 B 的 userId。

 跨房通话的请求结果会通过 TRTCCloudCallback 中的 onConnectOtherRoom() 回调通知给您。

 <pre>
   //此处用到 jsoncpp 库来格式化 JSON 字符串
   Json::Value jsonObj;
   jsonObj["roomId"] = 002;
   jsonObj["userId"] = "userB";
   Json::FastWriter writer;
   std::string params = writer.write(jsonObj);
   trtc.ConnectOtherRoom(params.c_str());
 </pre>

 @param params JSON 字符串连麦参数，roomId 代表目标房间号，userId 代表目标用户 ID。


</member>
        <member name="M:ITRTCCloud.switchRole(TRTCRoleType)">
 1.3 切换角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）

 在直播场景下，一个用户可能需要在“观众”和“主播”之间来回切换。
 您可以在进房前通过 TRTCParams 中的 role 字段确定角色，也可以通过 switchRole 在进房后切换角色。

 @param role 目标角色，默认为主播：
  - {@link TRTCRoleAnchor} 主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。
  - {@link TRTCRoleAudience} 观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。

</member>
        <member name="M:ITRTCCloud.exitRoom">
 1.2 离开房间

 调用 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。
 待资源释放完毕，SDK 会通过 TRTCCloudCallback 中的 onExitRoom() 回调通知您。

 如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来后再执行相关操作。
 否则可能会遇到如摄像头、麦克风设备被强占等各种异常问题。

</member>
        <member name="M:ITRTCCloud.removeCallback(ITRTCCloudCallback*)">
 移除事件回调

 @param callback 事件回调指针

</member>
        <member name="M:ITRTCCloud.addCallback(ITRTCCloudCallback*)">
@name 设置 TRTCCloudCallback 回调
@{
 设置回调接口 ITRTCCloudCallback

 您可以通过 ITRTCCloudCallback 获得来自 SDK 的各种状态通知，详见 ITRTCCloudCallback.h 中的定义

 @param callback 事件回调指针

</member>
        <member name="M:destroyTRTCShareInstance">
\brief 释放 ITRTCCloud 单例对象。

</member>
        <member name="M:getTRTCShareInstance">
@defgroup ITRTCCloud_cplusplus ITRTCCloud
腾讯云视频通话功能的主要接口类
@{
@name 创建与销毁 ITRTCCloud 单例
@{
 \brief 用于动态加载 dll 时，获取 ITRTCCloud 对象指针。

 \return 返回 ITRTCCloud 单例对象的指针，注意：delete ITRTCCloud*会编译错误，需要调用 destroyTRTCCloud 释放单例指针对象。

</member>
        <member name="M:ManageLiteAV.ITRTCCloud.Finalize">
@}
</member>
        <member name="M:ManageLiteAV.ITRTCCloud.setMicVolumeOnMixing(System.UInt32)">
@}
@name 弃用接口函数
@{
<summary>
从 v6.9 版本开始废弃
</summary>
@deprecated 从 v6.9 版本开始废弃
<remarks>使用 setAudioCaptureVolume 接口替代。</remarks></member>
        <member name="M:ManageLiteAV.ITRTCCloud.callExperimentalAPI(System.String)">
            <summary>
14.8 调用实验性 API 接口
</summary>
            <remarks>
该接口用于调用一些实验性功能
</remarks>
            <param name="jsonStr">接口及参数描述的 JSON 字符串</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.showDebugView(System.Int32)">
            <summary>
14.7 显示仪表盘
</summary>
            <remarks>
仪表盘是状态统计和事件消息浮层 view，方便调试。
</remarks>
            <param name="showType">0：不显示；1：显示精简版；2：显示全量版，默认为不显示</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogCallback(ManageLiteAV.ITRTCLogCallback)">
            <summary>
14.6 设置日志回调
</summary>
            <param name="callback">日志回调</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogDirPath(System.String)">
            <summary>
14.5 设置日志保存路径
</summary>
            <remarks>
日志文件默认保存在 C:/Users/[系统用户名]/AppData/Roaming/Tencent/liteav/log，即 %appdata%/Tencent/liteav/log 下，如需修改，必须在所有方法前调用。
</remarks>
            <param name="path">存储日志的文件夹，例如 "D:\\Log"，UTF-8 编码</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogCompressEnabled(System.Boolean)">
            <summary>
14.4 启用或禁用 Log 的本地压缩

<para>开启压缩后，Log 存储体积明显减小，但需要腾讯云提供的 Python 脚本解压后才能阅读。</para><para>禁用压缩后，Log 采用明文存储，可以直接用记事本打开阅读，但占用空间较大。</para></summary>
            <param name="enabled">指定是否启用，默认为禁止状态</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setConsoleEnabled(System.Boolean)">
            <summary>
14.3 启用或禁用控制台日志打印
</summary>
            <param name="enabled">指定是否启用，默认为禁止状态</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogLevel(ManageLiteAV.TRTCLogLevel)">
            <summary>
14.2 设置 Log 输出级别
</summary>
            <param name="level">level 参见 TRTCLogLevel，默认值：TRTCLogLevelNone</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getSDKVersion">
@}
@name LOG 相关接口函数
@{
<summary>
14.1 获取 SDK 版本信息
</summary><returns>UTF-8 编码的版本号。</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSpeakerDeviceTest">
            <summary>
13.8 停止扬声器测试
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSpeakerDeviceTest(System.String)">
            <summary>
13.7 开启扬声器测试
<para>回调接口 onTestSpeakerVolume 获取测试数据</para><para>该方法播放指定的音频文件测试播放设备是否能正常工作。如果能听到声音，说明播放设备能正常工作。</para></summary>
            <param name="testAudioFilePath">音频文件的绝对路径，路径字符串使用 UTF-8 编码格式，支持文件格式：WAV、MP3</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopMicDeviceTest">
            <summary>
13.6 停止麦克风测试
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startMicDeviceTest(System.UInt32)">
            <summary>
13.5 开启麦克风测试
<para>回调接口 onTestMicVolume 获取测试数据</para><para>该方法测试麦克风是否能正常工作，volume 的取值范围为0 - 100。</para></summary>
            <param name="interval">反馈音量提示的时间间隔（ms），建议设置到大于 200 毫秒</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopCameraDeviceTest">
            <summary>
13.4 停止摄像头测试
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startCameraDeviceTest(System.IntPtr)">
            <summary>
13.3 开始进行摄像头测试

<para>会触发 onFirstVideoFrame 回调接口</para></summary>
            <remarks>
在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。
</remarks>
            <param name="rendHwnd">承载预览画面的窗口句柄</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSpeedTest">
            <summary>
13.2 停止网络测速
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSpeedTest(System.UInt32,System.String,System.String)">
@}
@name 设备和网络测试
@{
<summary>
13.1 开始进行网络测速（视频通话期间请勿测试，以免影响通话质量）

<para>测速结果将会用于优化 SDK 接下来的服务器选择策略，因此推荐您在用户首次通话前先进行一次测速，这将有助于我们选择最佳的服务器。</para><para>同时，如果测试结果非常不理想，您可以通过醒目的 UI 提示用户选择更好的网络。</para></summary><remarks>
测速本身会消耗一定的流量，所以也会产生少量额外的流量费用。
</remarks><param name="sdkAppId">应用标识</param><param name="userId">用户标识</param><param name="userSig">用户签名</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeAudioEffect(System.Int32)">
            <summary>
12.7 恢复音效
</summary>
            <param name="effectId">音效 Id</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseAudioEffect(System.Int32)">
            <summary>
12.6 暂停音效
</summary>
            <param name="effectId">音效 Id</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAllAudioEffectsVolume(System.Int32)">
            <summary>
12.5 设置所有音效音量
</summary>
            <remarks>该操作会覆盖通过 setAudioEffectVolume 指定的单独音效音量。</remarks>
            <param name="volume">音量大小，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAllAudioEffects">
            <summary>
12.4 停止所有音效
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAudioEffect(System.Int32)">
            <summary>
12.3 停止音效
</summary>
            <param name="effectId">音效 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioEffectVolume(System.Int32,System.Int32)">
            <summary>
12.2 设置音效音量
</summary>
            <remarks>会覆盖通过 setAllAudioEffectsVolume 指定的整体音效音量。</remarks>
            <param name="effectId">音效 ID</param>
            <param name="volume">音量大小，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.playAudioEffect(ManageLiteAV.TRTCAudioEffectParam)">
@}
@name 音效相关接口函数
@{
<summary>
12.1 播放指定音效

<para>每个音效都需要您指定具体的 ID，您可以通过该 ID 对音效的开始、停止、音量等进行设置。</para><para>若您想同时播放多个音效，请分配不同的 ID 进行播放。因为使用同一个 ID 播放不同音效，SDK 将会停止上一个 ID 对应的音效播放，再启动新的音效播放。</para></summary><param name="effect">音效</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSystemAudioLoopbackVolume(System.UInt32)">
            <summary>
11.12 设置系统声音采集的音量（64位 SDK 尚不支持系统混音能力）
</summary>
            <param name="volume">音量大小，取值范围为0 - 100。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSystemAudioLoopback">
            <summary>
11.11 关闭系统声音采集（64位 SDK 尚不支持系统混音能力）
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSystemAudioLoopback(System.String)">
            <summary>
11.10 打开系统声音采集（64位 SDK 尚不支持系统混音能力）
<para>
开启后可以采集整个操作系统的播放声音（path 为空）或某一个播放器（path 不为空）的声音，
并将其混入到当前麦克风采集的声音中一起发送到云端。
</para></summary>
            <param name="path">
                <para>- path 为空，代表采集整个操作系统的声音。</para>
                <para>- path 填写 exe 程序（如 QQ音乐）所在的路径，将会启动此程序并只采集此程序的声音。</para>
            </param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPublishVolume(System.UInt32)">
            <summary>
11.9 设置背景音乐远端播放音量的大小

<para>播放背景音乐混音时使用，用来控制背景音乐在远端播放时的音量大小。</para></summary>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPlayoutVolume(System.UInt32)">
            <summary>
11.8 设置背景音乐本地播放音量的大小

<para>播放背景音乐混音时使用，用来控制背景音乐在本地播放时的音量大小。</para></summary>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMVolume(System.UInt32)">
            <summary> 
11.7 设置背景音乐的音量大小，播放背景音乐混音时使用，用来控制背景音音量大小
</summary>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 200。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPosition(System.UInt32)">
            <summary>
11.6 设置 BGM 播放进度
</summary>
            <param name="pos">单位毫秒</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getBGMDuration(System.String)">
            <summary>
11.5 获取音乐文件总时长，单位毫秒
</summary>
            <param name="path">音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长</param>
            <returns>成功返回时长，失败返回-1</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeBGM">
            <summary>
11.4 继续播放背景音乐
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseBGM">
            <summary>
11.3 暂停播放背景音乐
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopBGM">
            <summary>
11.2 停止播放背景音乐
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.playBGM(System.String)">
@}
@name 背景混音相关接口函数
@{
<summary>
11.1 启动播放背景音乐
</summary><param name="path">音乐文件路径</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendSEIMsg(System.Byte[],System.Int32,System.Int32)">
            <summary>
11.2 将小数据量的自定义数据嵌入视频帧中
<para>
跟 sendCustomCmdMsg 的原理不同，sendSEIMsg 是将数据直接塞入视频数据头中。因此，即使视频帧被旁路到了直播 CDN 上，
这些数据也会一直存在。但是由于要把数据嵌入视频帧中，所以数据本身不能太大，推荐几个字节就好。
</para><para>最常见的用法是把自定义的时间戳（timstamp）用 sendSEIMsg 嵌入视频帧中，这种方案的最大好处就是可以实现消息和画面的完美对齐。</para></summary>
            <remarks>
本接口有以下限制：
<para>    -数据在接口调用完后不会被即时发送出去，而是从下一帧视频帧开始带在视频帧中发送。</para><para>    -发送消息到房间内所有用户，每秒最多能发送30条消息（与 sendCustomCmdMsg 共享限制）。</para><para>    -每个包最大为1KB，若发送大量数据，会导致视频码率增大，可能导致视频画质下降甚至卡顿（与 sendCustomCmdMsg 共享限制）。</para><para>    -每个客户端每秒最多能发送总计8KB数据（与 sendCustomCmdMsg 共享限制）。</para><para>    -若指定多次发送（repeatCount &gt; 1），则数据会被带在后续的连续 repeatCount 个视频帧中发送出去，同样会导致视频码率增大。</para><para>    -如果 repeatCount &gt; 1，多次发送，接收消息 onRecvSEIMsg 回调也可能会收到多次相同的消息，需要去重。</para></remarks>
            <param name="data">待发送的数据，最大支持1kb（1000字节）的数据大小</param>
            <param name="dataSize">待发送的数据大小</param>
            <param name="repeatCount">发送数据次数</param>
            <returns>true：消息已通过限制，等待后续视频帧发送；false:消息被限制发送</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomCmdMsg(System.UInt32,System.Byte[],System.UInt32,System.Boolean,System.Boolean)">
@}
@name 自定义消息发送
@{
<summary>
10.1 发送自定义消息给房间内所有用户
<para>
该接口可以借助音视频数据通道向当前房间里的其他用户广播您自定义的数据，但因为复用了音视频数据通道，
请务必严格控制自定义消息的发送频率和消息体的大小，否则会影响音视频数据的质量控制逻辑，造成不确定性的问题。
</para></summary><remarks>
本接口有以下限制：
<para>    -发送消息到房间内所有用户，每秒最多能发送30条消息。</para><para>    -每个包最大为1KB，超过则很有可能会被中间路由器或者服务器丢弃。</para><para>    -每个客户端每秒最多能发送总计8KB数据。</para><para>    -将 reliable 和 ordered 同时设置为 true 或 false，暂不支持交叉设置。</para><para>    -强烈建议不同类型的消息使用不同的 cmdID，这样可以在要求有序的情况下减小消息时延。</para></remarks><param name="cmdId">消息 ID，取值范围为1 - 10</param><param name="data">待发送的消息，最大支持1KB（1000字节）的数据大小</param><param name="dataSize">待发送的数据大小</param><param name="reliable">是否可靠发送，可靠发送的代价是会引入一定的延时，因为接收端要暂存一段时间的数据来等待重传</param><param name="ordered">是否要求有序，即是否要求接收端接收的数据顺序和发送端发送的顺序一致，这会带来一定的接收延时，因为在接收端需要暂存并排序这些消息</param><returns>true：消息已经发出；false：消息发送失败</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioFrameCallback(ManageLiteAV.ITRTCAudioFrameCallback)">
            <summary>
9.7 设置音频数据回调
<para>设置此方法，SDK 内部会把声音模块的数据（PCM 格式）回调出来，包括：</para><para>-onCapturedAudioFrame：本机麦克风采集到的音频数据</para><para>-onPlayAudioFrame：混音前的每一路远程用户的音频数据</para><para>-onMixedPlayAudioFrame：各路音频数据混合后送入扬声器播放的音频数据</para></summary>
            <param name="callback">声音帧数据（PCM 格式）的回调，callback = nullptr 则停止回调数据</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteVideoRenderCallback(System.String,ManageLiteAV.TRTCVideoPixelFormat,ManageLiteAV.TRTCVideoBufferType,ManageLiteAV.ITRTCVideoRenderCallback)">
            <summary>
9.6 设置远端视频自定义渲染

<para>此方法同 setLocalVideoRenderDelegate，区别在于一个是本地画面的渲染回调， 一个是远程画面的渲染回调。</para></summary>
            <remarks>
设置此方法，SDK 内部会把远端的数据解码后回调出来，SDK 跳过 HWND 渲染逻辑
<para>调用 setRemoteVideoRenderCallback(userId, TRTCVideoPixelFormat_Unknown,  TRTCVideoBufferType_Unknown, nullptr) 停止回调。</para></remarks>
            <param name="userId">用户标识</param>
            <param name="pixelFormat">指定回调的像素格式</param>
            <param name="bufferType">指定视频数据结构类型</param>
            <param name="callback">自定义渲染回调</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalVideoRenderCallback(ManageLiteAV.TRTCVideoPixelFormat,ManageLiteAV.TRTCVideoBufferType,ManageLiteAV.ITRTCVideoRenderCallback)">
            <summary>
9.5 设置本地视频自定义渲染
</summary>
            <remarks>
设置此方法，SDK 内部会把采集到的数据回调出来，SDK 跳过 HWND 渲染逻辑
<para>调用 setLocalVideoRenderCallback(TRTCVideoPixelFormat_Unknown, TRTCVideoBufferType_Unknown, nullptr) 停止回调</para></remarks>
            <param name="pixelFormat">指定回调的像素格式</param>
            <param name="bufferType">指定视频数据结构类型</param>
            <param name="callback">自定义渲染回调</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomAudioData(ManageLiteAV.TRTCAudioFrame)">
            <summary>
9.4 向 SDK 投送自己采集的音频数据
<para>TRTCAudioFrame 推荐如下填写方式（其他字段不需要填写）：</para><para>-audioFormat：仅支持 LiteAVAudioFrameFormatPCM。</para><para>-data：音频帧 buffer。</para><para>-length：音频帧数据长度，推荐每帧20ms采样数。【PCM格式、48000采样率、单声道的帧长度：48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。</para><para>-sampleRate：采样率，仅支持48000。</para><para>-channel：频道数量（如果是立体声，数据是交叉的），单声道：1； 双声道：2。</para><para>-timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。</para><para>参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。</para></summary>
            <remarks>
可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomAudioData 的调用间隔，否则会导致声音断断续续。
</remarks>
            <param name="frame">音频帧，仅支持 LiteAVAudioFrameFormatPCM 格式。目前只支持单声道，仅支持48K采样率，LiteAVAudioFrameFormatPCM 格式。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableCustomAudioCapture(System.Boolean)">
            <summary>
9.3 启用音频自定义采集模式

<para>开启该模式后，SDK 停止运行原有的音频采集流程，只保留编码和发送能力。</para><para>您需要用 sendCustomAudioData() 不断地向 SDK 塞入自己采集的音频数据。</para></summary>
            <param name="enable">是否启用，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomVideoData(ManageLiteAV.TRTCVideoFrame)">
            <summary>
9.2 向 SDK 投送自己采集的视频数据

<para>TRTCVideoFrame 推荐如下填写方式（其他字段不需要填写）：</para><para>-pixelFormat：仅支持 LiteAVVideoPixelFormat_I420。</para><para>-bufferType：仅支持 LiteAVVideoBufferType_Buffer。</para><para>-data：视频帧 buffer。</para><para>-length：视频帧数据长度，I420 格式下，其值等于：width × height × 3 / 2。</para><para>-width：视频图像长度。</para><para>-height：视频图像宽度。</para><para>-timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。</para><para>参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。</para></summary>
            <remarks>
- SDK 内部有帧率控制逻辑，目标帧率以您在 setVideoEncoderParam 中设置的为准，太快会自动丢帧，太慢则会自动补帧。
<para>- 可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomVideoData 的调用间隔，否则会导致视频帧率不稳定。</para></remarks>
            <param name="frame">视频数据，支持 I420 格式数据。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableCustomVideoCapture(System.Boolean)">
@}
@name 自定义采集和渲染
@{
<summary>
9.1 启用视频自定义采集模式

<para>开启该模式后，SDK 不在运行原有的视频采集流程，只保留编码和发送能力。</para><para>您需要用 sendCustomVideoData() 不断地向 SDK 塞入自己采集的视频画面。</para></summary><param name="enable">是否启用，默认值：false</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSubStreamMixVolume(System.UInt32)">
            <summary>
8.12 设置辅流的混音音量大小

<para>这个数值越高，辅路音量的占比就约高，麦克风音量占比就越小，所以不推荐设置得太大，否则麦克风的声音就被压制了。</para></summary>
            <param name="volume">设置的混音音量大小，范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSubStreamEncoderParam(ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
8.11 设置屏幕分享的编码器参数

<para>对应于 setVideoEncoderParam() 设置主路画面的编码质量，该函数仅用于设置辅路（屏幕分享、远程播片）的编码参数。</para><para>该设置决定了远端用户看到的画面质量，同时也是云端录制出的视频文件的画面质量。</para></summary>
            <param name="params">辅流编码参数，详情请参考 TRTCCloudDef.h 中的 TRTCVideoEncParam 定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopScreenCapture">
            <summary>
8.10 停止屏幕采集
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeScreenCapture">
            <summary>
8.9 恢复屏幕分享
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseScreenCapture">
            <summary>
8.8 暂停屏幕分享
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startScreenCapture(System.IntPtr)">
            <summary>
8.7 启动屏幕分享
</summary>
            <param name="rendHwnd">承载预览画面的窗口句柄</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.selectScreenCaptureTarget(ManageLiteAV.TRTCScreenCaptureSourceInfo@,ManageLiteAV.RECT@,System.Boolean,System.Boolean)">
            <summary>
8.6 设置屏幕共享参数，该方法在屏幕共享过程中也可以调用

<para>如果您期望在屏幕分享的过程中，切换想要分享的窗口，可以再次调用这个函数而不需要重新开启屏幕分享。</para><para>支持如下四种情况：</para><para>-共享整个屏幕：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为{ 0, 0, 0, 0 }</para><para>-共享指定区域：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为非 NULL，例如{ 100, 100, 300, 300 }</para><para>-共享整个窗口：sourceInfoList 中 type 为 Window 的 source，captureRect 设为{ 0, 0, 0, 0 }</para><para>-共享窗口区域：sourceInfoList 中 type 为 Window 的 source，captureRect 设为非 NULL，例如{ 100, 100, 300, 300 }</para></summary>
            <param name="source">指定分享源</param>
            <param name="captureRect">指定捕获的区域</param>
            <param name="captureMouse">指定是否捕获鼠标指针</param>
            <param name="highlightWindow">指定是否高亮正在共享的窗口，以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getScreenCaptureSources(ManageLiteAV.SIZE@,ManageLiteAV.SIZE@)">
            <summary>
8.5 枚举可共享的窗口列表

<para>如果您要给您的 App 增加屏幕分享功能，一般需要先显示一个窗口选择界面，这样用户可以选择希望分享的窗口。</para><para>通过如下函数，您可以获得可分享窗口的 ID、类型、窗口名称以及缩略图。</para><para>拿到这些信息后，您就可以实现一个窗口选择界面，当然，您也可以使用我们在 Demo 源码中已经实现好的一个界面。</para></summary>
            <remarks>
返回的列表中包括屏幕和应用窗口，屏幕会在列表的前面几个元素中。
<para>SDK 维护 ITRTCScreenCaptureSourceList 对象的生命周期。</para></remarks>
            <param name="thumbSize">指定要获取的窗口缩略图大小，缩略图可用于绘制在窗口选择界面上</param>
            <param name="iconSize">指定要获取的窗口图标大小</param>
            <returns>窗口列表包括屏幕</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteSubStreamViewRotation(System.String,ManageLiteAV.TRTCVideoRotation)">
            <summary>
8.4 设置屏幕分享画面的顺时针旋转角度

<para>对应于 setRemoteViewRotation() 用于设置主画面的旋转角度，该接口用于设置远端的辅路（屏幕分享、远程播片）画面。</para></summary>
            <param name="userId">用户 ID</param>
            <param name="rotation">支持90、180、270旋转角度</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteSubStreamViewFillMode(System.String,ManageLiteAV.TRTCVideoFillMode)">
            <summary>
8.3 设置辅流画面的渲染模式

<para>对应于 setRemoteViewFillMode() 于设置远端的主路画面，该接口用于设置远端的辅路（屏幕分享、远程播片）画面。</para></summary>
            <param name="userId">用户的 ID</param>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopRemoteSubStreamView(System.String)">
            <summary>
8.2 停止显示远端用户的屏幕分享画面。
</summary>
            <param name="userId">对方的用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startRemoteSubStreamView(System.String,System.IntPtr)">
@}
@name 辅流相关接口函数
@{
<summary>
8.1 开始渲染远端用户辅流画面

<para>对应于 startRemoteView() 用于显示主画面，该接口只能用于显示辅路（屏幕分享、远程播片）画面。</para></summary><remarks>
请在 onUserSubStreamAvailable 回调后再调用这个接口。
</remarks><param name="userId">对方的用户标识</param><param name="rendHwnd">渲染画面的窗口句柄</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setWaterMark(ManageLiteAV.TRTCVideoStreamType,System.String,ManageLiteAV.TRTCWaterMarkSrcType,System.UInt32,System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
7.2 设置水印

<para>水印的位置是通过 xOffset, yOffset, fWidthRatio 来指定的。</para><para>-xOffset：水印的坐标，取值范围为0 - 1的浮点数。</para><para>-yOffset：水印的坐标，取值范围为0 - 1的浮点数。</para><para>-fWidthRatio：水印的大小比例，取值范围为0 - 1的浮点数。</para></summary>
            <remarks>
只支持主路视频流
</remarks>
            <param name="streamType">要设置水印的流类型(TRTCVideoStreamTypeBig、TRTCVideoStreamTypeSub)</param>
            <param name="srcData">水印图片源数据（传 NULL 表示去掉水印）</param>
            <param name="srcType">水印图片源数据类型（传 NULL 时忽略该参数）</param>
            <param name="nWidth">水印图片像素宽度（源数据为文件路径时忽略该参数）</param>
            <param name="nHeight">水印图片像素高度（源数据为文件路径时忽略该参数）</param>
            <param name="xOffset">水印显示的左上角 x 轴偏移</param>
            <param name="yOffset">水印显示的左上角 y 轴偏移</param>
            <param name="fWidthRatio">水印显示的宽度占画面宽度比例（水印按该参数等比例缩放显示）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBeautyStyle(ManageLiteAV.TRTCBeautyStyle,System.UInt32,System.UInt32,System.UInt32)">
@}
@name 美颜相关接口函数
@{
<summary>
7.1 设置美颜、美白、红润效果级别

<para>SDK 内部集成了两套风格不同的磨皮算法，一套我们取名叫“光滑”，适用于美女秀场，效果比较明显。</para><para>另一套我们取名“自然”，磨皮算法更多地保留了面部细节，主观感受上会更加自然。</para></summary><param name="style">美颜风格，光滑或者自然，光滑风格磨皮更加明显，适合娱乐场景。</param><param name="beauty">美颜级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显</param><param name="white">美白级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显</param><param name="ruddiness">红润级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显，该参数暂未生效</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentSpeakerVolume(System.UInt32)">
            <summary>
6.10 设置系统当前扬声器设备音量
</summary>
            <remarks>设置的是系统硬件的音量大小。</remarks>
            <param name="volume">设置的扬声器音量，范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentSpeakerVolume">
            <summary>
6.9 获取系统当前扬声器设备音量
</summary>
            <remarks>查询的是系统硬件音量大小。</remarks>
            <returns>扬声器音量，范围0 - 100</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentSpeakerDevice">
            <summary>
6.8 获取当前的扬声器设备
</summary>
            <returns>ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentSpeakerDevice(System.String)">
            <summary>
6.7 设置要使用的扬声器
</summary>
            <param name="speakerId">从 getSpeakerDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getSpeakerDevicesList">
            <summary>
6.6 获取扬声器设备列表
</summary>
            <example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getSpeakerDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
</code></example>
            <remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期。
</remarks>
            <returns>扬声器管理器对象 ITRTCDeviceCollection</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentMicDeviceVolume(System.UInt32)">
            <summary>
6.5 设置系统当前麦克风设备的音量
</summary>
            <remarks>设置的是系统硬件的音量大小。</remarks>
            <param name="volume">麦克风音量值，范围[0 - 100]</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentMicDeviceVolume">
            <summary>
6.4 获取系统当前麦克风设备音量
</summary>
            <remarks>查询的是系统硬件音量大小。</remarks>
            <returns>音量值，范围是[0 - 100]</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentMicDevice">
            <summary>
6.3 获取当前选择的麦克风
</summary>
            <returns>ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentMicDevice(System.String)">
            <summary>
6.2 设置要使用的麦克风

<para>选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风</para></summary>
            <param name="micId">从 getMicDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getMicDevicesList">
@}
@name 音频设备相关接口函数
@{
<summary>
6.1 获取麦克风设备列表
</summary><example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getMicDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
pDevice = null;
</code></example><remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期。
</remarks><returns>麦克风管理器对象 ITRTCDeviceCollection</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentCameraDevice">
            <summary>
5.3 获取当前使用的摄像头
</summary>
            <returns> ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentCameraDevice(System.String)">
            <summary>
5.2 设置要使用的摄像头
</summary>
            <param name="deviceId">从 getCameraDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCameraDevicesList">
@}
@name 摄像头相关接口函数
@{
<summary>
5.1 获取摄像头设备列表
</summary><example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getCameraDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
pDevice = null;
</code></example><remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期。
</remarks><returns>摄像头管理器对象 ITRTCDeviceCollection</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAudioRecording">
            <summary>
4.12 停止录音
<para>如果调用 exitRoom 时还在录音，录音会自动停止。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableAudioVolumeEvaluation(System.UInt32)">
            <summary>
4.10 启用或关闭音量大小提示

<para>开启此功能后，SDK 会在 onUserVoiceVolume() 中反馈对每一路声音音量大小值的评估。</para><para>我们在 Demo 中有一个音量大小的提示条，就是基于这个接口实现的。</para><para>如希望打开此功能，请在 startLocalAudio() 之前调用。</para></summary>
            <param name="interval">设置 onUserVoiceVolume 回调的触发间隔，单位为ms，最小间隔为100ms，如果小于等于0则会关闭回调，建议设置为300ms</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getAudioPlayoutVolume">
            <summary>
4.9 获取 SDK 播放音量
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioPlayoutVolume(System.Int32)">
            <summary>
4.8 设置 SDK 播放音量。
</summary>
            <remarks>
在混合远程用户、Bgm和音效的音频流后，送入系统播放前生效。
<para>会影响本地录制的音量大小。</para><para>不会影响耳返的音量。</para></remarks>
            <param name="volume">音量大小，取值0 - 100，默认值为100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getAudioCaptureVolume">
            <summary>
4.7 获取 SDK 采集音量
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioCaptureVolume(System.Int32)">
            <summary>
4.6 设置 SDK 采集音量
</summary>
            <param name="volume">音量大小，取值0 - 100，默认值为100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteAllRemoteAudio(System.Boolean)">
            <summary>
4.5 静音掉所有用户的声音，同时不再拉取该远端用户的音频数据流
</summary>
            <param name="mute">true：静音；false：非静音</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteRemoteAudio(System.String,System.Boolean)">
            <summary>
4.4 静音掉某一个用户的声音，同时不再拉取该远端用户的音频数据流
</summary>
            <param name="userId">用户 ID</param>
            <param name="mute">true：静音；false：非静音</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteLocalAudio(System.Boolean)">
            <summary>
4.3 静音本地的音频

<para>当静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。</para><para>与 stopLocalAudio 不同之处在于，muteLocalAudio 并不会停止发送音视频数据，而是会继续发送码率极低的静音包。</para><para>在对录制质量要求很高的场景中，选择 muteLocalAudio 是更好的选择，能录制出兼容性更好的 MP4 文件。</para><para>这是由于 MP4 等视频文件格式，对于音频的连续性是要求很高的，简单粗暴地 stopLocalAudio 会导致录制出的 MP4 不易播放。</para></summary>
            <param name="mute">true：屏蔽；false：开启，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopLocalAudio">
            <summary>
4.2 关闭本地音频的采集和上行

<para>当关闭本地音频的采集和上行，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startLocalAudio">
@}
@name 音频相关接口函数
@{
<summary>
4.1 开启本地音频的采集和上行

<para>该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。</para><para>SDK 并不会默认开启本地的音频上行，也就说，如果您不调用这个函数，房间里的其他用户就听不到您的声音。</para></summary><remarks>
TRTC SDK 并不会默认打开本地的麦克风采集。
</remarks></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setPriorRemoteVideoStreamType(ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.20 设定观看方优先选择的视频质量

<para>低端设备推荐优先选择低清晰度的小画面。</para><para>如果对方没有开启双路视频模式，则此操作无效。</para></summary>
            <param name="type">默认观看大画面还是小画面，默认为 TRTCVideoStreamTypeBig</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteVideoStreamType(System.String,ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.19 选定观看指定 userId 的大画面还是小画面
<para>此功能需要该 userId 通过 enableEncSmallVideoStream 提前开启双路编码模式。</para><para>如果该 userId 没有开启双路编码模式，则此操作无效。</para></summary>
            <param name="userId">用户 ID</param>
            <param name="type">视频流类型，即选择看大画面还是小画面，默认为 TRTCVideoStreamTypeBig</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableSmallVideoStream(System.Boolean,ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
3.18 开启大小画面双路编码模式

<para>如果当前用户是房间中的主要角色（例如主播、老师、主持人等），并且使用 PC 或者 Mac 环境，可以开启该模式。</para><para>开启该模式后，当前用户会同时输出【高清】和【低清】两路视频流（但只有一路音频流）。</para><para>对于开启该模式的当前用户，会占用更多的网络带宽，并且会更加消耗 CPU 计算资源。</para><para>对于同一房间的远程观众而言：</para><para>- 如果用户的下行网络很好，可以选择观看【高清】画面</para><para>- 如果用户的下行网络较差，可以选择观看【低清】画面</para></summary>
            <param name="enable">是否开启小画面编码，默认值：false</param>
            <param name="smallVideoParam">小流的视频参数</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderMirror(System.Boolean)">
            <summary>
3.17 设置编码器输出的画面镜像模式

<para>该接口不改变本地摄像头的预览画面，但会改变另一端用户看到的（以及服务器录制下来的）画面效果。</para></summary>
            <param name="mirror">是否开启远端镜像, true：远端画面镜像；false：远端画面非镜像。默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewMirror(System.Boolean)">
            <summary>
3.16 设置本地摄像头预览画面的镜像模式
</summary>
            <param name="mirror">镜像模式，默认值：false（非镜像模式）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderRotation(ManageLiteAV.TRTCVideoRotation)">
            <summary>
3.15 设置视频编码输出的（也就是远端用户观看到的，以及服务器录制下来的）画面方向
</summary>
            <param name="rotation">支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteViewRotation(System.String,ManageLiteAV.TRTCVideoRotation)">
            <summary>
3.14 设置远端图像的顺时针旋转角度
</summary>
            <param name="userId">用户 ID</param>
            <param name="rotation">支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewRotation(ManageLiteAV.TRTCVideoRotation)">
            <summary>
3.13 设置本地图像的顺时针旋转角度
</summary>
            <param name="rotation">支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteViewFillMode(System.String,ManageLiteAV.TRTCVideoFillMode)">
            <summary>
3.12 设置远端图像的渲染模式
</summary>
            <param name="userId">用户 ID</param>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewFillMode(ManageLiteAV.TRTCVideoFillMode)">
            <summary>
3.11 设置本地图像的渲染模式
</summary>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setNetworkQosParam(ManageLiteAV.TRTCNetworkQosParam@)">
            <summary>
3.10 设置网络流控相关参数

<para>该设置决定了 SDK 在各种网络环境下的调控策略（例如弱网下是“保清晰”还是“保流畅”）</para></summary>
            <param name="params">网络流控参数，详情请参考 TRTCCloudDef.h 中 TRTCNetworkQosParam 的定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderParam(ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
3.9 设置视频编码器相关参数

<para>该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）</para></summary>
            <param name="params">视频编码参数，详情请参考 TRTCCloudDef.h 中 TRTCVideoEncParam 的定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteAllRemoteVideoStreams(System.Boolean)">
            <summary>
3.8 停止接收所有远端视频流
</summary>
            <param name="mute">是否停止接收</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteRemoteVideoStream(System.String,System.Boolean)">
            <summary>
3.7 暂停接收指定的远端视频流

<para>该接口仅停止接收远程用户的视频流，但并不释放显示资源，所以视频画面会冻屏在 mute 前的最后一帧。</para></summary>
            <param name="userId">对方的用户标识</param>
            <param name="mute">是否停止接收</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAllRemoteView">
            <summary>
3.6 停止显示所有远端视频画面，同时不再拉取远端用户的视频数据流
</summary>
            <remarks>
如果有屏幕分享的画面在显示，则屏幕分享的画面也会一并被关闭
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopRemoteView(System.String)">
            <summary>
3.5 停止显示远端视频画面，同时不再拉取远端用户的视频数据流

<para>调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。</para></summary>
            <param name="userId">对方的用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startRemoteView(System.String,System.IntPtr)">
            <summary>
3.4 开始显示远端视频画面
<para>
在收到 SDK 的 onUserVideoAvailable(userId, true) 通知时，可以获知该远程用户开启了视频，
此后调用 startRemoteView(userId) 接口加载该用户的远程画面时，可以用 loading 动画优化加载过程中的等待体验。
待该用户的首帧画面开始显示时，您会收到 onFirstVideoFrame(userId) 事件回调。
</para></summary>
            <param name="userId">对方的用户标识</param>
            <param name="rendHwnd">承载预览画面的窗口句柄</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteLocalVideo(System.Boolean)">
            <summary>
3.3 是否屏蔽自己的视频画面

<para>当屏蔽本地视频后，房间里的其它成员将会收到 onUserVideoAvailable 回调通知</para></summary>
            <param name="mute">true：屏蔽；false：开启，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopLocalPreview">
            <summary>
3.2 停止本地视频采集及预览
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startLocalPreview(System.IntPtr)">
@}
@name  视频相关接口函数
@{
<summary>
3.1 开启本地视频的预览画面
</summary><remarks>
这个接口会启动默认的摄像头，可以通过 setCurrentCameraDevice 接口选用其他摄像头
<para>当开始渲染首帧摄像头画面时，您会收到 ITRTCCloudCallback 中的 onFirstVideoFrame(null) 回调。</para></remarks><param name="rendHwnd">承载预览画面的窗口句柄</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopPublishCDNStream">
            <summary>
2.4 停止向非腾讯云地址转推
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startPublishCDNStream(ManageLiteAV.TRTCPublishCDNParam@)">
            <summary>
2.3 开始向友商云的直播 CDN 转推

<para>该接口跟 startPublishing() 类似，但 startPublishCDNStream() 支持向非腾讯云的直播 CDN 转推。</para><para>使用 startPublishing() 绑定腾讯云直播 CDN 不收取额外的费用。</para><para>使用 startPublishCDNStream() 绑定非腾讯云直播 CDN 需要收取转推费用，且需要通过工单联系我们开通。</para></summary>
            <param name="param">请参考 TRTCCloudDef.h 中关于 TRTCPublishCDNParam 的介绍</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopPublishing">
            <summary>
2.2 停止向腾讯云的直播 CDN 推流
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startPublishing(System.String,ManageLiteAV.TRTCVideoStreamType)">
@}
@name CDN 相关接口函数
@{
<summary>
2.1 开始向腾讯云的直播 CDN 推流

<para>该接口会指定当前用户的音视频流在腾讯云 CDN 所对应的 StreamId，进而可以指定当前用户的 CDN 播放地址。</para><para>例如：如果我们采用如下代码设置当前用户的主画面 StreamId 为 user_stream_001，那么该用户主画面对应的 CDN 播放地址为：</para><para>“http://yourdomain/live/user_stream_001.flv”，其中 yourdomain 为您自己备案的播放域名，</para><para>您可以在直播[控制台](https://console.cloud.tencent.com/live) 配置您的播放域名，腾讯云不提供默认的播放域名。</para><para>您也可以在设置 enterRoom 的参数 TRTCParams 时指定 streamId, 而且我们更推荐您采用这种方案。</para></summary><example><code>
ITRTCCloud trtcCloud = ITRTCCloud.getTRTCShareInstance();
trtcCloud.enterRoom(params, TRTCAppScene.TRTCAppSceneLIVE);
trtcCloud.startLocalPreview(Intptr);
trtcCloud.startLocalAudio();
trtcCloud.startPublishing("user_stream_001", TRTCVideoStreamType.TRTCVideoStreamTypeBig);
</code></example><remarks>
您需要先在实时音视频 [控制台](https://console.cloud.tencent.com/rav/) 中的功能配置页开启“启动自动旁路直播”才能生效。
</remarks><param name="streamId">自定义流 ID</param><param name="type">仅支持 TRTCVideoStreamTypeBig 和 TRTCVideoStreamTypeSub。</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setDefaultStreamRecvMode(System.Boolean,System.Boolean)">
            <summary>
1.6 设置音视频数据接收模式（需要在进房前设置才能生效）

<para>为实现进房秒开的绝佳体验，SDK 默认进房后自动接收音视频。即在您进房成功的同时，您将立刻收到远端所有用户的音视频数据。</para><para>若您没有调用 startRemoteView，视频数据将自动超时取消。</para><para>若您主要用于语音聊天等没有自动接收视频数据需求的场景，您可以根据实际需求选择接收模式。</para></summary>
            <param name="autoRecvAudio">true：自动接收音频数据；false：需要调用 muteRemoteAudio 进行请求或取消。默认值：true</param>
            <param name="autoRecvVideo">true：自动接收视频数据；false：需要调用 startRemoteView/stopRemoteView 进行请求或取消。默认值：true</param>
            <remarks>需要在进房前设置才能生效。</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.disconnectOtherRoom">
            <summary>
1.5 关闭跨房连麦

<para>跨房通话的退出结果会通过 ITRTCCloudCallback 中的 onDisconnectOtherRoom 回调通知给您。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.connectOtherRoom(System.String)">
            <summary>
1.4 请求跨房通话（主播 PK）
<para>
TRTC 中两个不同音视频房间中的主播，可以通过“跨房通话”功能拉通连麦通话功能。使用此功能时，
两个主播无需退出各自原来的直播间即可进行“连麦 PK”。
</para><para>
例如：当房间“001”中的主播 A 通过 connectOtherRoom() 跟房间“002”中的主播 B 拉通跨房通话后，
房间“001”中的用户都会收到主播 B 的 onRemoteUserEnterRoom(B) 回调和 onUserVideoAvailable(B, true) 回调。
房间“002”中的用户都会收到主播 A 的 onRemoteUserEnterRoom(A) 回调和 onUserVideoAvailable(A, true) 回调。
</para><para>简言之，跨房通话的本质，就是把两个不同房间中的主播相互分享，让每个房间里的观众都能看到两个主播。</para><para>                房间 001                     房间 002      </para><para>              -------------               ------------     </para><para> 跨房通话前： | 主播 A      |             | 主播 B     |    </para><para>             | 观众 U V W  |             | 观众 X Y Z |     </para><para>              -------------               ------------     </para><para /><para>                房间 001                     房间 002       </para><para>              -------------               ------------     </para><para> 跨房通话后： | 主播 A B    |             | 主播 B A   |     </para><para>             | 观众 U V W  |             | 观众 X Y Z |     </para><para>              -------------               ------------     </para><para>跨房通话的参数考虑到后续扩展字段的兼容性问题，暂时采用了 JSON 格式的参数，要求至少包含两个字段：</para><para>- roomId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 roomId 应指定为“002”。</para><para>- userId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 userId 应指定为 B 的 userId。</para><para>跨房通话的请求结果会通过 TRTCCloudCallback 中的 onConnectOtherRoom() 回调通知给您。</para><para> 此处用到 json 库来格式化json字符串                            </para><para> dynamic jsonObj = new JObject();                             </para><para> jsonObj["roomId"] = 002;                                     </para><para> jsonObj["userId"] = "userB";                                 </para><para> string params = JsonConvert.SerializeObject(jsonObj);        </para><para> trtc.connectOtherRoom(params);                               </para></summary>
            <param name="params">JSON 字符串连麦参数，roomId 代表目标房间号，userId 代表目标用户 ID。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.switchRole(ManageLiteAV.TRTCRoleType)">
            <summary>
1.3 切换角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）

<para>在直播场景下，一个用户可能需要在“观众”和“主播”之间来回切换。</para><para>您可以在进房前通过 TRTCParams 中的 role 字段确定角色，也可以通过 switchRole 在进房后切换角色。</para></summary>
            <param name="role">目标角色，默认为主播：
- {@link TRTCRoleAnchor} 主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。
- {@link TRTCRoleAudience} 观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。
</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.exitRoom">
            <summary>
1.2 离开房间

<para>调用 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。</para><para>待资源释放完毕，SDK 会通过 TRTCCloudCallback 中的 onExitRoom() 回调通知您。</para><para>如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来后再执行相关操作。</para><para>否则可能会遇到如摄像头、麦克风设备被强占等各种异常问题。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.removeCallback(ManageLiteAV.ITRTCCloudCallback)">
            <summary>
移除事件回调
</summary>
            <param name="callback">事件回调</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.addCallback(ManageLiteAV.ITRTCCloudCallback)">
@}
@name 设置 TRTCCloudCallback 回调
@{
<summary>
设置回调接口 ITRTCCloudCallback
<para>您可以通过 ITRTCCloudCallback 获得来自 SDK 的各种状态通知，详见 ITRTCCloudCallback.h 中的定义</para></summary><param name="callback">事件回调</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.destroyTRTCShareInstance">
            <summary>
释放 ITRTCCloud 单例对象。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getTRTCShareInstance">
@name 创建与销毁 ITRTCCloud 单例
@{
<summary>
获取 ITRTCCloud 单例对象。
</summary><returns>返回 ITRTCCloud 单例对象</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.Dispose">
            <summary>
析构函数，C# 代码中要求显示调用 Dispose 函数，来触发托管 C++ 类析构函数。
</summary>
        </member>
        <member name="T:ManageLiteAV.ITRTCCloud">
@defgroup ITRTCCloud_csharp ITRTCCloud
腾讯云视频通话功能的主要接口类
@{
<summary>
Module:   ITRTCCloud @ TXLiteAVSDK

<para>Function: 腾讯云视频通话功能的主要接口类</para><para>Nouns[1]: 主流 - TRTC 里称摄像头这一路的画面叫做“主流”（或主路）画面。</para><para>Nouns[2]: 辅流(substream) - TRTC 里称屏幕分享或者播片这一路的画面叫做“辅流”（或辅路）画面。</para><para>Nouns[3]: 播片(vodplay) - TRTC 的 Windows 版本支持将本地的一个视频文件分享出去，这个功能成为“播片”。</para></summary><example>
创建/使用/销毁 ITRTCCloud 对象的示例代码：
<code>
ITRTCCloud trtcCloud = ITRTCCloud.getTRTCShareInstance();
if (trtcCloud != null)
{
	string version = trtcCloud-&gt;getSDKVersion();
}
</code>
程序退出或者后续程序流程不需要使用 TRTCCloud 对象时，释放单例对象 ITRTCCloud
<code>
ITRTCCloud.destroyTRTCShareInstance();
trtcCloud = NULL;
</code></example></member>
        <member name="M:ITRTCLogCallback.onLog(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCLogLevel,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 14.1 有日志打印时的回调

 @param log 日志内容
 @param level 日志等级 参见 TRTCLogLevel
 @param module 暂无具体意义，目前为固定值 TXLiteAVSDK

</member>
        <member name="T:ITRTCLogCallback">
日志相关回调
</member>
        <member name="M:ITRTCAudioFrameCallback.onMixedPlayAudioFrame(LiteAVAudioFrame*)">
    * 13.3 各路音频数据混合后送入喇叭播放的音频数据
    * 
    * @param frame      音频数据
    * @note - 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
 	* @note - 此接口回调出的音频数据支持修改。
 	* @note - 此接口回调出的音频时间帧长固定为0.02s。
 	          由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。
 	          以SDK默认的音频播放格式48000采样率、双声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 2 × 16bit = 30720bit = 3840字节】。
 	* @note - 此接口回调出的音频数据是各路音频播放数据的混合,不包含耳返的音频数据。

</member>
        <member name="M:ITRTCAudioFrameCallback.onPlayAudioFrame(LiteAVAudioFrame*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
13.2 混音前的每一路远程用户的音频数据（例如您要对某一路的语音进行文字转换，必须要使用这里的原始数据，而不是混音之后的数据）

@param frame      音频数据
@param userId     用户标识
@note - 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
      - 此接口回调出的音频数据是只读的，不支持修改。

</member>
        <member name="M:ITRTCAudioFrameCallback.onCapturedAudioFrame(LiteAVAudioFrame*)">
    * 13.1 本地麦克风采集到的音频数据回调
    * 
    * @param frame      音频数据
    * @note - 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
    * @note - 此接口回调出的音频数据支持修改。
    * @note - 此接口回调出的音频时间帧长固定为0.02s。
              由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。
              以SDK默认的音频录制格式48000采样率、单声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。
    * @note - 此接口回调出的音频数据包含背景音、音效、混响等前处理效果。

</member>
        <member name="T:ITRTCAudioFrameCallback">
音频数据回调
</member>
        <member name="M:ITRTCVideoRenderCallback.onRenderVideoFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoStreamType,LiteAVVideoFrame*)">
 12.1 自定义视频渲染回调
 
 可以通过 setLocalVideoRenderCallback 和 setRemoteVideoRenderCallback 接口设置自定义渲染回调

 @param userId     用户标识
 @param streamType	流类型：即摄像头还是屏幕分享
 @param frame      视频帧数据

</member>
        <member name="T:ITRTCVideoRenderCallback">
自定义视频渲染回调
</member>
        <member name="M:ITRTCCloudCallback.onPlayBGMComplete(TXLiteAVError)">
 11.3 播放背景音乐结束

 @param errCode 错误码

</member>
        <member name="M:ITRTCCloudCallback.onPlayBGMProgress(System.UInt32,System.UInt32)">
 11.2 播放背景音乐的进度

 @param progressMS 已播放时间
 @param durationMS 总时间

</member>
        <member name="M:ITRTCCloudCallback.onPlayBGMBegin(TXLiteAVError)">
@}
@name 背景混音事件回调
@{
 11.1 开始播放背景音乐

 @param errCode 错误码

</member>
        <member name="M:ITRTCCloudCallback.onScreenCaptureStoped(System.Int32)">
 10.5 当屏幕分享停止时，SDK 会通过此回调通知

 @param reason 停止原因，0：表示用户主动停止；1：表示屏幕分享窗口被关闭

</member>
        <member name="M:ITRTCCloudCallback.onScreenCaptureResumed(System.Int32)">
 10.4 当屏幕分享恢复时，SDK 会通过此回调通知

 @param reason 停止原因，0：表示用户主动恢复，1：表示屏幕分享参数设置完毕后自动恢复；2：表示屏幕分享窗口从最小化被恢复；3：表示屏幕分享窗口从隐藏被恢复

</member>
        <member name="M:ITRTCCloudCallback.onScreenCapturePaused(System.Int32)">
 10.3 当屏幕分享暂停时，SDK 会通过此回调通知

 @param reason 停止原因，0：表示用户主动暂停；1：表示设置屏幕分享参数导致的暂停；2：表示屏幕分享窗口被最小化导致的暂停；3：表示屏幕分享窗口被隐藏导致的暂停

</member>
        <member name="M:ITRTCCloudCallback.onScreenCaptureStarted">
10.2 当屏幕分享开始时，SDK 会通过此回调通知

</member>
        <member name="M:ITRTCCloudCallback.onScreenCaptureCovered">
@}
@name 屏幕分享回调
@{
10.1 当屏幕分享窗口被遮挡无法正常捕获时，SDK 会通过此回调通知，可在此回调里通知用户移开遮挡窗口

</member>
        <member name="M:ITRTCCloudCallback.onAudioEffectFinished(System.Int32,System.Int32)">
@}
@name 音效回调
@{
 9.1 播放音效结束回调

 @param effectId
 @param code 0表示播放正常结束；其他表示异常结束

</member>
        <member name="M:ITRTCCloudCallback.onSetMixTranscodingConfig(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 8.5 设置云端的混流转码参数的回调，对应于 TRTCCloud 中的 setMixTranscodingConfig() 接口

 @param errCode 0表示成功，其余值表示失败
 @param errMsg 具体错误原因

</member>
        <member name="M:ITRTCCloudCallback.onStopPublishCDNStream(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 8.4 停止旁路推流到 CDN 完成的回调

 对应于 TRTCCloud 中的 stopPublishCDNStream() 接口


</member>
        <member name="M:ITRTCCloudCallback.onStartPublishCDNStream(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 8.3 启动旁路推流到 CDN 完成的回调

 对应于 TRTCCloud 中的 startPublishCDNStream() 接口

 @note Start 回调如果成功，只能说明转推请求已经成功告知给腾讯云，如果目标 CDN 有异常，还是有可能会转推失败。

</member>
        <member name="M:ITRTCCloudCallback.onStopPublishing(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 8.2 停止向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 stopPublishing() 接口

 @param err 0表示成功，其余值表示失败
 @param errMsg 具体错误原因

</member>
        <member name="M:ITRTCCloudCallback.onStartPublishing(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name CDN 旁路转推回调
@{
 8.1 开始向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 startPublishing() 接口

 @param err 0表示成功，其余值表示失败
 @param errMsg 具体错误原因

</member>
        <member name="M:ITRTCCloudCallback.onRecvSEIMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
 7.3 收到 SEI 消息的回调

 当房间中的某个用户使用 sendSEIMsg 发送数据时，房间中的其它用户可以通过 onRecvSEIMsg 接口接收数据。

 @param userId   用户标识
 @param message  数据
 @param messageSize 数据大小

</member>
        <member name="M:ITRTCCloudCallback.onMissCustomCmdMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32)">
 7.2 自定义消息丢失回调

 实时音视频使用 UDP 通道，即使设置了可靠传输（reliable）也无法确保100@%不丢失，只是丢消息概率极低，能满足常规可靠性要求。
 在发送端设置了可靠传输（reliable）后，SDK 都会通过此回调通知过去时间段内（通常为5s）传输途中丢失的自定义消息数量统计信息。

 @note  只有在发送端设置了可靠传输（reliable），接收方才能收到消息的丢失回调
 @param userId 用户标识
 @param cmdID 命令 ID
 @param errCode 错误码
 @param missed 丢失的消息数量

</member>
        <member name="M:ITRTCCloudCallback.onRecvCustomCmdMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
@}
@name 自定义消息的接收回调
@{
 7.1 收到自定义消息回调

 当房间中的某个用户使用 sendCustomCmdMsg 发送自定义消息时，房间中的其它用户可以通过 onRecvCustomCmdMsg 接口接收消息

 @param userId 用户标识
 @param cmdID 命令 ID
 @param seq   消息序号
 @param message 消息数据
 @param messageSize 消息数据大小

</member>
        <member name="M:ITRTCCloudCallback.onTestSpeakerVolume(System.UInt32)">
 6.6 扬声器测试音量回调
 
 扬声器测试接口 startSpeakerDeviceTest 会触发这个回调

 @param volume 音量值，取值范围0 - 100

</member>
        <member name="M:ITRTCCloudCallback.onTestMicVolume(System.UInt32)">
 6.5 麦克风测试音量回调
 
 麦克风测试接口 startMicDeviceTest 会触发这个回调

 @param volume 音量值，取值范围0 - 100

</member>
        <member name="M:ITRTCCloudCallback.onDeviceChange(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCDeviceType,TRTCDeviceState)">
 6.4 本地设备通断回调

 @param deviceId 设备 ID
 @param type 设备类型
 @param state 事件类型

</member>
        <member name="M:ITRTCCloudCallback.onUserVoiceVolume(TRTCVolumeInfo*,System.UInt32,System.UInt32)">
 6.3 用于提示音量大小的回调,包括每个 userId 的音量和远端总音量

 您可以通过调用 TRTCCloud 中的 enableAudioVolumeEvaluation 接口来开关这个回调或者设置它的触发间隔。
 需要注意的是，调用 enableAudioVolumeEvaluation 开启音量回调后，无论频道内是否有人说话，都会按设置的时间间隔调用这个回调，
 如果没有人说话，则 userVolumes 为空，totalVolume 为0。

 @param userVolumes 所有正在说话的房间成员的音量，取值范围0 - 100。
 @param userVolumesCount 房间成员数量
 @param totalVolume 所有远端成员的总音量, 取值范围0 - 100。
 @note userId 为 null 时表示自己的音量，userVolumes 内仅包含正在说话（音量不为0）的用户音量信息。

</member>
        <member name="M:ITRTCCloudCallback.onMicDidReady">
6.2 麦克风准备就绪

</member>
        <member name="M:ITRTCCloudCallback.onCameraDidReady">
@}
@name 硬件设备事件回调
@{
6.1 摄像头准备就绪

</member>
        <member name="M:ITRTCCloudCallback.onSpeedTest(TRTCSpeedTestResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
 5.4 服务器测速的回调，SDK 对多个服务器 IP 做测速，每个 IP 的测速结果通过这个回调通知

 @param currentResult 当前完成的测速结果
 @param finishedCount 已完成测速的服务器数量
 @param totalCount 需要测速的服务器总数量

</member>
        <member name="M:ITRTCCloudCallback.onConnectionRecovery">
5.3 SDK 跟服务器的连接恢复

</member>
        <member name="M:ITRTCCloudCallback.onTryToReconnect">
5.2 SDK 尝试重新连接到服务器

</member>
        <member name="M:ITRTCCloudCallback.onConnectionLost">
@}
@name 服务器事件回调
@{
5.1 SDK 跟服务器的连接断开

</member>
        <member name="M:ITRTCCloudCallback.onStatistics(TRTCStatistics!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 4.2 技术指标统计回调

 如果您是熟悉音视频领域相关术语，可以通过这个回调获取 SDK 的所有技术指标。
 如果您是首次开发音视频相关项目，可以只关注 onNetworkQuality 回调。

 @param statis 统计数据，包括本地和远程的
 @note 每2秒回调一次

</member>
        <member name="M:ITRTCCloudCallback.onNetworkQuality(TRTCQualityInfo,TRTCQualityInfo*,System.UInt32)">
@}
@name 统计和质量回调
@{
 4.1 网络质量：该回调每2秒触发一次，统计当前网络的上行和下行质量

 @note userId == null 代表自己当前的视频质量

 @param localQuality 上行网络质量
 @param remoteQuality 下行网络质量
 @param remoteQualityCount 下行网络质量的数组大小

</member>
        <member name="M:ITRTCCloudCallback.onUserExit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 3.11 废弃接口： 有主播离开当前房间

 该回调接口可以被看作是 onRemoteUserLeaveRoom 的废弃版本，不推荐使用。请使用 onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。

 @note 该接口已被废弃，不推荐使用

 @param userId 用户标识
 @param reason 离开原因。

</member>
        <member name="M:ITRTCCloudCallback.onUserEnter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 3.10 废弃接口：有主播加入当前房间

 该回调接口可以被看作是 onRemoteUserEnterRoom 的废弃版本，不推荐使用。请使用 onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。

 @note 该接口已被废弃，不推荐使用

 @param userId 用户标识

</member>
        <member name="M:ITRTCCloudCallback.onSendFirstLocalAudioFrame">
 3.9 首帧本地音频数据已经被送出

 SDK 会在 enterRoom() 并 startLocalAudio() 成功后开始麦克风采集，并将采集到的声音进行编码。
 当 SDK 成功向云端送出第一帧音频数据后，会抛出这个回调事件。

</member>
        <member name="M:ITRTCCloudCallback.onSendFirstLocalVideoFrame(TRTCVideoStreamType!System.Runtime.CompilerServices.IsConst)">
 3.8 首帧本地视频数据已经被送出

 SDK 会在 enterRoom() 并 startLocalPreview() 成功后开始摄像头采集，并将采集到的画面进行编码。
 当 SDK 成功向云端送出第一帧视频数据后，会抛出这个回调事件。

 @param streamType 视频流类型，主画面、小画面或辅流画面（屏幕分享）

</member>
        <member name="M:ITRTCCloudCallback.onFirstAudioFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 3.7 开始播放远程用户的首帧音频（本地声音暂不通知）

 @param userId 远程用户 ID。

</member>
        <member name="M:ITRTCCloudCallback.onFirstVideoFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TRTCVideoStreamType!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
 3.6 开始渲染本地或远程用户的首帧画面

 如果 userId 为 null，表示开始渲染本地采集的摄像头画面，需要您先调用 startLocalPreview 触发。
 如果 userId 不为 null，表示开始渲染远程用户的首帧画面，需要您先调用 startRemoteView 触发。

 @note 只有当您调用 startLocalPreview()、startRemoteView() 或 startRemoteSubStreamView() 之后，才会触发该回调。

 @param userId 本地或远程用户 ID，如果 userId == null 代表本地，userId != null 代表远程。
 @param streamType 视频流类型：摄像头或屏幕分享。
 @param width  画面宽度
 @param height 画面高度

</member>
        <member name="M:ITRTCCloudCallback.onUserAudioAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 3.5 远端用户是否存在可播放的音频数据

 @param userId 用户标识
 @param available 声音是否开启

</member>
        <member name="M:ITRTCCloudCallback.onUserSubStreamAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 3.4 远端用户是否存在可播放的辅路画面（一般用于屏幕分享）

 @note 显示辅路画面使用的函数是 startRemoteSubStreamView() 而非 startRemoteView()。
 @param userId 用户标识
 @param available 屏幕分享是否开启

</member>
        <member name="M:ITRTCCloudCallback.onUserVideoAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 3.3 远端用户是否存在可播放的主路画面（一般用于摄像头）

 当您收到 onUserVideoAvailable(userId, YES) 通知时，表示该路画面已经有可用的视频数据帧到达。
 此时，您需要调用 startRemoteView(userId) 接口加载该用户的远程画面。
 然后，您还会收到名为 onFirstVideoFrame(userId) 的首帧画面渲染回调。

 当您收到 onUserVideoAvailable(userId, NO) 通知时，表示该路远程画面已被关闭，
 可能由于该用户调用了 muteLocalVideo() 或 stopLocalPreview()。

 @param userId 用户标识
 @param available 画面是否开启

</member>
        <member name="M:ITRTCCloudCallback.onRemoteUserLeaveRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 3.2 有用户离开当前房间

 与 onRemoteUserEnterRoom 相对应，在两种不同的应用场景下，该通知的行为会有差别：
 - 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户的离开都会触发该通知。
 - 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：只有主播离开房间时才会触发该通知，观众离开房间不会触发该通知。

 @param userId 用户标识
 @param reason 离开原因，0表示用户主动退出房间，1表示用户超时退出，2表示被踢出房间。

</member>
        <member name="M:ITRTCCloudCallback.onRemoteUserEnterRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name 成员事件回调
@{
 3.1 有用户加入当前房间

 出于性能方面的考虑，在两种不同的应用场景下，该通知的行为会有差别：
 - 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户进入房间都会触发该通知。
 - 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：该场景不限制观众的数量，如果任何用户进出都抛出回调会引起很大的性能损耗，所以该场景下只有主播进入房间时才会触发该通知，观众进入房间不会触发该通知。


 @note 注意 onRemoteUserEnterRoom 和 onRemoteUserLeaveRoom 只适用于维护当前房间里的“成员列表”，如果需要显示远程画面，建议使用监听 onUserVideoAvailable() 事件回调。

 @param userId 用户标识

</member>
        <member name="M:ITRTCCloudCallback.onDisconnectOtherRoom(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.5 结束跨房通话（主播 PK）的结果回调

</member>
        <member name="M:ITRTCCloudCallback.onConnectOtherRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 2.4 请求跨房通话（主播 PK）的结果回调

 调用 TRTCCloud 中的 connectOtherRoom() 接口会将两个不同房间中的主播拉通视频通话，也就是所谓的“主播PK”功能。
 调用者会收到 onConnectOtherRoom() 回调来获知跨房通话是否成功，
 如果成功，两个房间中的所有用户都会收到 PK 主播的 onUserVideoAvailable() 回调。

 @param userId 要 PK 的目标主播 userId。
 @param errCode 错误码，ERR_NULL 代表切换成功，其他请参见[错误码](https://cloud.tencent.com/document/product/647/32257)。
 @param errMsg  错误信息。

</member>
        <member name="M:ITRTCCloudCallback.onSwitchRole(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 2.3 切换角色的事件回调

 调用 TRTCCloud 中的 switchRole() 接口会切换主播和观众的角色，该操作会伴随一个线路切换的过程，
 待 SDK 切换完成后，会抛出 onSwitchRole() 事件回调。

 @param errCode 错误码，ERR_NULL 代表切换成功，其他请参见[错误码](https://cloud.tencent.com/document/product/647/32257)。
 @param errMsg  错误信息。

</member>
        <member name="M:ITRTCCloudCallback.onExitRoom(System.Int32)">
 2.2 离开房间的事件回调

 调用 TRTCCloud 中的 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。
 待资源释放完毕，SDK 会通过 onExitRoom() 回调通知到您。

 如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来后再执行相关操作。
 否则可能会遇到例如摄像头、麦克风设备被强占等各种异常问题。

 @param reason 离开房间原因，0：主动调用 exitRoom 退房；1：被服务器踢出当前房间；2：当前房间整个被解散。

</member>
        <member name="M:ITRTCCloudCallback.onWarning(TXLiteAVWarning,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)">
 1.2 警告回调：用于告知您一些非严重性问题，例如出现了卡顿或者可恢复的解码失败。

 @param warningCode 警告码
 @param warningMsg 警告信息
 @param extraInfo 扩展信息字段，个别警告码可能会带额外的信息帮助定位问题

</member>
        <member name="M:ITRTCCloudCallback.onError(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)">
@name 错误事件和警告事件
@{
 1.1 错误回调：SDK 不可恢复的错误，一定要监听，并分情况给用户适当的界面提示。

 @param errCode 	错误码
 @param errMsg 	错误信息
 @param extraInfo 扩展信息字段，个别错误码可能会带额外的信息帮助定位问题

</member>
        <member name="T:ITRTCCloudCallback">
@defgroup ITRTCCloudCallback_cplusplus ITRTCCloudCallback
腾讯云视频通话功能的回调接口类
@{
腾讯云视频通话功能的回调接口类

</member>
        <member name="T:TXLiteAVError">
@}
</member>
        <member name="F:TRTCStatistics.remoteStatisticsArraySize">
数组 remoteStatisticsArray 的大小
</member>
        <member name="F:TRTCStatistics.remoteStatisticsArray">
远端成员的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</member>
        <member name="F:TRTCStatistics.localStatisticsArraySize">
数组 localStatisticsArray 的大小
</member>
        <member name="F:TRTCStatistics.localStatisticsArray">
本地的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</member>
        <member name="F:TRTCStatistics.sentBytes">
总发送字节总数（包含信令和音视频）
</member>
        <member name="F:TRTCStatistics.receivedBytes">
总接收字节数（包含信令和音视频）
</member>
        <member name="F:TRTCStatistics.rtt">
延迟（毫秒），
指 SDK 到腾讯云服务器的一次网络往返时间，该值越小越好。
一般低于50ms的 rtt 相对理想，而高于100ms的 rtt 会引入较大的通话延时。
由于数据上下行共享一条网络连接，所以 local 和 remote 的 rtt 相同。
</member>
        <member name="F:TRTCStatistics.systemCpu">
当前系统的 CPU 使用率（％）
</member>
        <member name="F:TRTCStatistics.appCpu">
当前 App 的 CPU 使用率（％）
</member>
        <member name="F:TRTCStatistics.downLoss">
S -&gt; C 下行丢包率（％），
     * 该值越小越好，例如，丢包率为0表示网络很好，
     * 丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在下行传输中。

</member>
        <member name="F:TRTCStatistics.upLoss">
C -&gt; S 上行丢包率（％），
     * 该值越小越好，例如，丢包率为0表示网络很好，
     * 丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在上行传输中。

</member>
        <member name="T:TRTCStatistics">
统计数据

</member>
        <member name="F:TRTCRemoteStatistics.finalLoss">
该线路的总丢包率（％）
     *
     * 这个值越小越好，例如，丢包率为0表示网络很好。
     * 丢包率是该线路的 userId 从上行到服务器再到下行的总丢包率。
     * 如果 downLoss 为0，但是 finalLoss 不为0，说明该 userId 上行时出现了无法恢复的丢包。

</member>
        <member name="T:TRTCRemoteStatistics">
远端成员的音视频统计信息

</member>
        <member name="T:TRTCLocalStatistics">
@}
@defgroup TRTCCloudDef_cplusplus 关键类型定义
@{
自己本地的音视频统计信息

</member>
        <member name="F:TRTCAudioEffectParam.volume">
【字段含义】音效音量
【推荐取值】取值范围为0 - 100；默认值：100
</member>
        <member name="F:TRTCAudioEffectParam.publish">
【字段含义】音效是否上行
【推荐取值】YES：音效在本地播放的同时，会上行至云端，因此远端用户也能听到该音效；NO：音效不会上行至云端，因此只能在本地听到该音效。默认值：NO
</member>
        <member name="F:TRTCAudioEffectParam.loopCount">
【字段含义】循环播放次数
【推荐取值】取值范围为0 - 任意正整数，默认值：0。0表示播放音效一次；1表示播放音效两次；以此类推
</member>
        <member name="F:TRTCAudioEffectParam.path">
【字段含义】音效路径，支持的文件格式：aac, mp3。
</member>
        <member name="F:TRTCAudioEffectParam.effectId">
【字段含义】音效 ID，
【特殊说明】SDK 允许播放多路音效，因此需要音效 ID 进行标记，用于控制音效的开始、停止、音量等
</member>
        <member name="T:TRTCAudioEffectParam">
 5.14 音效


</member>
        <member name="F:TRTCAudioRecordingParams.filePath">
【字段含义】文件路径（必填），录音文件的保存路径。该路径需要用户自行指定，请确保路径存在且可写。
【特别说明】该路径需精确到文件名及格式后缀，格式后缀决定录音文件的格式，目前支持的格式有 PCM、WAV 和 AAC。
         例如，指定路径为 path/to/audio.aac，则会生成一个 AAC 格式的文件。
         请指定一个有读写权限的合法路径，否则录音文件无法生成。
</member>
        <member name="T:TRTCAudioRecordingParams">
 5.13 录音参数

 请正确填写参数，确保录音文件顺利生成。

</member>
        <member name="F:TRTCPublishCDNParam.url">
旁路转推的 URL
</member>
        <member name="F:TRTCPublishCDNParam.bizId">
腾讯云直播 bizid，请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】，在“直播信息”中获取
</member>
        <member name="F:TRTCPublishCDNParam.appId">
腾讯云 AppID，请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】，在“直播信息”中获取
</member>
        <member name="T:TRTCPublishCDNParam">
5.12 CDN 旁路推流参数

</member>
        <member name="F:TRTCTranscodingConfig.mixUsersArraySize">
【字段含义】 数组 mixUsersArray 的大小
</member>
        <member name="F:TRTCTranscodingConfig.mixUsersArray">
【字段含义】每一路子画面的位置信息
</member>
        <member name="F:TRTCTranscodingConfig.audioChannels">
【字段含义】最终转码后的音频声道数
【推荐取值】默认值：1。取值范围为 [1,2] 中的整型。
</member>
        <member name="F:TRTCTranscodingConfig.audioBitrate">
【字段含义】最终转码后的音频码率。
【推荐取值】默认值：64kbps，取值范围是 [32，192]。
</member>
        <member name="F:TRTCTranscodingConfig.audioSampleRate">
【字段含义】最终转码后的音频采样率。
【推荐取值】默认值：48000Hz。支持12000HZ、16000HZ、22050HZ、24000HZ、32000HZ、44100HZ、48000HZ。
</member>
        <member name="F:TRTCTranscodingConfig.backgroundColor">
【字段含义】混合后画面的底色颜色，默认为黑色，格式为十六进制数字，比如：“0x61B9F1” 代表 RGB 分别为(97,158,241)。
【推荐取值】默认值：0x000000，黑色
</member>
        <member name="F:TRTCTranscodingConfig.videoGOP">
【字段含义】最终转码后的视频分辨率的关键帧间隔（又称为 GOP）。
【推荐取值】默认值：2，单位为秒，取值范围是 [1,8]。
</member>
        <member name="F:TRTCTranscodingConfig.videoFramerate">
【字段含义】最终转码后的视频分辨率的帧率（FPS）。
【推荐取值】默认值：15fps，取值范围是 (0,30]。
</member>
        <member name="F:TRTCTranscodingConfig.videoBitrate">
【字段含义】最终转码后的视频分辨率的码率（kbps）。
【推荐取值】如果填0，后台会根据videoWidth和videoHeight来估算码率，您也可以参考枚举定义TRTCVideoResolution_640_480的注释。
</member>
        <member name="F:TRTCTranscodingConfig.videoHeight">
【字段含义】最终转码后的视频分辨率的高度。
【推荐取值】推荐值：640px ，如果你是纯音频推流，请将 width × height 设为 0px × 0px，否则混流后会携带一条画布背景的视频流。
</member>
        <member name="F:TRTCTranscodingConfig.videoWidth">
【字段含义】最终转码后的视频分辨率的宽度。
【推荐取值】推荐值：360px ，如果你是纯音频推流，请将 width × height 设为 0px × 0px，否则混流后会携带一条画布背景的视频流。
</member>
        <member name="F:TRTCTranscodingConfig.bizId">
【字段含义】腾讯云直播 bizid
【推荐取值】请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】后，在“直播信息”中获取
</member>
        <member name="F:TRTCTranscodingConfig.appId">
【字段含义】腾讯云直播 AppID
【推荐取值】请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】后，在“直播信息”中获取
</member>
        <member name="F:TRTCTranscodingConfig.mode">
【字段含义】转码 config 模式
</member>
        <member name="T:TRTCTranscodingConfig">
 5.11 云端混流（转码）配置

 包括最终编码质量和各路画面的摆放位置

</member>
        <member name="T:TRTCTranscodingConfigMode">
 5.10 混流参数配置模式


</member>
        <member name="F:TRTCTranscodingConfigMode_Template_PresetLayout">
预排版模式，通过占位符提前对各路画面进行排布
此模式下，您依然需要设置 mixUsers 参数，但可以将 userId 设置为占位符，可选的占位符有：
- "$PLACE_HOLDER_REMOTE$"     :  指代远程用户的画面，可以设置多个。
- "$PLACE_HOLDER_LOCAL_MAIN$" ： 指代本地摄像头画面，只允许设置一个。
- "$PLACE_HOLDER_LOCAL_SUB$"  :  指代本地屏幕分享画面，只允许设置一个。
但是您可以不需要监听 TRTCCloudDelegate 中的 onUserVideoAvailable() 和 onUserAudioAvailable() 回调进行实时调整，
只需要在进房成功后调用一次 setMixTranscodingConfig() 即可，之后 SDK 会自动将真实的 userId 补位到您设置的占位符上。
</member>
        <member name="F:TRTCTranscodingConfigMode_Template_PureAudio">
纯音频模式，适用于语音通话（AudioCall）和语音聊天室（VoiceChatRoom）等纯音频场景。
只需要在进房后通过 setMixTranscodingConfig() 接口设置一次，之后 SDK 就会自动把房间内所有上麦用户的声音混流到当前用户的直播流上。
此模式下，您无需设置 TRTCTranscodingConfig 中的 mixUsers 参数，只需设置 audioSampleRate、audioBitrate 和 audioChannels 等参数。
</member>
        <member name="F:TRTCTranscodingConfigMode_Manual">
全手动模式，灵活性最高，可以自由组合出各种混流方案，但易用性最差。
此模式下，您需要填写 TRTCTranscodingConfig 中的所有参数，并需要监听 TRTCCloudDelegate 中的 onUserVideoAvailable() 和 onUserAudioAvailable() 回调，
以便根据当前房间中各个上麦用户的音视频状态不断地调整 mixUsers 参数，否则会导致混流失败。
</member>
        <member name="F:TRTCTranscodingConfigMode_Unknown">
非法值
</member>
        <member name="F:TRTCMixUser.streamType">
参与混合的是主路画面（TRTCVideoStreamTypeBig）或屏幕分享（TRTCVideoStreamTypeSub）画面
</member>
        <member name="F:TRTCMixUser.pureAudio">
该用户是不是只开启了音频
</member>
        <member name="F:TRTCMixUser.zOrder">
图层层次（1 - 15）不可重复
</member>
        <member name="F:TRTCMixUser.rect">
图层位置坐标以及大小，左上角为坐标原点(0,0) （绝对像素值）
</member>
        <member name="F:TRTCMixUser.roomId">
参与混流的 roomId，跨房流传入的实际 roomId，当前房间流传入 roomId = NULL
</member>
        <member name="F:TRTCMixUser.userId">
参与混流的 userId
</member>
        <member name="T:TRTCMixUser">
 5.9 云端混流中每一路子画面的位置信息

 TRTCMixUser 用于指定每一路（即每一个 userId）视频画面的具体摆放位置

</member>
        <member name="F:TRTCSpeedTestResult.rtt">
延迟（毫秒），指当前设备到腾讯云服务器的一次网络往返时间，该值越小越好，正常数值范围是10ms - 100ms
</member>
        <member name="F:TRTCSpeedTestResult.downLostRate">
下行丢包率，范围是0 - 1.0，例如，0.2表示每从服务器收取10个数据包可能会在中途丢失2个。
</member>
        <member name="F:TRTCSpeedTestResult.upLostRate">
上行丢包率，范围是0 - 1.0，例如，0.3表示每向服务器发送10个数据包可能会在中途丢失3个。
</member>
        <member name="F:TRTCSpeedTestResult.quality">
网络质量，内部通过评估算法测算出的网络质量，loss 越低，rtt 越小，得分便越高
</member>
        <member name="F:TRTCSpeedTestResult.ip">
服务器 IP 地址
</member>
        <member name="T:TRTCSpeedTestResult">
 5.8 网络测速结果

 您可以在用户进入房间前通过 TRTCCloud 的 startSpeedTest 接口进行测速 （注意：请不要在通话中调用），
 测速结果会每2 - 3秒钟返回一次，每次返回一个 IP 地址的测试结果。

 @note - quality 是内部通过评估算法测算出的网络质量，loss 越低，rtt 越小，得分便越高。
 @note - upLostRate 是指上行丢包率。例如，0.3表示每向服务器发送10个数据包可能会在中途丢失3个。
 @note - downLostRate 是指下行丢包率。例如，0.2表示每从服务器收取10个数据包可能会在中途丢失2个。
 @note - rtt 是指当前设备到腾讯云服务器的一次网络往返时间，该值越小越好，正常数值范围是10ms - 100ms

</member>
        <member name="D:TRTCAudioFrame">
 5.7 音频帧数据

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="D:TRTCVideoFrame">
 5.6 视频帧数据

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="F:TRTCVolumeInfo.volume">
说话者的音量， 取值范围0 - 100
</member>
        <member name="F:TRTCVolumeInfo.userId">
说话者的 userId，字符编码格式为 UTF-8
</member>
        <member name="T:TRTCVolumeInfo">
 5.5 音量大小

 表示语音音量的评估大小，通过这个数值，您可以在 UI 界面上用图标表征 userId 是否有在说话。

</member>
        <member name="T:TRTCQualityInfo">
 5.4 视频质量

 表示视频质量的好坏，通过这个数值，您可以在 UI 界面上用图标表征 userId 的通话线路质量

</member>
        <member name="F:TRTCNetworkQosParam.controlMode">
【字段含义】视频分辨率（云端控制 - 客户端控制）
【推荐取值】云端控制
【特别说明】
  - Server 模式（默认）：云端控制模式，若无特殊原因，请直接使用该模式
  - Client 模式：客户端控制模式，用于 SDK 开发内部调试，客户请勿使用
</member>
        <member name="F:TRTCNetworkQosParam.preference">
【字段含义】弱网下是“保清晰”或“保流畅”
【特别说明】
  - 弱网下保流畅：在遭遇弱网环境时，画面会变得模糊，且出现较多马赛克，但可以保持流畅不卡顿。
  - 弱网下保清晰：在遭遇弱网环境时，画面会尽可能保持清晰，但可能容易出现卡顿
</member>
        <member name="T:TRTCNetworkQosParam">
 5.3 网络流控相关参数

 网络流控相关参数，该设置决定了SDK在各种网络环境下的调控方向（比如弱网下是“保清晰”或“保流畅”）

</member>
        <member name="F:TRTCVideoEncParam.enableAdjustRes">
【字段含义】是否允许调整分辨率
【推荐取值】 
    - 手机直播建议选择 false。
    - 视频通话模式，若更关注流畅性，建议选择 true，此时若遇到带宽有限的弱网，SDK 会自动降低分辨率以保障更好的流畅度（仅针对 TRTCVideoStreamTypeBig 生效）。
    - 默认值：false。
【特别说明】若有录制需求，选择 true 时，请确保通话过程中，调整分辨率不会影响您的录制效果。
</member>
        <member name="F:TRTCVideoEncParam.videoBitrate">
【字段含义】目标视频码率，SDK 会按照目标码率进行编码，只有在网络不佳的情况下才会主动降低视频码率。
【推荐取值】请参考本 TRTCVideoResolution 在各档位注释的最佳码率，也可以在此基础上适当调高。
           比如 TRTCVideoResolution_1280_720 对应 1200kbps 的目标码率，您也可以设置为 1500kbps 用来获得更好的清晰度观感。
【特别说明】SDK 会尽可能按照 videoBitrate 指定的码率进行编码，只有在网络不佳的情况下才会主动降低视频码率。
</member>
        <member name="F:TRTCVideoEncParam.videoFps">
【字段含义】视频采集帧率
【推荐取值】15fps 或 20fps。5fps以下，卡顿感明显。10fps以下，会有轻微卡顿感。20fps以上，则过于浪费（电影的帧率为24fps）。
【特别说明】很多 Android 手机的前置摄像头并不支持15fps以上的采集帧率，部分过于突出美颜功能的 Android 手机前置摄像头的采集帧率可能低于10fps。
</member>
        <member name="F:TRTCVideoEncParam.resMode">
【字段含义】分辨率模式（横屏分辨率 - 竖屏分辨率）
【推荐取值】手机直播建议选择 Portrait，Window 和 Mac 建议选择 Landscape。
【特别说明】如果 videoResolution 指定分辨率 640 × 360，resMode 指定模式为 Portrait，则最终编码出的分辨率为360 × 640。
</member>
        <member name="F:TRTCVideoEncParam.videoResolution">
【字段含义】 视频分辨率
【推荐取值】 
   - 视频通话建议选择360 × 640及以下分辨率，resMode 选择 Portrait。
   - 手机直播建议选择540 × 960，resMode 选择 Portrait。
   - Window 和 iMac 建议选择640 × 360及以上分辨率，resMode 选择 Landscape。
【特别说明】 
   TRTCVideoResolution 默认只能横屏模式的分辨率，例如640 × 360。
   如需使用竖屏分辨率，请指定 resMode 为 Portrait，例如640 × 360结合 Portrait 则为360 × 640。
</member>
        <member name="T:TRTCVideoEncParam">
 5.2 视频编码参数

 该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）。

</member>
        <member name="F:TRTCParams.businessInfo">
【字段含义】业务数据（非必填），部分高级特性才需要使用该字段。
【推荐取值】不建议使用
</member>
        <member name="F:TRTCParams.privateMapKey">
【字段含义】房间签名（非必填），当您希望某个房间只能让特定的 userId 进入时，需要使用 privateMapKey 进行权限保护。
【推荐取值】仅建议有高级别安全需求的客户使用，更多详情请参见 [进房权限保护](https://cloud.tencent.com/document/product/647/32240)。
</member>
        <member name="F:TRTCParams.userDefineRecordId">
【字段含义】设置云端录制完成后的回调消息中的 "userdefinerecordid"  字段内容，便于您更方便的识别录制回调。        
【推荐取值】限制长度为64字节，只允许包含大小写英文字母（a-zA-Z）、数字（0-9）及下划线和连词符。
【参考文档】[云端录制](https://cloud.tencent.com/document/product/647/16823)。
</member>
        <member name="F:TRTCParams.streamId">
【字段含义】绑定腾讯云直播 CDN 流 ID[非必填]，设置之后，您就可以在腾讯云直播 CDN 上通过标准直播方案（FLV或HLS）播放该用户的音视频流。
【推荐取值】限制长度为64字节，可以不填写，一种推荐的方案是使用 “sdkappid_roomid_userid_main” 作为 streamid，这样比较好辨认且不会在您的多个应用中发生冲突。
【特殊说明】要使用腾讯云直播 CDN，您需要先在[控制台](https://console.cloud.tencent.com/trtc/) 中的功能配置页开启“启动自动旁路直播”开关。
【参考文档】[CDN 旁路直播](https://cloud.tencent.com/document/product/647/16826)。
</member>
        <member name="F:TRTCParams.role">
【字段含义】直播场景下的角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom），视频通话场景下指定无效。
【推荐取值】默认值：主播（TRTCRoleAnchor）
</member>
        <member name="F:TRTCParams.roomId">
【字段含义】房间号码（必填），在同一个房间内的用户可以看到彼此并进行视频通话。
【推荐取值】取值范围：1 - 4294967294。
</member>
        <member name="F:TRTCParams.userSig">
【字段含义】用户签名（必填），当前 userId 对应的验证签名，相当于登录密码。
【推荐取值】具体计算方法请参见 [如何计算UserSig](https://cloud.tencent.com/document/product/647/17275)。
</member>
        <member name="F:TRTCParams.userId">
【字段含义】用户标识（必填），当前用户的 userId，相当于用户名，使用 UTF-8 编码。
【推荐取值】限制长度为32字节，只允许包含大小写英文字母（a-zA-Z）、数字（0-9）及下划线和连词符。
</member>
        <member name="F:TRTCParams.sdkAppId">
【字段含义】应用标识（必填），腾讯视频云基于 sdkAppId 完成计费统计。
【推荐取值】在 [实时音视频控制台](https://console.cloud.tencent.com/rav/) 创建应用后可在帐号信息页面中得到该 ID。
</member>
        <member name="T:TRTCParams">
 5.1 进房相关参数

 只有该参数填写正确，才能顺利调用 enterRoom 进入 roomId 所指定的音视频房间。

</member>
        <member name="T:TRTCWaterMarkSrcType">
4.4 水印图片的源类型

</member>
        <member name="T:TRTCDeviceType">
4.3 设备类型

</member>
        <member name="T:TRTCDeviceState">
4.2 设备操作

</member>
        <member name="T:TRTCLogLevel">
4.1 Log 级别

</member>
        <member name="D:ITRTCDeviceInfo">
 3.4 设备 Item 信息

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="D:ITRTCDeviceCollection">
 3.3 设备列表

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="D:TRTCScreenCaptureSourceType">
 3.2 屏幕分享目标信息

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="D:TRTCAudioFrameFormat">
 3.1 音频帧的格式

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="T:TRTCVideoQosPreference">
 2.4 画质偏好

 指当 TRTC SDK 在遇到弱网络环境时，您期望“保清晰”或“保流畅”，两种模式均会优先保障声音数据的传输。

 - Smooth：弱网下优先流畅性，当用户网络较差的时候画面也会比较模糊。
 - Clear：默认值，弱网下优先清晰度，当用户网络较差的时候会出现卡顿，但画面清晰度不会大幅缩水。

</member>
        <member name="T:TRTCQosControlMode">
 2.3 流控模式

 TRTC SDK 内部需要时刻根据网络情况调整内部的编解码器和网络模块，以便能够对网络的变化做出反应。
 为了支持快速算法升级，SDK 内部设置了两种不同的流控模式：
 - ModeServer：云端控制，默认模式，推荐选择。
 - ModeClient：本地控制，用于 SDK 开发内部调试，客户请勿使用。

 @note 推荐您使用云端控制，这样每当我们升级 Qos 算法时，您无需升级 SDK 即可体验更好的效果。

</member>
        <member name="T:TRTCRoleType">
 2.2 角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）

 在直播场景中，多数用户仅为观众，个别用户是主播，这种角色区分有利于 TRTC 进行更好的定向优化。

 - Anchor：主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。
 - Audience：观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。

</member>
        <member name="T:TRTCAppScene">
 2.1 应用场景

 TRTC 可用于视频会议和在线直播等多种应用场景，针对不同的应用场景，TRTC SDK 的内部会进行不同的优化配置：
 - TRTCAppSceneVideoCall    ：视频通话场景，适合[1对1视频通话]、[300人视频会议]、[在线问诊]、[视频聊天]、[远程面试]等。              
 - TRTCAppSceneLIVE         ：视频互动直播，适合[视频低延时直播]、[十万人互动课堂]、[视频直播 PK]、[视频相亲房]、[互动课堂]、[远程培训]、[超大型会议]等。
 - TRTCAppSceneAudioCall    ：语音通话场景，适合[1对1语音通话]、[300人语音会议]、[语音聊天]、[语音会议]、[在线狼人杀]等。
 - TRTCAppSceneVoiceChatRoom：语音互动直播，适合：[语音低延时直播]、[语音直播连麦]、[语聊房]、[K 歌房]、[FM 电台]等。

</member>
        <member name="D:TRTCVideoBufferType">
 1.9 视频数据包装格式

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="D:TRTCVideoPixelFormat">
 1.8 视频像素格式

 TRTC SDK 提供针对视频的自定义采集和自定义渲染功能，在自定义采集功能中，您可以用下列枚举值描述您采集的视频像素格式。
 在自定义渲染功能中，您可以指定您期望 SDK 回调的视频像素格式。

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="T:TRTCBeautyStyle">
 1.7 美颜（磨皮）算法

 TRTC SDK 内置多种不同的磨皮算法，您可以选择最适合您产品定位的方案。

</member>
        <member name="D:TRTCVideoRotation">
 1.6 视频画面旋转方向

 TRTC SDK 提供了对本地和远程画面的旋转角度设置 API，下列的旋转角度都是指顺时针方向的。

 该定义仅用于兼容原有接口，具体定义参见 TXLiteAVBase.h 文件

</member>
        <member name="T:TRTCVideoFillMode">
 1.5 视频画面填充模式

 如果画面的显示分辨率不等于画面的原始分辨率，就需要您设置画面的填充模式:
 - TRTCVideoFillMode_Fill，图像铺满屏幕，超出显示视窗的视频部分将被裁剪，画面显示可能不完整。
 - TRTCVideoFillMode_Fit，图像长边填满屏幕，短边区域会被填充黑色，但画面的内容肯定是完整的。

</member>
        <member name="F:TRTCVideoFillMode_Fit">
图像长边填满屏幕，短边区域会被填充黑色
</member>
        <member name="F:TRTCVideoFillMode_Fill">
图像铺满屏幕，超出显示视窗的视频部分将被裁剪
</member>
        <member name="T:TRTCQuality">
 1.4 画质级别

 TRTC SDK 对画质定义了六种不同的级别，Excellent 表示最好，Down 表示不可用。

</member>
        <member name="T:TRTCVideoStreamType">
 1.3 视频流类型

 TRTC 内部有三种不同的音视频流，分别为：
 - 主画面：最常用的一条线路，一般用来传输摄像头的视频数据。
 - 小画面：跟主画面的内容相同，但是分辨率和码率更低。
 - 辅流画面：一般用于屏幕分享或远程播片（例如老师播放视频给学生观看）。

 @note - 如果主播的上行网络和性能比较好，则可以同时送出大小两路画面。
 @note - SDK 不支持单独开启小画面，小画面必须依附于主画面而存在。

</member>
        <member name="T:TRTCVideoResolutionMode">
 1.2 视频分辨率模式

 - 横屏分辨率：TRTCVideoResolution_640_360 + TRTCVideoResolutionModeLandscape = 640 × 360
 - 竖屏分辨率：TRTCVideoResolution_640_360 + TRTCVideoResolutionModePortrait  = 360 × 640

</member>
        <member name="T:TRTCVideoResolution">
@defgroup TRTCCloudDef_cplusplus 关键类型定义
腾讯云视频通话功能的关键类型定义
@{
 1.1 视频分辨率

 此处仅定义横屏分辨率，如需使用竖屏分辨率（例如360 × 640），需要同时指定 TRTCVideoResolutionMode 为 Portrait。

</member>
        <member name="T:_EXCEPTION_DISPOSITION">
 Module:   TXLiteAVBase @ liteav

 Function: SDK 公共定义头文件


</member>
        <member name="M:ManageLiteAV.ITRTCLogCallback.onLog(System.String,ManageLiteAV.TRTCLogLevel,System.String)">
            <summary>
14.1 有日志打印时的回调
</summary>
            <param name="log">日志内容</param>
            <param name="level">日志等级 参见 TRTCLogLevel</param>
            <param name="module">暂无具体意义，目前为固定值 TXLiteAVSDK</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCLogCallback">
            <summary>
日志相关回调
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onMixedPlayAudioFrame(ManageLiteAV.TRTCAudioFrame)">
            <summary>
13.3 各路音频数据混合后送入喇叭播放的音频数据
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据支持修改。</para><para>- 此接口回调出的音频时间帧长固定为0.02s。</para><para>  由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。</para><para>  以SDK默认的音频播放格式48000采样率、双声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 2 × 16bit = 30720bit = 3840字节】。</para><para>- 此接口回调出的音频数据是各路音频播放数据的混合,不包含耳返的音频数据。</para></remarks>
            <param name="frame">音频数据</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onPlayAudioFrame(ManageLiteAV.TRTCAudioFrame,System.String)">
            <summary>
13.2 混音前的每一路远程用户的音频数据（例如您要对某一路的语音进行文字转换，必须要使用这里的原始数据，而不是混音之后的数据）
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据是只读的，不支持修改。</para></remarks>
            <param name="frame">音频数据</param>
            <param name="userId">用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onCapturedAudioFrame(ManageLiteAV.TRTCAudioFrame)">
            <summary>
13.1 本地麦克风采集到的音频数据回调
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据支持修改。</para><para>- 此接口回调出的音频时间帧长固定为0.02s。</para><para>  由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。</para><para>  以SDK默认的音频录制格式48000采样率、单声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。</para><para>- 此接口回调出的音频数据包含背景音、音效、混响等前处理效果。</para></remarks>
            <param name="frame">音频数据</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCAudioFrameCallback">
            <summary>
声音数据帧的自定义处理回调（只读）
</summary>
            <remarks>
回调函数是在 SDK 内部线程同步抛出来的，请不要做耗时操作。
<para>提示：请按需定义相关函数实现，减少不必要的性能损耗。</para></remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCVideoRenderCallback.onRenderVideoFrame(System.String,ManageLiteAV.TRTCVideoStreamType,ManageLiteAV.TRTCVideoFrame)">
            <summary>
12.1 自定义视频渲染回调

<para>可以通过 setLocalVideoRenderCallback 和 setRemoteVideoRenderCallback 接口设置自定义渲染回调</para></summary>
            <param name="userId">用户标识</param>
            <param name="streamType">流类型：即摄像头还是屏幕分享</param>
            <param name="frame">视频帧数据</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCVideoRenderCallback">
            <summary>
视频数据帧的自定义处理回调
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMComplete(ManageLiteAV.TXLiteAVError)">
            <summary>
11.3 播放背景音乐结束
</summary>
            <param name="errCode">错误码</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMProgress(System.UInt32,System.UInt32)">
            <summary>
11.2 播放背景音乐的进度
</summary>
            <param name="progressMS">已播放时间</param>
            <param name="durationMS">总时间</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMBegin(ManageLiteAV.TXLiteAVError)">
@}
@name 背景混音事件回调
@{
<summary>
11.1 开始播放背景音乐
</summary><param name="errCode">错误码</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureStoped(System.Int32)">
            <summary>
10.5 当屏幕分享停止时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动停止；1：表示屏幕分享窗口被关闭</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureResumed(System.Int32)">
            <summary>
10.4 当屏幕分享恢复时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动恢复，1：表示屏幕分享参数设置完毕后自动恢复；2：表示屏幕分享窗口从最小化被恢复；3：表示屏幕分享窗口从隐藏被恢复</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCapturePaused(System.Int32)">
            <summary>
10.3 当屏幕分享暂停时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动暂停；1：表示设置屏幕分享参数导致的暂停；2：表示屏幕分享窗口被最小化导致的暂停；3：表示屏幕分享窗口被隐藏导致的暂停</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureStarted">
            <summary>
10.2 当屏幕分享开始时，SDK 会通过此回调通知
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureCovered">
@}
@name 屏幕分享回调
@{
<summary>
10.1 当屏幕分享窗口被遮挡无法正常捕获时，SDK 会通过此回调通知，可在此回调里通知用户移开遮挡窗口
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onAudioEffectFinished(System.Int32,System.Int32)">
@name 音效回调
@{
<summary>
9.1 播放音效结束回调
</summary><param name="effectId">音效 ID</param><param name="code">0表示播放正常结束；其他表示异常结束</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSetMixTranscodingConfig(System.Int32,System.String)">
            <summary>
8.5 设置云端的混流转码参数的回调，对应于 TRTCCloud 中的 setMixTranscodingConfig() 接口

<para>对应于 TRTCCloud 中的 setMixTranscodingConfig() 接口</para></summary>
            <param name="errCode">0表示成功，其余值表示失败</param>
            <param name="errMsg">具体错误原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStopPublishCDNStream(System.Int32,System.String)">
            <summary>
8.4 停止旁路推流到 CDN 完成的回调

<para>对应于 TRTCCloud 中的 stopPublishCDNStream() 接口</para></summary>
            <param name="errCode">错误码，参考 TXLiteAVCode.h</param>
            <param name="errMsg">错误详细信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStartPublishCDNStream(System.Int32,System.String)">
            <summary>
8.3 启动旁路推流到 CDN 完成的回调

<para>对应于 TRTCCloud 的 startPublishCDNStream() 接口</para></summary>
            <remarks>
Start 回调如果成功，只能说明转推请求已经成功告知给腾讯云，如果目标 CDN 有异常，还是有可能会转推失败。
</remarks>
            <param name="errCode">错误码，参考 TXLiteAVCode.h</param>
            <param name="errMsg">错误详细信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStopPublishing(System.Int32,System.String)">
            <summary>
8.2 停止向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 stopPublishing() 接口
</summary>
            <param name="errCode">0表示成功，其余值表示失败</param>
            <param name="errMsg">具体错误原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStartPublishing(System.Int32,System.String)">
@}
@name CDN 旁路转推回调
@{
<summary>
8.1 开始向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 startPublishing() 接口
</summary><param name="errCode">0表示成功，其余值表示失败</param><param name="errMsg">具体错误原因</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRecvSEIMsg(System.String,System.Byte[],System.UInt32)">
            <summary>
7.3 收到 SEI 消息的回调

<para>当房间中的某个用户使用 sendSEIMsg 发送数据时，房间中的其它用户可以通过 onRecvSEIMsg 接口接收数据。</para></summary>
            <param name="userId">用户标识</param>
            <param name="message">数据</param>
            <param name="msgSize">数据大小</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onMissCustomCmdMsg(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
7.2 自定义消息丢失回调

<para>TRTC 所使用的传输通道为 UDP 通道，所以即使设置了 reliable，也做不到100%不丢失，只是丢消息概率极低，能满足常规可靠性要求。</para><para>在过去的一段时间内（通常为5s），自定义消息在传输途中丢失的消息数量的统计，SDK 都会通过此回调通知出来。</para></summary>
            <remarks>
只有在发送端设置了可靠传输(reliable)，接收方才能收到消息的丢失回调
</remarks>
            <param name="userId">用户标识</param>
            <param name="cmdId">命令 ID</param>
            <param name="errCode">错误码，当前版本为-1</param>
            <param name="missed">丢失的消息数量</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRecvCustomCmdMsg(System.String,System.Int32,System.UInt32,System.Byte[],System.UInt32)">
@}
@name 自定义消息的接收回调
@{
<summary>
7.1 收到自定义消息回调

<para>当房间中的某个用户使用 sendCustomCmdMsg 发送自定义消息时，房间中的其它用户可以通过 onRecvCustomCmdMsg 接口接收消息</para></summary><param name="userId">用户标识</param><param name="cmdID">命令 ID</param><param name="seq">消息序号</param><param name="msg">消息数据</param><param name="msgSize">消息数据大小</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTestSpeakerVolume(System.UInt32)">
            <summary>
6.6 扬声器测试音量回调

<para>扬声器测试接口 startSpeakerDeviceTest 会触发这个回调</para></summary>
            <param name="volume">音量值，取值范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTestMicVolume(System.UInt32)">
            <summary>
6.5 麦克风测试音量回调

<para>麦克风测试接口 startMicDeviceTest 会触发这个回调</para></summary>
            <param name="volume">音量值，取值范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onDeviceChange(System.String,ManageLiteAV.TRTCDeviceType,ManageLiteAV.TRTCDeviceState)">
            <summary> 
6.4 本地设备通断回调
</summary>
            <param name="deviceId">设备 ID</param>
            <param name="type">设备类型</param>
            <param name="state">事件类型</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserVoiceVolume(ManageLiteAV.TRTCVolumeInfo[],System.UInt32,System.UInt32)">
            <summary>
6.3 用于提示音量大小的回调,包括每个 userId 的音量和远端总音量

<para>您可以通过调用 TRTCCloud 中的 enableAudioVolumeEvaluation 接口来开关这个回调。</para><para>需要注意的是，调用 enableAudioVolumeEvaluation 开启音量回调后，无论频道内是否有人说话，都会按设置的时间间隔调用这个回调;</para><para>如果没有人说话，则 userVolumes 为空，totalVolume 为0。</para></summary>
            <remarks>
userId 为 null 时表示自己的音量，userVolumes 内仅包含正在说话（音量不为0）的用户音量信息。
</remarks>
            <param name="userVolumes">所有正在说话的房间成员的音量，取值范围0 - 100。</param>
            <param name="userVolumesCount">房间成员数量</param>
            <param name="totalVolume">所有远端成员的总音量, 取值范围0 - 100。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onMicDidReady">
            <summary>
6.2 麦克风准备就绪
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onCameraDidReady">
@}
@name 硬件设备事件回调
@{
<summary>
6.1 摄像头准备就绪
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSpeedTest(ManageLiteAV.TRTCSpeedTestResult,System.UInt32,System.UInt32)">
            <summary>
5.4 服务器测速的回调，SDK 对多个服务器 IP 做测速，每个 IP 的测速结果通过这个回调通知
</summary>
            <param name="currentResult">当前完成的测速结果</param>
            <param name="finishedCount">已完成测速的服务器数量</param>
            <param name="totalCount">需要测速的服务器总数量</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectionRecovery">
            <summary>
5.3 SDK 跟服务器的连接恢复
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTryToReconnect">
            <summary>
5.2 SDK 尝试重新连接到服务器
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectionLost">
@}
@name 服务器事件回调
@{
<summary>
5.1 SDK 跟服务器的连接断开
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStatistics(ManageLiteAV.TRTCStatistics)">
            <summary>
4.2 技术指标统计回调

<para>如果您是熟悉音视频领域相关术语，可以通过这个回调获取 SDK 的所有技术指标。</para><para>如果您是首次开发音视频相关项目，可以只关注 onNetworkQuality 回调。</para></summary>
            <remarks>
每2秒回调一次
</remarks>
            <param name="statis">统计数据，包括本地和远程的</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onNetworkQuality(ManageLiteAV.TRTCQualityInfo,ManageLiteAV.TRTCQualityInfo[],System.UInt32)">
@}
@name 统计和质量回调
@{
<summary>
4.1 网络质量：该回调每2秒触发一次，统计当前网络的上行和下行质量
</summary><remarks>
userId == null 代表自己当前的视频质量
</remarks><param name="localQuality">上行网络质量</param><param name="remoteQuality">下行网络质量的数组</param><param name="remoteQualityCount">下行网络质量的数组大小</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserExit(System.String,System.Int32)">
            <summary>
3.2 有用户（主播）离开当前房间

<para>该回调接口可以被看作是 onRemoteUserLeaveRoom 的废弃版本，不推荐使用。请使用 onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。</para></summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="userId">用户标识</param>
            <param name="reason">离开原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserEnter(System.String)">
            <summary>
3.10 废弃接口：有主播加入当前房间

<para>该回调接口可以被看作是 onRemoteUserEnterRoom 的废弃版本，不推荐使用。请使用 onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。</para></summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="userId">用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSendFirstLocalAudioFrame">
            <summary>
3.9 首帧本地音频数据已经被送出

<para>SDK 会在 enterRoom() 并 startLocalAudio() 成功后开始麦克风采集，并将采集到的声音进行编码。</para><para>当 SDK 成功向云端送出第一帧音频数据后，会抛出这个回调事件。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSendFirstLocalVideoFrame(ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.8 首帧本地视频数据已经被送出

<para>SDK 会在 enterRoom() 并 startLocalPreview() 成功后开始摄像头采集，并将采集到的画面进行编码。</para><para>当 SDK 成功向云端送出第一帧视频数据后，会抛出这个回调事件。</para></summary>
            <param name="streamType">视频流类型，大画面还是小画面或辅流画面（屏幕分享）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onFirstAudioFrame(System.String)">
            <summary>
3.7 开始播放远程用户的首帧音频（本地声音暂不通知）
</summary>
            <param name="userId">远程用户 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onFirstVideoFrame(System.String,ManageLiteAV.TRTCVideoStreamType,System.Int32,System.Int32)">
            <summary>
3.6 开始渲染本地或远程用户的首帧画面

<para>如果 userId 为 null，代表开始渲染本地采集的摄像头画面，需要您先调用 startLocalPreview 触发。</para><para>如果 userId 不为 null，代表开始渲染远程用户的首帧画面，需要您先调用 startRemoteView 触发。</para></summary>
            <remarks>
只有当您调用 startLocalPreview()、startRemoteView() 或 startRemoteSubStreamView() 之后，才会触发该回调。
</remarks>
            <param name="userId">本地或远程用户 ID，如果 userId == null 代表本地，userId != null 代表远程。</param>
            <param name="streamType">视频流类型：摄像头或屏幕分享。</param>
            <param name="width">画面宽度</param>
            <param name="height">画面高度</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserAudioAvailable(System.String,System.Boolean)">
            <summary>
3.5 用户是否开启音频上行
</summary>
            <param name="userId">用户标识</param>
            <param name="available">声音是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserSubStreamAvailable(System.String,System.Boolean)">
            <summary>
3.4 用户是否开启屏幕分享
</summary>
            <remarks>
显示辅路画面使用的函数是 startRemoteSubStreamView() 而非 startRemoteView()。
</remarks>
            <param name="userId">用户标识</param>
            <param name="available">屏幕分享是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserVideoAvailable(System.String,System.Boolean)">
            <summary>
3.3 用户是否开启摄像头视频

<para>当您收到 onUserVideoAvailable(userId, YES) 通知时，代表该路画面已经有可用的视频数据帧到达。</para><para>之后，您需要调用 startRemoteView(userId) 接口加载该用户的远程画面。</para><para>再之后，您还会收到名为 onFirstVideoFrame(userId) 的首帧画面渲染回调。</para><para>
当您收到了 onUserVideoAvailable(userId, NO) 通知时，代表该路远程画面已经被关闭，这可能是
由于该用户调用了 muteLocalVideo() 或 stopLocalPreview() 所致。
</para></summary>
            <param name="userId">用户标识</param>
            <param name="available">画面是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRemoteUserLeaveRoom(System.String,System.Int32)">
            <summary>
3.2 有用户离开当前房间，与 onuserEnterRoom 相对应

<para>与 onRemoteUserEnterRoom 相对应，在两种不同的应用场景下，该通知的行为会有差别：</para><para>- 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户的离开都会触发该通知。</para><para>- 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：只有主播离开房间时才会触发该通知，观众离开房间不会触发该通知。</para></summary>
            <param name="userId">用户标识</param>
            <param name="reason">离开原因，0表示用户主动退出房间，1表示用户超时退出，2表示被踢出房间。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRemoteUserEnterRoom(System.String)">
@}
@name 成员事件回调
@{
<summary>
3.1 有用户加入当前房间

<para>出于性能方面的考虑，在两种不同的应用场景下，该通知的行为会有差别：</para><para>- 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户进入房间都会触发该通知。</para><para>- 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：该场景不限制观众的数量，如果任何用户进出都抛出回调会引起很大的性能损耗，所以该场景下只有主播进入房间时才会触发该通知，观众进入房间不会触发该通知。</para></summary><remarks>
注意 onRemoteUserEnterRoom 和 onRemoteUserLeaveRoom 只适用于维护当前房间里的“成员列表”，如果需要显示远程画面，建议使用监听 onUserVideoAvailable() 事件回调。
</remarks><param name="userId">用户标识</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onDisconnectOtherRoom(ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.5 结束跨房通话（主播 PK）的结果回调
</summary>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectOtherRoom(System.String,ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.4 请求跨房通话（主播 PK）的结果回调

<para>调用 TRTCCloud 中的 connectOtherRoom() 接口会将两个不同房间中的主播拉通视频通话，也就是所谓的“主播PK”功能。</para><para>
调用者会收到 onConnectOtherRoom() 回调来获知跨房通话是否成功，
如果成功，两个房间中的所有用户都会收到 PK 主播的 onUserVideoAvailable() 回调。
</para></summary>
            <param name="userId">要 PK 的目标主播 userId。</param>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSwitchRole(ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.3 切换角色结果回调
<para>
调用 TRTCCloud 中的 switchRole() 接口会切换主播和观众的角色，该操作会伴随一个线路切换的过程，
待 SDK 切换完成后，会抛出 onSwitchRole() 事件回调。
</para></summary>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onExitRoom(System.Int32)">
            <summary>
2.2 离开房间的事件回调
<para>
调用 TRTCCloud 中的 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。
待资源释放完毕之后，SDK 会通过 onExitRoom() 回调通知到您。
</para><para>
如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来之后再执行相关操作。
否则可能会遇到如摄像头、麦克风设备被强占等各种异常问题。
</para></summary>
            <param name="reason">离开房间原因，0：主动调用 exitRoom 退房；1：被服务器踢出当前房间；2：当前房间整个被解散。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onEnterRoom(System.Int32)">
@}
@name 房间事件回调
@{
<summary>
2.1 已加入房间的回调

<para>调用 TRTCCloud 中的 enterRoom() 接口执行进房操作后，会收到来自 SDK 的 onEnterRoom(result) 回调：</para><para>- 如果加入成功，result 会是一个正数（result &gt; 0），代表加入房间的时间消耗，单位是毫秒（ms）。</para><para>- 如果加入失败，result 会是一个负数（result &lt; 0），代表进房失败的错误码。</para><para>进房失败的错误码含义请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</para></summary><remarks>
在 Ver6.6 之前的版本，只有进房成功会抛出 onEnterRoom(result) 回调，进房失败由 onError() 回调抛出。
<para>在 Ver6.6 及之后改为：进房成功返回正的 result，进房失败返回负的 result，同时进房失败也会有 onError() 回调抛出。</para></remarks><param name="result">result &gt; 0 时为进房耗时（ms），result &lt; 0 时为进房错误码。</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onWarning(ManageLiteAV.TXLiteAVWarning,System.String,System.IntPtr)">
            <summary>
1.2 警告回调：用于告知您一些非严重性问题，例如出现了卡顿或者可恢复的解码失败。
</summary>
            <param name="warningCode">错误码</param>
            <param name="warningMsg">警告信息</param>
            <param name="arg">扩展信息字段，个别警告码可能会带额外的信息帮助定位问题</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onError(ManageLiteAV.TXLiteAVError,System.String,System.IntPtr)">
@name 错误事件和警告事件
@{
<summary>
1.1 错误回调，SDK 不可恢复的错误，一定要监听，并分情况给用户适当的界面提示。
</summary><param name="errCode">错误码</param><param name="errMsg">错误信息</param><param name="arg"> 扩展信息字段，个别错误码可能会带额外的信息帮助定位问题</param></member>
        <member name="T:ManageLiteAV.ITRTCCloudCallback">
@defgroup ITRTCCloudCallback_csharp ITRTCCloudCallback
腾讯云视频通话功能的回调接口类
@{
<summary>
腾讯云视频通话功能的回调接口类
</summary></member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_REQUEST_AVSEAT_SUCC">
            <summary>
请求视频位成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_CONNECT_SUCC">
            <summary>
连接接口机服务器成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_REQUEST_IP_SUCC">
            <summary>
拉取接口机服务器地址成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_AUDIO_STATE">
            <summary>
音频状态位变化通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_VIDEO_STATE">
            <summary>
视频状态位变化通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_EXIT">
            <summary>
退房通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_ENTER">
            <summary>
进房通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_NEED_REENTER">
            <summary>
WiFi 切换到4G 会触发断线重连，此时需要重新进入房间（拉取最优的服务器地址）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USERLIST">
            <summary>
下发房间成员列表（不包括自己）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_EXIT">
            <summary>
退出房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_ENTER">
            <summary>
进入房间成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_MIC_RELEASE_SUCC">
            <summary>
释放麦克风占用
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_GET_METADATA">
            <summary>
视频流MetaData事件
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_MIC_START_SUCC">
            <summary>
麦克风启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_FIRST_PLAY">
            <summary>
音频首次播放（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_PLAYING">
            <summary>
音频正在播放（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_LOADING">
            <summary>
音频正在加载（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_FIRST_LOADING">
            <summary>
音频首次加载（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SW_DECODER_START_SUCC">
            <summary>
软解码器启动成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_HW_DECODER_START_SUCC">
            <summary>
硬解码器启动成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_DECODER_CACHE_TOO_MANY_FRAMES">
            <summary>
视频解码器缓存帧数过多，超过40帧（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_SEEK_COMPLETE">
            <summary>
点播，视频播放 Seek 完成（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_DNS_RESOLVED">
            <summary>
点播，DNS 解析完成（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_FIRST_VIDEO_PACKET">
            <summary>
点播，收到首帧数据（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_TCP_CONNECT_SUCC">
            <summary>
点播，TCP 连接成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_SWITCH_SUCC">
            <summary>
直播，切流成功（切流可以播放不同画面大小的视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_LOADING_END">
            <summary>
点播，loading 结束
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_PREPARED">
            <summary>
点播，视频加载完毕
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_GET_MESSAGE">
            <summary>
消息事件
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_CHANGE_ROTATION">
            <summary>
视频旋转角度发生改变
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_GET_VODFILE_MEDIAINFO_SUCC">
            <summary>
点播，获取点播文件信息成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_DOWN_CHANGE_RESOLUTION">
            <summary>
下行视频分辨率改变
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_START_VIDEO_DECODER">
            <summary>
解码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_LOADING">
            <summary>
视频播放 loading
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_END">
            <summary>
视频播放结束
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_PROGRESS">
            <summary>
视频播放进度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_BEGIN">
            <summary>
视频播放开始
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RENDER_FIRST_I_FRAME">
            <summary>
渲染首个视频数据包（IDR）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_BEGIN">
            <summary>
直播，已经与 RTMP 服务器握手完毕，开始拉流
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_CONNECT_SUCC">
            <summary>
直播，已经连接 RTMP 拉流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_LOCAL_RECORD_PROGRESS">
            <summary>
本地录制状态通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_LOCAL_RECORD_RESULT">
            <summary>
本地录制结果
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SW_ENCODER_START_SUCC">
            <summary>
软编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_HW_ENCODER_START_SUCC">
            <summary>
硬编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_PUBLISH_START">
            <summary>
直播，与 RTMP 服务器连接后，收到 NetStream.Publish.Start 消息，表明流发布成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_CLOSE">
            <summary>
关闭摄像头完成（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_AVAILABLE">
            <summary>
摄像头设备重新可用（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_REMOVED">
            <summary>
摄像头设备已被移出（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SNAPSHOT_COMPLETE">
            <summary>
一帧截图完成
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_START_VIDEO_ENCODER">
            <summary>
编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_FIRST_FRAME_AVAILABLE">
            <summary>
首帧画面采集完成
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_UP_CHANGE_BITRATE">
            <summary>
码率动态调整
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_UP_CHANGE_RESOLUTION">
            <summary>
上行动态调整分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SCREEN_CAPTURE_SUCC">
            <summary>
录屏启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_START_SUCC">
            <summary>
打开摄像头成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_BEGIN">
            <summary>
直播，已经与 RTMP 服务器握手完毕，开始推流
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_CONNECT_SUCC">
            <summary>
直播，已经连接 RTMP 推流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_AUDIO_RECORDING_WRITE_FAIL">
            <summary>
音频录制写入文件失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_IGNORE_UPSTREAM_FOR_AUDIENCE">
            <summary>
当前是观众角色，忽略上行音视频数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_RECONNECT">
            <summary>
网络断连，已启动自动重连
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_DISCONNECT">
            <summary>
网络断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_NO_STEAM_SOURCE_FAIL">
            <summary>
直播，连接失败，该流地址无视频（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_PLAY_LIVE_STREAM_INFO_CONNECT_FAIL">
            <summary>
直播，connect 服务器调用失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_NO_DATA">
            <summary>
直播，超过30s 没有数据发送，主动断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_READ_FAIL">
            <summary>
直播，RTMP 读失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_WRITE_FAIL">
            <summary>
直播，RTMP 写失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_READ_WRITE_FAIL">
            <summary>
直播，RTMP 读/写失败，将会断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SERVER_BREAK_CONNECT">
            <summary>
直播，服务器主动断开
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SHAKE_FAIL">
            <summary>
直播，与 RTMP 服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SEVER_CONN_FAIL">
            <summary>
直播，服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_DNS_FAIL">
            <summary>
直播，DNS 解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_RENDER_FAIL">
            <summary>
视频渲染失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SW_DECODER_START_FAIL">
            <summary>
软解码器启动失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_DECODER_HW_TO_SW">
            <summary>
当前流硬解第一个 I 帧失败，SDK 自动切软解
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_HW_DECODER_START_FAIL">
            <summary>
硬解启动失败，采用软解码
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_PLAY_LAG">
            <summary>
当前视频播放出现卡顿（用户直观感受）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RECV_DATA_LAG">
            <summary>
网络来包不稳：可能是下行带宽不足，或由于主播端出流不均匀
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_LIVE_STREAM_SERVER_RECONNECT">
            <summary>
直播，网络断连, 已启动自动重连（自动重连连续失败超过三次会放弃）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_AUDIO_FRAME_DECODE_FAIL">
            <summary>
当前音频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_FRAME_DECODE_FAIL">
            <summary>
当前视频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_REDUCE_CAPTURE_RESOLUTION">
            <summary>
摄像头采集分辨率被降低，以满足当前帧率和性能最优解。
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SW_ENCODER_START_FAIL">
            <summary>
软编码启动失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_INSUFFICIENT_CAPTURE_FPS">
            <summary>
摄像头采集帧率不足，部分自带美颜算法的 Android 手机上会出现
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_ENCODER_SW_TO_HW">
            <summary>
视频编码器从软编码自动切换到硬编码，一般是由于 CPU 使用率过高触发的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_HW_ENCODER_START_FAIL">
            <summary>
硬编码启动失败，采用软编码
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SERVER_RECONNECT">
            <summary>
直播，网络断连, 已启动自动重连（自动重连连续失败超过三次会放弃）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_INTERNAL_ERROR">
            <summary>
服务器内部错误，请重试
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_ACCOUNT_EXCEED_PURCHASES">
            <summary>
创建账号数量超过已购买预付费数量限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_TICKET_EXPIRED">
            <summary>
票据因过期原因校验失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_TICKET_VERIFICATION_FAILED">
            <summary>
票据校验失败，请检查各项参数是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_ERROR">
            <summary>
sdkAppId 填写错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_INVALID_LOGIN_STATUS">
            <summary>
登录状态无效，请使用 usersig 重新鉴权
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_LIMITED_BY_SECURITY">
            <summary>
安全原因被限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_INVALID">
            <summary>
usersig 已经失效，请重新生成，再次尝试
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_ACCOUNT_IN_BLACKLIST">
            <summary>
帐号已被拉入黑名单，请联系 TLS 帐号支持 QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_NOT_FOUND">
            <summary>
sdkAppId 未找到，请确认是否已经在腾讯云上配置
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_VERIFICATION_FAILED">
            <summary>
内部第三方票据验证超时，请重试，如多次重试不成功，请@TLS 帐号支持，QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_VERIFICATION_EXPIRED">
            <summary>
内部第三方票据验证超时，请重试，如多次重试不成功，请@TLS 帐号支持，QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_NOT_MATCH">
            <summary>
sig 中 sdkAppId 与请求时的 sdkAppId 不匹配，请检查登录时填写的 sdkAppId 与 sig 中的是否一致
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_ID_NOT_MATCH">
            <summary>
sig 中 identifier 与请求时的 identifier 不匹配，请检查登录时填写的 identifier 与 sig 中的是否一致
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_8">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_7">
            <summary>
用业务公钥验证 sig 失败，请确认生成的 usersig 使用的私钥和 sdkAppId 是否对应
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_6">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_5">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_4">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_3">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_2">
            <summary>
sig 校验失败，请确认下 sig 内容是否被截断，如缓冲区长度不够导致的内容截断
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_1">
            <summary>
sig 校验失败，请确认下 sig 内容是否被截断，如缓冲区长度不够导致的内容截断
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_EXPIRED">
            <summary>
sig 过期，请尝试重新生成。如果是刚生成，就过期，请检查有效期填写的是否过小，或者填的 0
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_PB_SERIALIZE">
            <summary>
Protobuf 序列化错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_RECORDID_STORE">
            <summary>
无法保存用户自定义 recordId
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_REACH_PROXY_MAX">
            <summary>
代理机超出限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROLE">
            <summary>
未定义角色
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_UNKNOWN_SUB_CMD">
            <summary>
未定义命令字
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_DECODE_JSON_FAIL">
            <summary>
JSON 串解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_FULL">
            <summary>
房间满员
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_INVALID_SEQ">
            <summary>
连麦请求序号错乱
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_FULL">
            <summary>
被连麦用户达到资源上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_DELETED">
            <summary>
被连麦用户已被删除
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_NOT_EXIST">
            <summary>
被连麦用户不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_REACH_MAX_ROOM">
            <summary>
被连麦房间达到连麦上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_ROOM_NOT_EXIST">
            <summary>
被连麦房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CANCEL_FAILED">
            <summary>
取消跨房间连麦失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_FAILED">
            <summary>
跨房间连麦失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_USER_NOT_CONNED">
            <summary>
本用户未发起连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NOT_CONNED">
            <summary>
本房间无连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_SIG_GROUPID">
            <summary>
跨房间连麦签名不匹配
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_INVALID_SIG_TIME">
            <summary>
跨房间连麦签名时间戳错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_PARSE_SIG">
            <summary>
跨房间连麦签名解析错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NO_KEY">
            <summary>
未找到跨房间连麦签名解密密钥
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_DECRYPT_SIG">
            <summary>
跨房间连麦签名解密失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NO_SIG">
            <summary>
跨房间连麦无签名
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REQ">
            <summary>
跨房间连麦请求格式错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REQ_TIMEOUT">
            <summary>
跨房间连麦请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REACH_MAX_RETRY_TIMES">
            <summary>
跨房间连麦重试次数耗尽
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REACH_MAX_NUM">
            <summary>
达到跨房间连麦上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NOT_SUPPORT">
            <summary>
不支持跨房间连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_ID_TOO_LONG">
            <summary>
房间号超过限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROOM_ID">
            <summary>
房间号非法
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_RPS_INVALID_PARAMETER">
            <summary>
请求 I 帧参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_ROOM_TOO_BIG">
            <summary>
请求 I 帧房间用户太多
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_DEST_USER_NOT_EXIST">
            <summary>
请求 I 帧目标用户不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_INVALID_PACKET">
            <summary>
请求 I 帧包格式错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_UNKNOW_TYPE">
            <summary>
请求 I 帧未知 opType
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_PARAMETER">
            <summary>
参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_REQUEST_VIDEO">
            <summary>
没有权限请求视频
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_USER_WAS_DELETED">
            <summary>
用户被删除状态
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NOT_PUSH_SUB_VIDEO">
            <summary>
当前用户没有上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ANOTHER_USER_PUSH_SUB_VIDEO">
            <summary>
其他用户正在上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_PUSH_SUB_VIDEO">
            <summary>
没有权限上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROUTE_TABLE_ERROR">
            <summary>
没有空闲路由表
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_PUSH_VIDEO">
            <summary>
没有权限上视频
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_PARAMETER_SUB_VIDEO">
            <summary>
辅路抢视频位、申请辅路请求类型参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_ENTER_ROOM">
            <summary>
没有权限进入房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_CREATE_ROOM">
            <summary>
没有权限创建房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_LOCATION_NOT_EXIST">
            <summary>
locationid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SWITCH_TERMINATION_FREQUENTLY">
            <summary>
频繁切换终端
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_FIND_USER_FAILED">
            <summary>
查找用户失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ADD_USER_FAILED">
            <summary>
房间添加用户失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_NOT_EXIST">
            <summary>
房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SIGN_TIMEOUT">
            <summary>
签名过期
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SIGN_ERROR">
            <summary>
签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CREATE_ROOM_FAILED">
            <summary>
创建房间失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROOMID">
            <summary>
无效的房间 Id
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SYSTEM_ERROR">
            <summary>
后台错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_LOCATIONID">
            <summary>
后台用户位置标识 locationid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_ROOMID">
            <summary>
后台房间标识 roomid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_ROOM_NOT_EXIST">
            <summary>
房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_SIGN_TIMEOUT">
            <summary>
签名超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_SIGN_ERROR">
            <summary>
签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_TOKEN_TIMEOUT">
            <summary>
token 超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ECDH_GET_TINYID">
            <summary>
userSig 校验失败，请检查 TRTCParams.userSig 是否填写正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ECDH_GET_KEY">
            <summary>
生成公钥失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_INVALID">
            <summary>
无效请求, 分配接口机失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_LACK_SDKAPPID">
            <summary>
非法SDKAppid
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_STRGROUP_HAS_INVALID_CHARS">
            <summary>
房间号非法
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_SERVICE_SUSPENDED">
            <summary>
服务不可用。请检查：套餐包剩余分钟数是否大于0，腾讯云账号是否欠费
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ROOMID_EXCHANGE_FAILED">
            <summary>
房间号转换出错
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_BAD_SCENE_OR_ROLE">
            <summary>
场景或角色错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_BAD_ROOMID">
            <summary>
房间号错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_DATABASE">
            <summary>
数据库查询失败（房间相关存储信息）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_TOKEN_ERROR">
            <summary>
HTTPS 请求时，生成 token 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_KEN_ERROR">
            <summary>
HTTPS 请求时，生成加密 key 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_PRIVILEGE_FLAG_ERROR">
            <summary>
权限位校验失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_INVALID_COMMAND">
            <summary>
无效的命令字
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_TOKEN_TIMEOUT">
            <summary>
HTTPS token 超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_SIGN_FAILED">
            <summary>
生成签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ALLOCATE_ACCESS_FAILED">
            <summary>
分配接口机错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_TOKEN_ERROR">
            <summary>
TOKEN 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_UNPACKING_ERROR">
            <summary>
请求解包错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STOP_PUBLISHING_ERROR">
            <summary>
停止向腾讯云的直播 CDN 推流信令异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STOP_PUBLISHING_TIMEOUT">
            <summary>
停止向腾讯云的直播 CDN 推流信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_START_PUBLISHING_ERROR">
            <summary>
开始向腾讯云的直播 CDN 推流信令异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_START_PUBLISHING_TIMEOUT">
            <summary>
开始向腾讯云的直播 CDN 推流信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_SEND_JSON_CMD_TIMEOUT">
            <summary>
请求发送 Json 信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ACCIP_LIST_EMPTY">
            <summary>
请求接口机 IP 返回的列表为空的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CONNECT_OTHER_ROOM_AS_AUDIENCE">
            <summary>
当前是观众角色，不能请求或断开跨房连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_AES_TOKEN_RETURN_ERROR">
            <summary>
请求 AES TOKEN 时，server 返回的内容是空的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CONN_ROOM_INVALID_PARAM">
            <summary>
无效参数
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_DISCONN_ROOM_TIMEOUT">
            <summary>
请求退出连麦超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CONN_ROOM_TIMEOUT">
            <summary>
请求连麦超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_QUIT_ROOM_TIMEOUT">
            <summary>
请求退房超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CLOUD_MIX_TRANSCODING_SERVER_FAILED">
            <summary>
云端混流回包异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PUBLISH_CDN_STREAM_SERVER_FAILED">
            <summary>
旁路转推回包异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CLOUD_MIX_TRANSCODING_REQUEST_TIME_OUT">
            <summary>
云端混流请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PUBLISH_CDN_STREAM_REQUEST_TIME_OUT">
            <summary>
旁路转推请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_USER_SIG_INVALID">
            <summary>
进房参数 userSig 不正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_USER_ID_INVALID">
            <summary>
进房参数 userID 不正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_ID_INVALID">
            <summary>
进房参数 roomId 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SDK_APPID_INVALID">
            <summary>
进房参数 sdkAppId 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ENTER_ROOM_PARAM_NULL">
            <summary>
进房参数为空
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_TOKEN_INVALID_PARAMETER">
            <summary>
请求 token 无效参数
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_SET_RECEIVE_TIMEOUT">
            <summary>
请求接收视频项超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CLOSE_VIDEO_TIMEOUT">
            <summary>
请求关闭视频超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STATUS_REPORT_TIMEOUT">
            <summary>
请求状态上报超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CHANGE_ABILITY_TIMEOUT">
            <summary>
请求修改视频能力项超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_VIDEO_DATA_ROOM_TIMEOUT">
            <summary>
请求视频数据超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_VIDEO_FLAG_TIMEOUT">
            <summary>
请求视频位超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_ENTER_ROOM_TIMEOUT">
            <summary>
请求进房超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_IP_TIMEOUT">
            <summary>
请求 IP 和 sig 超时，请检查网络是否正常，或网络防火墙是否放行 UDP 访问下列 IP 和域名 query.tencent-cloud.com:8000 162.14.23.140:8000 162.14.7.49:8000
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_TOKEN_HTTPS_TIMEOUT">
            <summary>
请求 token HTTPS 超时，请检查网络是否正常，或网络防火墙是否放行 HTTPS 访问 official.opensso.tencent-cloud.com:443
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_AVSEAT_FAIL">
            <summary>
请求视频位失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_CONNECT_FAIL">
            <summary>
连接接口机服务器失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_IP_FAIL">
            <summary>
拉取接口机服务器地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_HEARTBEAT_FAIL">
            <summary>
心跳失败，客户端定时向服务器发送数据包，告诉服务器自己活着，这个错误通常是发包超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_ENTER_FAIL">
            <summary>
进入房间失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_ACC_FETCH_STREAM_FAIL">
            <summary>
直播，RTMPACC 低延时拉流失败，且经过多次重试无法恢复
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_SERVER_REFUSE">
            <summary>
直播，服务器拒绝连接请求
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_SWITCH_FAIL">
            <summary>
直播，切流失败（切流可以播放不同画面大小的视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_GET_VODFILE_MEDIAINFO_FAIL">
            <summary>
点播，获取点播文件信息失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_VOD_DECRYPT_FAIL">
            <summary>
点播，音视频流解密失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_HEVC_DECODE_FAIL">
            <summary>
H265 解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_FILE_NOT_FOUND">
            <summary>
播放的文件不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_GET_RTMP_ACC_URL_FAIL">
            <summary>
直播，获取加速拉流的地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_NET_DISCONNECT">
            <summary>
直播，网络断连，且经多次重连抢救无效，可以放弃治疗，更多重试请自行重启播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_BUFFER_TYPE_UNSUPPORTED">
            <summary>
设置的 buffer type 不支持
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PIXEL_FORMAT_UNSUPPORTED">
            <summary>
设置的 pixel format 不支持
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_SERVER_REFUSE">
            <summary>
直播，服务器拒绝连接请求，可能是该推流地址已经被占用，或者 TXSecret 校验失败，或者是过期了，或者是欠费了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NO_NETWORK">
            <summary>
直播，网络不可用，请确认 Wi-Fi、移动数据或者有线网络是否正常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NET_ALLADDRESS_FAIL">
            <summary>
直播，连接推流服务器失败（若支持智能选路，IP 全部失败）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_INVALID_ADDRESS">
            <summary>
直播，推流地址非法，例如不是 RTMP 协议的地址
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SCREEN_CAPTURE_UNSURPORT">
            <summary>
录屏失败，在 Android 平台，需要5.0以上的系统
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SCREEN_CAPTURE_START_FAIL">
            <summary>
开始录屏失败，如果在移动设备出现，可能是权限被用户拒绝了，如果在 Windows 或 Mac 系统的设备出现，请检查录屏接口的参数是否符合要求
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NET_DISCONNECT">
            <summary>
直播，推流出现网络断开，且经过多次重试无法恢复
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_UNSUPPORTED_SAMPLERATE">
            <summary>
不支持的音频采样率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_UNSUPPORTED_RESOLUTION">
            <summary>
不支持的视频分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_AUDIO_ENCODE_FAIL">
            <summary>
音频帧编码失败，例如传入自定义音频数据，SDK 无法处理
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_VIDEO_ENCODE_FAIL">
            <summary>
视频帧编码失败，例如 iOS 设备切换到其他应用时，硬编码器可能被系统释放，再切换回来时，硬编码器重启前，可能会抛出
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_STOP_FAIL">
            <summary>
停止扬声器失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_SET_PARAM_FAIL">
            <summary>
扬声器设置参数失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_START_FAIL">
            <summary>
打开扬声器失败，例如在 Windows 或 Mac 设备，扬声器的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_STOP_FAIL">
            <summary>
停止麦克风失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_OCCUPY">
            <summary>
麦克风正在被占用中，例如移动设备正在通话时，打开麦克风会失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_SET_PARAM_FAIL">
            <summary>
麦克风设置参数失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_NOT_AUTHORIZED">
            <summary>
麦克风设备未授权，通常在移动设备出现，可能是权限被用户拒绝了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_START_FAIL">
            <summary>
打开麦克风失败，例如在 Windows 或 Mac 设备，麦克风的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_OCCUPY">
            <summary>
摄像头正在被占用中，可尝试打开其他摄像头
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_SET_PARAM_FAIL">
            <summary>
摄像头参数设置出错（参数不支持或其它）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_NOT_AUTHORIZED">
            <summary>
摄像头设备未授权，通常在移动设备出现，可能是权限被用户拒绝了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_START_FAIL">
            <summary>
打开摄像头失败，例如在 Windows 或 Mac 设备，摄像头的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_NULL">
            <summary>
无错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.remoteStatisticsArraySize">
            <summary>
数组 remoteStatisticsArray 的大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.remoteStatisticsArray">
            <summary>
远端成员的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.localStatisticsArraySize">
            <summary>
数组 localStatisticsArray 的大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.localStatisticsArray">
            <summary>
本地的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.sentBytes">
            <summary>
总发送字节总数（包含信令和音视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.receivedBytes">
            <summary>
总接收字节数（包含信令和音视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.rtt">
            <summary>
延迟（毫秒），指 SDK 到腾讯云服务器的一次网络往返时间，该值越小越好。
<para>一般低于50ms的 rtt 相对理想，而高于100ms的 rtt 会引入较大的通话延时。</para><para>由于数据上下行共享一条网络连接，所以 local 和 remote 的 rtt 相同。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.systemCpu">
            <summary>
当前系统的 CPU 使用率（％）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.appCpu">
            <summary>
当前 App 的 CPU 使用率（％）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.downLoss">
            <summary>
S -&gt; C 下行丢包率（％），
该值越小越好，例如，丢包率为0表示网络很好，
丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在下行传输中。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.upLoss">
            <summary>
C -&gt; S 上行丢包率（％），
<para>
该值越小越好，例如，丢包率为0表示网络很好，
丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在上行传输中。
</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCStatistics">
            <summary>
统计数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.streamType">
            <summary>
流类型（大画面 | 小画面 | 辅路画面）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.audioBitrate">
            <summary>
音频码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.audioSampleRate">
            <summary>
音频采样率（Hz）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.videoBitrate">
            <summary>
视频码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.frameRate">
            <summary>
接收帧率（fps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.height">
            <summary>
视频高度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.width">
            <summary>
视频宽度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.finalLoss">
            <summary>
该线路的总丢包率（％）

<para>这个值越小越好，例如，丢包率为0表示网络很好。</para><para>丢包率是该线路的 userId 从上行到服务器再到下行的总丢包率。</para><para>如果 downLoss 为0，但是 finalLoss 不为0，说明该 userId 上行时出现了无法恢复的丢包。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.userId">
            <summary>
用户 ID，指定是哪个用户的视频流
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCRemoteStatistics">
            <summary>
远端成员的音视频统计信息
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.streamType">
            <summary>
流类型（大画面 | 小画面 | 辅路画面）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.audioBitrate">
            <summary>
音频发送码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.audioSampleRate">
            <summary>
音频采样率（Hz）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.videoBitrate">
            <summary>
视频发送码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.frameRate">
            <summary>
帧率（fps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.height">
            <summary>
视频高度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.width">
            <summary>
视频宽度
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCLocalStatistics">
@addtogroup TRTCCloudDef_csharp
@{
<summary>
自己本地的音视频统计信息
</summary></member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.volume">
            <summary>
銆愬瓧娈靛惈涔夈€戦煶鏁堥煶閲?
銆愭帹鑽愬彇鍊笺€戝彇鍊艰寖鍥翠负0 - 100锛涢粯璁ゅ€硷細100
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.publish">
            <summary>
銆愬瓧娈靛惈涔夈€戦煶鏁堟槸鍚︿笂琛?
銆愭帹鑽愬彇鍊笺€慪ES锛氶煶鏁堝湪鏈湴鎾斁鐨勫悓鏃讹紝浼氫笂琛岃嚦浜戠锛屽洜姝よ繙绔敤鎴蜂篃鑳藉惉鍒拌闊虫晥锛汵O锛氶煶鏁堜笉浼氫笂琛?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.loopCount">
            <summary>
銆愬瓧娈靛惈涔夈€戝惊鐜挱鏀炬鏁?
銆愭帹鑽愬彇鍊笺€戝彇鍊艰寖鍥翠负0 - 浠绘剰姝ｆ暣鏁帮紝榛樿鍊硷細0銆?琛ㄧず鎾斁闊虫晥涓€娆★紱1琛ㄧず鎾斁闊虫晥涓ゆ锛涗互姝ょ被鎺?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.path">
            <summary>
銆愬瓧娈靛惈涔夈€戦煶鏁堣矾寰?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.effectId">
            <summary>
銆愬瓧娈靛惈涔夈€戦煶鏁?ID
銆愮壒鍒鏄庛€慡DK 鍏佽鎾斁澶氳矾闊虫晥锛屽洜姝ら渶瑕侀煶鏁?ID 杩涜鏍囪锛岀敤浜庢帶鍒堕煶鏁堢殑寮€濮嬨€佸仠姝€侀煶閲忕瓑
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioEffectParam">
            <summary>
5.14 闊虫晥鎾斁
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioRecordingParams.filePath">
            <summary>
銆愬瓧娈靛惈涔夈€戞枃浠惰矾寰勶紙蹇呭～锛夛紝褰曢煶鏂囦欢鐨勪繚瀛樿矾寰勩€傝璺緞闇€瑕佺敤鎴疯嚜琛屾寚瀹氾紝璇风‘淇濊矾寰勫瓨鍦ㄤ笖鍙啓銆?
銆愮壒鍒鏄庛€戣璺緞闇€绮剧‘鍒版枃浠跺悕鍙婃牸寮忓悗缂€锛屾牸寮忓悗缂€鍐冲畾褰曢煶鏂囦欢鐨勬牸寮忥紝鐩墠鏀寔鐨勬牸寮忔湁 PCM銆乄AV 鍜?AAC銆?
          渚嬪锛屾寚瀹氳矾寰勪负 path/to/audio.aac锛屽垯浼氱敓鎴愪竴涓?AAC 鏍煎紡鐨勬枃浠躲€?
          璇锋寚瀹氫竴涓湁璇诲啓鏉冮檺鐨勫悎娉曡矾寰勶紝鍚﹀垯褰曢煶鏂囦欢鏃犳硶鐢熸垚銆?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.url">
            <summary>
鏃佽矾杞帹鐨?URL
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.bizId">
            <summary>
鑵捐浜戠洿鎾?bizid锛岃鍦?[瀹炴椂闊宠棰戞帶鍒跺彴](https://console.cloud.tencent.com/rav) 閫夋嫨宸茬粡鍒涘缓鐨勫簲鐢紝鍗曞嚮銆愬笎鍙蜂俊鎭€戯紝鍦ㄢ€滅洿鎾俊鎭€濅腑鑾峰彇
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.appId">
            <summary>
鑵捐浜?AppID锛岃鍦?[瀹炴椂闊宠棰戞帶鍒跺彴](https://console.cloud.tencent.com/rav) 閫夋嫨宸茬粡鍒涘缓鐨勫簲鐢紝鍗曞嚮銆愬笎鍙蜂俊鎭€戯紝鍦ㄢ€滅洿鎾俊鎭€濅腑鑾峰彇
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCPublishCDNParam">
            <summary>
5.12 CDN 鏃佽矾鎺ㄦ祦鍙傛暟 
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mixUsersArraySize">
            <summary>
銆愬瓧娈靛惈涔夈€?鏁扮粍 mixUsersArray 鐨勫ぇ灏?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mixUsersArray">
            <summary>
銆愬瓧娈靛惈涔夈€戞瘡涓€璺瓙鐢婚潰鐨勪綅缃俊鎭?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.bizId">
            <summary>
銆愬瓧娈靛惈涔夈€戣吘璁簯鐩存挱 bizid
<para>銆愭帹鑽愬彇鍊笺€戣鍦?[瀹炴椂闊宠棰戞帶鍒跺彴](https://console.cloud.tencent.com/rav) 閫夋嫨宸茬粡鍒涘缓鐨勫簲鐢紝鍗曞嚮銆愬笎鍙蜂俊鎭€戝悗锛屽湪鈥滅洿鎾俊鎭€濅腑鑾峰彇</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.appId">
            <summary>
銆愬瓧娈靛惈涔夈€戣吘璁簯鐩存挱 AppID
<para>銆愭帹鑽愬彇鍊笺€戣鍦?[瀹炴椂闊宠棰戞帶鍒跺彴](https://console.cloud.tencent.com/rav) 閫夋嫨宸茬粡鍒涘缓鐨勫簲鐢紝鍗曞嚮銆愬笎鍙蜂俊鎭€戝悗锛屽湪鈥滅洿鎾俊鎭€濅腑鑾峰彇</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mode">
            <summary>
銆愬瓧娈靛惈涔夈€戣浆鐮?config 妯″紡
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Unknown">
            <summary>
闈炴硶鍊?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.streamType">
            <summary>
鍙備笌娣峰悎鐨勬槸涓昏矾鐢婚潰锛圱RTCVideoStreamTypeBig锛夋垨灞忓箷鍒嗕韩锛圱RTCVideoStreamTypeSub锛夌敾闈?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.pureAudio">
            <summary>
鏄惁绾煶棰?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.zOrder">
            <summary>
鍥惧眰灞傛锛? - 15锛変笉鍙噸澶?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.rect">
            <summary>
鍥惧眰浣嶇疆鍧愭爣浠ュ強澶у皬锛屽乏涓婅涓哄潗鏍囧師鐐?0,0) 锛堢粷瀵瑰儚绱犲€硷級
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.roomId">
            <summary>
鍙備笌娣锋祦鐨?roomId锛岃法鎴挎祦浼犲叆鐨勫疄闄?roomId锛屽綋鍓嶆埧闂存祦浼犲叆 roomId = NULL
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.userId">
            <summary>
鍙備笌娣锋祦鐨?userId
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCMixUser">
            <summary>
5.9 浜戠娣锋祦涓瘡涓€璺瓙鐢婚潰鐨勪綅缃俊鎭?

<para>TRTCMixUser 鐢ㄤ簬鎸囧畾姣忎竴璺紙鍗虫瘡涓€涓?userId锛夎棰戠敾闈㈢殑鍏蜂綋鎽嗘斁浣嶇疆</para></summary>
        </member>
        <member name="F:ManageLiteAV.RECT.bottom">
            <summary>
涓嬪潗鏍囩偣
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.right">
            <summary>
鍙冲潗鏍囩偣
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.top">
            <summary>
涓婂潗鏍囩偣
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.left">
            <summary>
宸﹀潗鏍囩偣
</summary>
        </member>
        <member name="T:ManageLiteAV.RECT">
            <summary>
璁板綍鐭╁舰鐨勫洓涓偣鍧愭爣
<para>涓轰簡鍏煎 c++ 浣跨敤鐨?RECT 绫诲瀷</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.rtt">
            <summary>
寤惰繜锛堟绉掞級锛屾寚褰撳墠璁惧鍒拌吘璁簯鏈嶅姟鍣ㄧ殑涓€娆＄綉缁滃線杩旀椂闂达紝璇ュ€艰秺灏忚秺濂斤紝姝ｅ父鏁板€艰寖鍥存槸10ms - 100ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.downLostRate">
            <summary>
涓嬭涓㈠寘鐜囷紝鑼冨洿鏄? - 1.0锛屼緥濡傦紝0.2琛ㄧず姣忎粠鏈嶅姟鍣ㄦ敹鍙?0涓暟鎹寘鍙兘浼氬湪涓€斾涪澶?涓€?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.upLostRate">
            <summary>
涓婅涓㈠寘鐜囷紝鑼冨洿鏄? - 1.0锛屼緥濡傦紝0.3琛ㄧず姣忓悜鏈嶅姟鍣ㄥ彂閫?0涓暟鎹寘鍙兘浼氬湪涓€斾涪澶?涓€?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.quality">
            <summary>
缃戠粶璐ㄩ噺锛屽唴閮ㄩ€氳繃璇勪及绠楁硶娴嬬畻鍑虹殑缃戠粶璐ㄩ噺锛宭oss 瓒婁綆锛宺tt 瓒婂皬锛屽緱鍒嗕究瓒婇珮
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.ip">
            <summary>
鏈嶅姟鍣?IP 鍦板潃
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.timestamp">
            <summary>
鏃堕棿鎴筹紝鍗曚綅ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.channel">
            <summary>
澹伴亾鏁?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.sampleRate">
            <summary>
閲囨牱鐜?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.length">
            <summary>
闊抽鏁版嵁鐨勯暱搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.data">
            <summary>
闊抽鏁版嵁
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.audioFormat">
            <summary>
闊抽甯х殑鏍煎紡
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioFrame">
            <summary>
5.7 闊抽甯ф暟鎹?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.rotation">
            <summary>
鐢婚潰鏃嬭浆瑙掑害
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.timestamp">
            <summary>
鏃堕棿鎴筹紝鍗曚綅ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.height">
            <summary>
鐢婚潰鐨勯珮搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.width">
            <summary>
鐢婚潰鐨勫搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.length">
            <summary>
瑙嗛鏁版嵁鐨勯暱搴︼紝鍗曚綅鏄瓧鑺傦紝瀵逛簬i420鑰岃█锛?length = width * height * 3 / 2锛屽浜嶣GRA32鑰岃█锛?length = width * height * 4
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.textureId">
            <summary>
瑙嗛绾圭悊ID锛屽瓧娈礲ufferType鏄疞iteAVVideoBufferType_Texture鏃剁敓鏁?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.data">
            <summary>
瑙嗛鏁版嵁锛屽瓧娈礲ufferType鏄疞iteAVVideoBufferType_Buffer鏃剁敓鏁?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.bufferType">
            <summary>
瑙嗛鏁版嵁缁撴瀯绫诲瀷
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.videoFormat">
            <summary>
瑙嗛甯х殑鏍煎紡
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoFrame">
            <summary>
5.6 瑙嗛甯ф暟鎹?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVolumeInfo.volume">
            <summary>
璇磋瘽鑰呯殑闊抽噺锛?鍙栧€艰寖鍥? - 100              
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVolumeInfo.userId">
            <summary>
璇磋瘽鑰呯殑 userId锛屽瓧绗︾紪鐮佹牸寮忎负 UTF-8
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQualityInfo.quality">
            <summary>
瑙嗛璐ㄩ噺
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQualityInfo.userId">
            <summary>
鐢ㄦ埛鏍囪瘑
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCQualityInfo">
            <summary>
5.4 瑙嗛璐ㄩ噺

<para>琛ㄧず瑙嗛璐ㄩ噺鐨勫ソ鍧忥紝閫氳繃杩欎釜鏁板€硷紝鎮ㄥ彲浠ュ湪 UI 鐣岄潰涓婄敤鍥炬爣琛ㄥ緛 userId 鐨勯€氳瘽绾胯矾璐ㄩ噺</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCNetworkQosParam">
            <summary>
5.3 缃戠粶娴佹帶鐩稿叧鍙傛暟

<para>缃戠粶娴佹帶鐩稿叧鍙傛暟锛岃璁剧疆鍐冲畾浜哠DK鍦ㄥ悇绉嶇綉缁滅幆澧冧笅鐨勮皟鎺ф柟鍚戯紙渚嬪寮辩綉涓嬫槸鈥滀繚娓呮櫚鈥濇垨鈥滀繚娴佺晠鈥濓級</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.videoBitrate">
            <summary>
銆愬瓧娈靛惈涔夈€戣棰戜笂琛岀爜鐜?
<para>銆愭帹鑽愬彇鍊笺€戞帹鑽愯缃鍙傝€冩湰鏂囦欢鍓嶅崐閮ㄥ垎 TRTCVideoResolution 瀹氫箟澶勭殑娉ㄩ噴璇存槑</para><para>銆愮壒鍒鏄庛€戠爜鐜囧お浣庝細瀵艰嚧瑙嗛涓嚭鐜板ぇ閲忛┈璧涘厠</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.businessInfo">
            <summary>
銆愬瓧娈靛惈涔夈€戜笟鍔℃暟鎹?[闈炲繀濉玗锛岄儴鍒嗛珮绾х壒鎬ф墠闇€瑕佷娇鐢ㄨ瀛楁銆?
<para>銆愭帹鑽愬彇鍊笺€戜笉寤鸿浣跨敤</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCWaterMarkSrcType">
            <summary>
4.4 姘村嵃鍥剧墖鐨勬簮绫诲瀷
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeRGBA32">
            <summary>
RGBA32鏍煎紡鍐呭瓨鍧?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeBGRA32">
            <summary>
BGRA32鏍煎紡鍐呭瓨鍧?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeFile">
            <summary>
鍥剧墖鏂囦欢璺緞锛屾敮鎸?BMP銆丟IF銆丣PEG銆丳NG銆乀IFF銆丒xif銆乄MF 鍜?EMF 鏂囦欢鏍煎紡
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCDeviceType">
            <summary>
4.3 璁惧绫诲瀷
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TRTCDeviceTypeCamera">
            <summary>
鎽勫儚澶?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TRTCDeviceTypeSpeaker">
            <summary>
鎵０鍣?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TRTCDeviceTypeMic">
            <summary>
楹﹀厠椋?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TRTCDeviceTypeUnknow">
            <summary>
璁惧宸插惎鐢?
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCDeviceState">
            <summary>
4.2 璁惧鎿嶄綔
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateActive">
            <summary>
璁惧宸插惎鐢?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateRemove">
            <summary>
绉婚櫎璁惧
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateAdd">
            <summary>
娣诲姞璁惧
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCLogLevel">
            <summary>
4.1 Log 绾у埆
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelNone">
            <summary>
涓嶈緭鍑轰换浣?SDK Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelFatal">
            <summary>
鍙緭鍑?FATAL 绾у埆鐨?Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelError">
            <summary>
鍙緭鍑篍RROR 鍜?FATAL 绾у埆鐨?Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelWarn">
            <summary>
鍙緭鍑?WARNING锛孍RROR 鍜?FATAL 绾у埆鐨?Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelInfo">
            <summary>
杈撳嚭 INFO锛學ARNING锛孍RROR 鍜?FATAL 绾у埆鐨?Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelDebug">
            <summary>
杈撳嚭 DEBUG锛孖NFO锛學ARNING锛孍RROR 鍜?FATAL 绾у埆鐨?Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelVerbose">
            <summary>
杈撳嚭鎵€鏈夌骇鍒殑 Log
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.release">
            <summary>
鑾峰彇瀹岃澶囦俊鎭悗锛岃皟鐢╮elease閲婃斁璧勬簮銆?
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.getDevicePID">
            <returns>璁惧PID锛屽瓧绗︾紪鐮佹牸寮忔槸UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.getDeviceName">
            <returns>璁惧鍚嶇О锛屽瓧绗︾紪鐮佹牸寮忔槸UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.release">
            <summary>
閬嶅巻瀹岃澶囧悗锛岃皟鐢╮elease閲婃斁璧勬簮銆?
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getDevicePID(System.UInt32)">
            <returns>璁惧PID锛屽瓧绗︾紪鐮佹牸寮忔槸UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getDeviceName(System.UInt32)">
            <returns>璁惧鍚嶇О锛屽瓧绗︾紪鐮佹牸寮忔槸UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getCount">
            <returns>璁惧涓暟</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.release">
            <summary>
閬嶅巻瀹岀獥鍙ｅ垪琛ㄥ悗锛岃皟鐢╮elease閲婃斁璧勬簮銆?
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.getSourceInfo(System.UInt32)">
            <returns>绐楀彛淇℃伅</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.getCount">
            <returns>绐楀彛涓暟</returns>
        </member>
        <member name="T:ManageLiteAV.ITRTCScreenCaptureSourceList">
            <summary>
灞忓箷绐楀彛鍒楄〃
</summary>
        </member>
        <member name="F:ManageLiteAV.SIZE.cy">
            <summary>
楂?
</summary>
        </member>
        <member name="F:ManageLiteAV.SIZE.cx">
            <summary>
瀹?
</summary>
        </member>
        <member name="T:ManageLiteAV.SIZE">
            <summary>
璁板綍 buffer 鐨勯暱瀹?
<para>涓轰簡鍏煎 c++ 浣跨敤鐨?SIZE 绫诲瀷</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.iconBGRA">
            <summary>
鍥炬爣鍐呭
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.thumbBGRA">
            <summary>
缂╃暐鍥惧唴瀹?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.sourceName">
            <summary>
閲囬泦婧愬悕绉帮紝UTF8缂栫爜
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.sourceId">
            <summary>
閲囬泦婧怚D锛涘浜庣獥鍙ｏ紝璇ュ瓧娈垫寚绀虹獥鍙ｅ彞鏌勶紱瀵逛簬灞忓箷锛岃瀛楁鎸囩ず灞忓箷ID
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.type">
            <summary>
閲囬泦婧愮被鍨?
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCScreenCaptureSourceInfo">
            <summary>
灞忓箷閲囬泦淇℃伅
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.height">
            <summary>
鍥鹃珮
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.width">
            <summary>
鍥惧
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.length">
            <summary>
鍥剧紦瀛樺ぇ灏?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.buffer">
            <summary>
鍥惧唴瀹?
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCImageBuffer">
            <summary>
鍥剧紦瀛?
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCScreenCaptureSourceType">
            <summary>
3.2 灞忓箷鍒嗕韩鐩爣淇℃伅

<para>鎮ㄥ彲浠ラ€氳繃 getScreenCaptureSources() 鏋氫妇鍙叡浜殑绐楀彛鍒楄〃锛屽垪琛ㄩ€氳繃 ITRTCScreenCaptureSourceList 杩斿洖</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceType.TRTCScreenCaptureSourceTypeScreen">
            <summary>
璇ュ垎浜洰鏍囨槸鏁翠釜Windows妗岄潰
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceType.TRTCScreenCaptureSourceTypeWindow">
            <summary>
璇ュ垎浜洰鏍囨槸鏌愪竴涓猈indows绐楀彛
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioFrameFormat">
            <summary>
3.1 闊抽甯х殑鏍煎紡
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrameFormat.TRTCAudioFrameFormatPCM">
            <summary>
PCM锛屾瘡涓噰鏍风偣鍗?6bit鏁版嵁閲忋€?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoQosPreference.TRTCVideoQosPreferenceClear">
            <summary>
寮辩綉涓嬩繚娓呮櫚
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoQosPreference.TRTCVideoQosPreferenceSmooth">
            <summary>
寮辩綉涓嬩繚娴佺晠
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQosControlMode.TRTCQosControlModeServer">
            <summary>
浜戠鎺у埗 锛堥粯璁わ級
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQosControlMode.TRTCQosControlModeClient">
            <summary>
瀹㈡埛绔帶鍒讹紙鐢ㄤ簬 SDK 寮€鍙戝唴閮ㄨ皟璇曪紝瀹㈡埛璇峰嬁浣跨敤锛?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRoleType.TRTCRoleAudience">
            <summary>
瑙備紬
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRoleType.TRTCRoleAnchor">
            <summary>
涓绘挱
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoBufferType">
            <summary>
1.9 瑙嗛鏁版嵁鍖呰鏍煎紡
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoBufferType.TRTCVideoBufferType_Texture">
            <summary>
绾圭悊绫诲瀷
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoBufferType.TRTCVideoBufferType_Buffer">
            <summary>
浜岃繘鍒禕uffer绫诲瀷
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCBeautyStyle.TRTCBeautyStyleNature">
            <summary>
鑷劧锛岀（鐨畻娉曟洿澶氬湴淇濈暀浜嗛潰閮ㄧ粏鑺傦紝涓昏鎰熷彈涓婁細鏇村姞鑷劧銆?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCBeautyStyle.TRTCBeautyStyleSmooth">
            <summary>
鍏夋粦锛岄€傜敤浜庣編濂崇鍦猴紝鏁堟灉姣旇緝鏄庢樉銆?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation270">
            <summary>
椤烘椂閽堟棆杞?70搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation180">
            <summary>
椤烘椂閽堟棆杞?80搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation90">
            <summary>
椤烘椂閽堟棆杞?0搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation0">
            <summary>
椤烘椂閽堟棆杞?搴?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFillMode.TRTCVideoFillMode_Fit">
            <summary>
鍥惧儚闀胯竟濉弧灞忓箷锛岀煭杈瑰尯鍩熶細琚～鍏呴粦鑹?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFillMode.TRTCVideoFillMode_Fill">
            <summary>
鍥惧儚閾烘弧灞忓箷锛岃秴鍑烘樉绀鸿绐楃殑瑙嗛閮ㄥ垎灏嗚瑁佸壀
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Down">
            <summary>
涓嶅彲鐢?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Vbad">
            <summary>
寰堝樊
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Bad">
            <summary>
宸?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Poor">
            <summary>
涓€鑸?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Good">
            <summary>
濂?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Excellent">
            <summary>
鏈€濂?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Unknown">
            <summary>
鏈畾涔?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeSub">
            <summary>
杈呮祦锛堝睆骞曞垎浜級
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeSmall">
            <summary>
灏忕敾闈㈣棰戞祦
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeBig">
            <summary>
涓荤敾闈㈣棰戞祦
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoResolutionMode">
            <summary>
1.2 瑙嗛鍒嗚鲸鐜囨ā寮?

<para>- 妯睆鍒嗚鲸鐜囷細TRTCVideoResolution_640_360 + TRTCVideoResolutionModeLandscape = 640 脳 360</para><para>- 绔栧睆鍒嗚鲸鐜囷細TRTCVideoResolution_640_360 + TRTCVideoResolutionModePortrait  = 360 脳 640</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolutionMode.TRTCVideoResolutionModePortrait">
            <summary>
绔栧睆鍒嗚鲸鐜?
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolutionMode.TRTCVideoResolutionModeLandscape">
            <summary>
妯睆鍒嗚鲸鐜?
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoResolution">
@defgroup TRTCCloudDef_csharp 鍏抽敭绫诲瀷瀹氫箟
鑵捐浜戣棰戦€氳瘽鍔熻兘鐨勫叧閿被鍨嬪畾涔?
@{
<summary>
1.1 瑙嗛鍒嗚鲸鐜?
</summary><remarks>
姝ゅ浠呭畾涔夋í灞忓垎杈ㄧ巼锛屽闇€浣跨敤绔栧睆鍒嗚鲸鐜囷紙渚嬪360 脳 640锛夛紝闇€瑕佸悓鏃舵寚瀹?TRTCVideoResolutionMode 涓?Portrait銆?
</remarks></member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_1920_1080">
            <summary>
灞忓箷鍒嗕韩 - 寤鸿鐮佺巼2000kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_1280_720">
            <summary>
鎽勫儚澶撮噰闆?- 寤鸿鐮佺巼1200kbps
<para>灞忓箷鍒嗕韩 - 寤鸿鐮佺巼 浣庢竻锛?000kbps 楂樻竻锛?600kbps</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_960_540">
            <summary>
寤鸿鐮佺巼850kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_640_360">
            <summary>
寤鸿鐮佺巼550kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_270">
            <summary>
寤鸿鐮佺巼350kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_320_180">
            <summary>
寤鸿鐮佺巼250kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_256_144">
            <summary>
寤鸿鐮佺巼200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_90">
            <summary>
寤鸿鐮佺巼150kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_960_720">
            <summary>
寤鸿鐮佺巼1000kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_640_480">
            <summary>
寤鸿鐮佺巼600kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_360">
            <summary>
寤鸿鐮佺巼400kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_400_300">
            <summary>
寤鸿鐮佺巼300kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_320_240">
            <summary>
寤鸿鐮佺巼250kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_280_210">
            <summary>
寤鸿鐮佺巼200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_240_180">
            <summary>
寤鸿鐮佺巼150kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_120">
            <summary>
寤鸿鐮佺巼100kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_480">
            <summary>
寤鸿鐮佺巼350kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_270_270">
            <summary>
寤鸿鐮佺巼200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_160">
            <summary>
寤鸿鐮佺巼100kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_120_120">
            <summary>
寤鸿鐮佺巼80kbps
</summary>
        </member>
        <member name="M:ITXLivePlayer.setLivePlayAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
    * \brief：设置播放选项
	* 
	* 缓冲区时长是较为常用的设置项，播放缓冲区的作用是为了抵抗网络波动导致的音视频卡顿。
	* 缓冲区时长越大，视频播放的卡顿率越低，观众跟主播之间的时延也就越高。
	* 缓冲区时长越小，视频播放的卡顿率越高，观众跟主播之间的时延也就越低。
	*
	* \note 缓冲区时长不等于观众跟主播之间的时延，一般而言，时延要比缓冲区时长大1-2秒，这取决于 CDN 的质量。
	*       如果主播采用的是 OBS 等直播软件，那么时延还会更高一些，因为 OBS 本身会有1秒以上的推流时延。
	*
    * \param：jsonParam - 属性信息，UTF-8编码。
	*
    * <pre>
    *    1. AutoAdjustCacheTime | bool  | 设置是否自动调整缓存时间, 默认值:true。
    *        - true：启用自动调整，SDK 将根据网络状况在一个范围内调整缓冲区时长，网络越好，缓冲越短，时延越小，调整范围为：[MinAutoAdjustCacheTime - MaxAutoAdjustCacheTime]。
    *        - false：关闭自动调整，SDK 将固定使用默认的播放缓冲区时长，也就是 “CacheTime” 所设置的值。
    *    
    *    2. CacheTime | float | 默认的播放缓存时长，单位秒，取值需要大于0.2，默认值：5。
    *    
    *    3. MaxAutoAdjustCacheTime | float | 播放器最大缓冲时间，单位秒，取值需要大于0.2，默认值：5，含义：播放器的最大播放延迟大约为 5+1=6 秒（CDN会引入约1秒延迟）。
    *
    *    4. MinAutoAdjustCacheTime | float | 播放器最小缓冲时间，单位秒，取值需要大于0.2，默认值：1，含义：播放器的最小播放延迟大约为 1+1=2 秒（CDN会引入约1秒延迟）。
    *
    *    5. VideoBlockThreshold | int | 播放器视频卡顿报警阈值，单位毫秒，默认值为800毫秒，含义：视频卡顿超过 800 毫秒，ITXLivePlayerCallback 会通知 PLAY_WARNING_VIDEO_PLAY_LAG。
    *
    *    6. ConnectRetryCount | int | 拉流网络断开重连次数，默认值为3。
    *
    *    7. ConnectRetryInterval | int | 拉流网络断开重连时间间隔，单位秒，默认值为3。
    *
	* 示例:
	*    setLivePlayAttribute("{\"AutoAdjustCacheTime\":true, \"MinAutoAdjustCacheTime\": 2.0, \"MaxAutoAdjustCacheTime\": 5.0}");
	* 含义：
	*    设置播放缓冲区根据网络自动调整，调整范围为2-5秒，观众与主播之间的延迟约为3-6秒（如果主播使用 OBS 推流则为4-7秒），网络越差，延迟越大。
    * </pre></member>
        <member name="M:ITXLivePlayer.captureVideoSnapShot(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
\brief：截图当前拉流的图像到本地，
\param：filePath - 存储路径，UTF-8编码。
\param: length - 路径大小
\return：0成功，非0失败
\errorRet:  -1:失败，-2路径非法，-3文件存在，-4未拉流

</member>
        <member name="M:ITXLivePlayer.setEnableMessage(System.Boolean)">
\brief：是否开启消息通道， 默认值为 false
\param：enableMessage - true：开启，false：关闭


</member>
        <member name="M:ITXLivePlayer.setOutputVideoFormat(TXEOutputVideoFormat)">
\brief：设置视频编码格式，默认格式是TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT
\param：format - 视频编码格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值
\return:无

</member>
        <member name="M:ITXLivePlayer.setRenderYMirror(System.Boolean)">
\brief：设置渲染的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return:无

</member>
        <member name="M:ITXLivePlayer.setRotation(TXEVideoRotationType)">
\brief：设置图像的顺时针旋转角度
\param：rotation - 参考 TXLiveTypeDef.h 中定义的 TXEVideoRotationType 枚举值
\return:无

</member>
        <member name="M:ITXLivePlayer.setRenderMode(TXERenderMode)">
\brief：设置图像的渲染（填充）模式
\param：mode - 参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值
\return:无

</member>
        <member name="M:ITXLivePlayer.setMute(System.Boolean)">
\brief：静音接口
\param：mute - 是否静音
\return:无

</member>
        <member name="M:ITXLivePlayer.isPlaying">
\brief：是否正在播放

</member>
        <member name="M:ITXLivePlayer.resume">
\brief：恢复播放

</member>
        <member name="M:ITXLivePlayer.pause">
\brief：暂停播放

</member>
        <member name="M:ITXLivePlayer.stopPlay">
\brief：停止播放

</member>
        <member name="M:ITXLivePlayer.startPlay(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TXEPlayType)">
	* \brief：开始播放，请在 startPlay 之前 setRenderFrame
    * \param：url   - 视频播放 URL
    * \param：type  - 播放类型，参考 TXLiveTypeDef.h 中定义的 TXEPlayType 枚举值
	* \return：无 

</member>
        <member name="M:ITXLivePlayer.closeRenderFrame">
\brief：关闭图像渲染

</member>
        <member name="M:ITXLivePlayer.updateRenderFrame(HWND__*)">
\brief：重设图像渲染窗口
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return:无

</member>
        <member name="M:ITXLivePlayer.setRenderFrame(HWND__*)">
\brief：设置视频图像渲染
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return:无

</member>
        <member name="M:ITXLivePlayer.getAudioPlayoutVolume">
\brief: 获取 SDK 采集音量

</member>
        <member name="M:ITXLivePlayer.setAudioPlayoutVolume(System.Int32)">
\brief: 设置 SDK 采集音量。
@param volume 音量大小，取值[0, 65535]，默认值为65535

</member>
        <member name="M:ITXLivePlayer.speakerVolumeIndication">
\brief：查询已选择扬声器的能量值，指示音量的大小
\return：能量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePlayer.setSpeakerVolume(System.UInt32)">
\brief：设置SDK播放的音量，注意设置的不是系统扬声器的音量大小
\param：volume - 设置的音量大小，范围是[0, 65535]

</member>
        <member name="M:ITXLivePlayer.speakerVolume">
\brief：查询SDK播放的音量，注意查询得到不是系统扬声器的音量大小
\return：音量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePlayer.selectSpeakerDevice(System.UInt32)">
\brief：选择指定的扬声器作为音频播放的设备，不调用该接口时，默认选择索引为0的扬声器
\param：index - 扬声器设备的索引，要求index值小于 speakerDeviceCount 接口的返回值

</member>
        <member name="M:ITXLivePlayer.setCallback(ITXLivePlayerCallback*,System.Void*)">
\brief：设置回调 TXLivePlayer 的回调代理，监听播放事件
\param：callback  - ITXLivePlayerCallback 类型的代理指针
\param：pUserData - 透传用户数据到 ITXLivePusherCallback 的回调函数,一般情况下传 NULL 就可以了
\return 无

</member>
        <member name="M:destroyTXLivePlayer(ITXLivePlayer**)">
\brief 析构ITXLivePlayer对象

</member>
        <member name="M:createTXLivePlayer">
 \brief 用于动态加载dll时，导出TXLivePlayer C++对象。

 \return TXLivePlayer对象指针，注意：delete ITXLivePlayer*会编译错误，需要调用destroyTXLivePlayer释放。

</member>
        <member name="M:ManageLiteAV.TXLivePlayer.setOutputVideoFormat(ManageLiteAV.TXEOutputVideoFormat)">
            <summary>
设置视频编码格式，默认格式是TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT
</summary>
            <param name="format">视频编码格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderYMirror(System.Boolean)">
            <summary>
设置渲染的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRotation(ManageLiteAV.TXEVideoRotation)">
            <summary>
设置图像的顺时针旋转角度
</summary>
            <param name="rotation">参考 TXLiveTypeDef.h 中定义的 TXEVideoRotation 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderMode(ManageLiteAV.TXERenderMode)">
            <summary>
设置图像的渲染（填充）模式
</summary>
            <param name="mode">参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setMute(System.Boolean)">
            <summary>
静音接口
</summary>
            <param name="mute">是否静音</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.isPlaying">
            <summary>
是否正在播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.resume">
            <summary>
恢复播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.pause">
            <summary>
暂停播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.stopPlay">
            <summary>
停止播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.startPlay(System.String,ManageLiteAV.TXEPlayType)">
            <summary>
开始播放，请在 startPlay 之前 setRenderFrame
</summary>
            <param name="url">视频播放 URL</param>
            <param name="type">播放类型，参考 TXLiveTypeDef.h 中定义的 TXEPlayType 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.closeRenderFrame">
            <summary>
关闭图像渲染
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.updateRenderFrame(System.IntPtr)">
            <summary>
重设图像渲染区域，当您指定的 HWND 的窗口尺寸发生变化时，可以通过这个函数重新调整视频渲染区域
</summary>
            <param name="hWnd">承载视频画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderFrame(System.IntPtr)">
            <summary>
挂接视频图像渲染
</summary>
            <param name="hWnd">承载视频画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerVolumeIndication">
            <summary>
查询已选择扬声器的能量值，指示音量的大小
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
            <returns>能量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setSpeakerVolume(System.UInt32)">
            <summary>
设置SDK播放的音量，注意设置的不是系统扬声器的音量大小
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerVolume">
            <summary>
查询SDK播放的音量，注意查询得到不是系统扬声器的音量大小
</summary>
            <returns>音量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.selectSpeakerDevice(System.UInt32)">
            <summary>
选择指定的扬声器作为音频播放的设备，不调用该接口时，默认选择索引为0的扬声器
</summary>
            <param name="index">扬声器设备的索引，要求index值小于 speakerDeviceCount 接口的返回值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerDevices">
            <summary>
枚举当前可用的扬声器，如果一台Windows同时安装了多个扬声器，那么此函数获取可用的扬声器数量和名称
</summary>
            <returns>当前可用的扬声器列表，查询得到的字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setListener(ManageLiteAV.ITXLivePlayerListener,System.IntPtr)">
            <summary>
设置回调 TXLivePlayer 的回调代理，监听播放事件、以及获取音视频数据
</summary>
            <param name="listener">TXLivePlayer 类型的接口类</param>
            <param name="pUserData">一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.Dispose">
            <summary>
析构函数，C#代码中要求显示调用Dispose函数，来触发托管C++类析构函数
</summary>
        </member>
        <member name="M:ManageLiteAV.CrashDump.close">
            <summary>
关闭minidump生成功能
</summary>
        </member>
        <member name="M:ManageLiteAV.CrashDump.open">
            <summary>
开启minidump生成功能，发生崩溃时，自动生成minidump转储文件，用于分析崩溃原因
</summary>
        </member>
        <member name="M:ITXLivePlayerCallback.onAudioDecodeCallback(System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Void*)">
\brief：获取 SDK 要播放的音频数据，如果您需要自己播放声音，只需要返回 true 即可接管声音的播放，建议不要在回调函数做耗时操作
\param：pcm       - 音频裸数据buffer
\param：length    - buffer 的长度，单位是字节
\param：sampleRate- 音频采样率，可预期的值有： 8000、16000、32000、44100、48000
\param：channel   - 声道数：单声道 或者 双声道， SDK 默认是走单声道的
\param：timestamp - 当前这帧音频buffer的时间戳
\param：pUserData - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL

</member>
        <member name="M:ITXLivePlayerCallback.onVideoDecodeCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Int32,System.Int32,TXEOutputVideoFormat,System.Void*)">
\brief：获取 SDK 要播放的视频数据，如果您需要自己渲染视频画面，只需要返回 true 即可接管画面的渲染，建议不要在回调函数做耗时操作
\param：data   - 视频数据 buffer
\param：length - buffer 的长度，单位是字节，对于i420而言， length = width * height * 3 / 2
\param：width  - 画面的宽度，单位 pixel
\param：height - 画面的高度，单位 pixel
\param：format - 视频格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值
\param：pUserData  - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL

</member>
        <member name="M:ITXLivePusherCallback.onAudioCaptureCallback(System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Void*)">
\brief：获取 SDK 所采集的音频数据
\param：pcm       - SDK采集的音频裸数据buffer
\param：length    - buffer 的长度，单位是字节
\param：sampleRate- 音频采样率，可预期的值有： 8000、16000、32000、44100、48000
\param：channel   - 声道数：单声道 或者 双声道， SDK 默认是走单声道的
\param：timestamp - 当前这帧音频buffer的时间戳
\param：pUserData - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL
\return：无

</member>
        <member name="M:ITXLivePusherCallback.onVideoCaptureCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Int32,System.Int32,System.Void*)">
\brief：获取 SDK 所采集的视频数据
\param：yuv420 - i420 格式的 YUV 视频数据 buffer
\param：length - buffer 的长度，单位是字节，对于i420而言， length = width * height * 3 / 2
\param：width  - 画面的宽度，单位 pixel
\param：height - 画面的高度，单位 pixel
\param：pUserData  - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL
\return：无

</member>
        <member name="M:ITXLivePusher.sendCustomAudioData(LiteAVAudioFrame*)">
 \brief 自定义音频采集接口，startPreview的srcType = TXE_VIDEO_SRC_USER_DATA时通过此接口传入PCM音频格式数据

 \param frame.data        - PCM缓冲
 \param frame.length      - PCM缓冲长度
 \param frame.sampleRate  - 音频采样率，建议48K，
 \param frame.channel     - 音频声道数，目前只支持 1或2声道。
 \param frame.audioFormat - 音频数据格式，目前只支持LiteAVAudioFrameFormatPCM格式。
 \param frame.timestamp   - 音频帧采集的时间戳。
 \note  量化位数，目前值支持16byte格式。

</member>
        <member name="M:ITXLivePusher.sendCustomVideoData(LiteAVVideoFrame*)">
 \brief 自定义视频采集接口，startPreview的srcType = TXE_VIDEO_SRC_USER_DATA时通过此接口传入I420格式的视频数据

 \param frame.data  - 视频缓冲,目前值支持紧凑内存的I420数据
 \param frame.lenth - 视频缓冲长度
 \param frame.width - 视频图像长
 \param frame.width - 视频图像宽
 \param frame.videoFormat - 视频格式，目前只支持LiteAVVideoPixelFormat_I420格式。
 \param frame.timestamp   - 视频帧采集的时间戳。

</member>
        <member name="M:ITXLivePusher.showDebugView(System.Int32)">
 \brief 显示仪表盘（状态统计和事件消息浮层view），方便调试

 \param showType 0: 不显示 1: 显示精简版 2: 显示全量版

</member>
        <member name="M:ITXLivePusher.setNearestIP(System.Boolean)">
\brief：设置是否就近选路
\param：enable - true表示启用，false表示禁用，SDK 默认为true
\return:无

</member>
        <member name="M:ITXLivePusher.setPauseVideo(System.Boolean)">
\brief：设置视频暂停

</member>
        <member name="M:ITXLivePusher.setVideoFPS(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief：设置视频帧率
\param：fps - 视频帧率，默认值为15，重启后生效
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoBitRateMin(System.Int32)">
\brief：配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，如下的两个函数调用均视为无效
\param：videoBitrateMin - 允许 SDK 输出的最小视频码率，比如 640x360 分辨率下这个值适合设置为 300kbps
\param：videoBitrateMax - 允许 SDK 输出的最大视频码率, 比如 640x360 分辨率下这个值适合设置为 1000kbps
\return:无

</member>
        <member name="M:ITXLivePusher.setAutoAdjustStrategy(TXEAutoAdjustStrategy)">
\brief：设置流控策略，即是否允许 SDK 根据当前网络情况调整视频码率，以避免网络上传速度不足导致的画面卡顿
\param：strategy - 参考 TXLiveTypeDef.h 中定义的 TXEAutoAdjustStrategy 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoBitRate(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief：设置视频码率，注意，不是分辨率越高画面越清晰，是码率越高画面越清晰
\param：bitrate - 视频码率，单位 kbps， 比如 640x360 分辨率需要配合 800kbps 的视频码率
\return:无

</member>
        <member name="M:ITXLivePusher.setOutputYMirror(System.Boolean)">
\brief：设置推流画面的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return:无

</member>
        <member name="M:ITXLivePusher.setRenderYMirror(System.Boolean)">
\brief：设置预览渲染的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return:无

</member>
        <member name="M:ITXLivePusher.setBeautyStyle(TXEBeautyStyle,System.Int32,System.Int32)">
\brief：设置美颜和美白效果
\param：beautyStyle    - 参考 TXLiveTypeDef.h 中定义的 TXEBeautyStyle 枚举值
\param：beautyLevel    - 美颜级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显
\param：whitenessLevel - 美白级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoResolution(TXEVideoResolution)">
	* \brief：设置视频分辨率
    * \param：resolution  - 视频分辨率，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值
	* \return:无

</member>
        <member name="M:ITXLivePusher.setVideoQualityParamPreset(TXEVideoQualityParamPreset,TXEVideoRatio)">
\brief：推流的画面质量预设选项
\param：paramType  - 预设类型，参考 TXLiveTypeDef.h 中定义的 TXEVideoQualityParamPreset 枚举值
\param：ratio  - 预设画面比例，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值
\return:无
\startPush前生效。

</member>
        <member name="M:ITXLivePusher.setRotation(TXEVideoRotationType)">
\brief：设置图像的顺时针旋转角度
\param：rotation - 参考 TXLiveTypeDef.h 中定义的 TXEVideoRotationType 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setRenderMode(TXERenderMode)">
\brief：设置图像的渲染（填充）模式
\param：mode - 参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setMute(System.Boolean)">
\brief：静音接口
\param：mute - 是否静音
\return:无

</member>
        <member name="M:ITXLivePusher.switchCamera(System.Int32)">
\brief：切换摄像头，支持在推流中动态切换
\param：cameraIndex : 摄像头需要，取值返回：  0 ~ (摄像头个数 - 1)
\return:无

</member>
        <member name="M:ITXLivePusher.stopPush">
	* \brief：停止推流，注意推流 url 有排他性，也就是一个推流 Url 同时只能有一个推流端向上推流
	* \param：无
	* \return:无
    * \attention: 若通过 startPreview 接口开启了预览，在调用这个接口前，请先调用 stopPreview 接口

</member>
        <member name="M:ITXLivePusher.startPush(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief：启动推流 (在 startPush 之前需要先 startPreview 启动摄像头预览，否则推送出去的数据流里只有音频)
\param：url - 一个合法的推流地址，腾讯云的推流 URL 都要求带有 txSecret 和 txTime 防盗链签名，如果您发现推流推不上去，请检查这两个签名是否合法。
\return：成功 or 失败，内存分配、资源申请失败等原因可能会导致返回失败

</member>
        <member name="M:ITXLivePusher.captureVideoSnapShot(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
\brief：推流的图像截图到本地
\param：filePath - 存储路径
\param: length - 路径字符长度
\return：0成功，非0失败：-1:失败，-2路径非法，-3文件存在，-4未推流

</member>
        <member name="M:ITXLivePusher.selectScreenCaptureTarget(LiteAVScreenCaptureSourceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
 \brief  【屏幕共享】选择要分享的目标窗口或目标区域，支持如下四种情况：

 &gt;&gt;&gt; 共享整个屏幕 : sourceInfoList 中type为Screen的source，captureRect 设为 { 0, 0, 0, 0 }
 &gt;&gt;&gt; 共享指定区域 : sourceInfoList 中type为Screen的source，captureRect 设为非 NULL，比如 { 100, 100, 300, 300 }
 &gt;&gt;&gt; 共享整个窗口 : sourceInfoList 中type为Window的source，captureRect 设为 { 0, 0, 0, 0 }
 &gt;&gt;&gt; 共享窗口区域 : sourceInfoList 中type为Window的source，captureRect 设为非 NULL，比如 { 100, 100, 300, 300 }

 \note: 您可以在屏幕分享的过程中掉用该函数来切换目标窗口或者调整目标区域

 \param source             - 指定分享源
 \param captureRect        - 指定捕获的区域
 \param captureMouse       - 指定是否捕获鼠标指针
 \param highlightWindow    - 指定是否高亮正在共享的窗口以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡


</member>
        <member name="M:ITXLivePusher.getScreenCaptureSources(tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief  【屏幕共享】枚举可共享的窗口列表，

 \param thumbSize - 指定要获取的窗口缩略图大小，缩略图可用于绘制在窗口选择界面上
 \param iconSize  - 指定要获取的窗口图标大小

 \return 列表通过返回值 ILiteAVScreenCaptureSourceList 返回
 \note   如果delete ILiteAVScreenCaptureSourceList*指针会编译错误，SDK维护ILiteAVScreenCaptureSourceList对象的生命周期。

</member>
        <member name="M:ITXLivePusher.stopPreview">
\brief：关闭视频源预览
\return 无

</member>
        <member name="M:ITXLivePusher.updatePreview(HWND__*)">
\brief：重设摄像头预览窗口
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return 无

</member>
        <member name="M:ITXLivePusher.startPreview(TXEVideoCaptureSrcType,HWND__*)">
\brief：启动视频源预览
\param：srcType  - 参考 TXLiveTypeDef.h 中定义的 TXEVideoCaptureSrcType 枚举值
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\param：dataFormat - srcType = TXE_VIDEO_SRC_USER_DATA时生效，指定传入的参数
\return: 成功 or 失败

</member>
        <member name="M:ITXLivePusher.stopAudioCapture">
\brief：关闭音频采集

</member>
        <member name="M:ITXLivePusher.startAudioCapture(TXEAudioCaptureSrcType)">
\brief：启动音频采集
\param：srcType - 音频数据源类型

</member>
        <member name="M:ITXLivePusher.setAudioChannels(TXEAudioChannels)">
\brief：设置音频前处理开关
\param：channels - 参考 TXLiveTypeDef.h 中定义的 TXEAudioChannels 枚举值，SDK 内部默认选择 TXE_AUDIO_CHANNELS_1 单声道

</member>
        <member name="M:ITXLivePusher.enableAudioPreprocess(TXEAudioPreprocessType,System.Boolean)">
\brief：设置音频前处理开关
\param：preprocessType - 参考 TXLiveTypeDef.h 中定义的 TXEAudioPreprocessType。
\note : 默认开启AEC、AGC、NS，如需关闭回声消除预处理enableAudioPreprocess(TXE_AUDIO_PREPROCESS_AEC, false)。

</member>
        <member name="M:ITXLivePusher.setSystemVoiceInputVolume(System.Int32)">
@brief 设置系统声音采集的音量。
@param [in] value 设置目标音量,取值范围[0,100].

</member>
        <member name="M:ITXLivePusher.closeSystemVoiceInput">
@brief 关闭系统声音采集。

</member>
        <member name="M:ITXLivePusher.openSystemVoiceInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 打开系统声音采集。
@details 采集系统声音。
@param [in] szPlayerPath 播放器地址;如果用户此参数填空或不填，表示采集系统中的所有声音;
		    如果填入exe程序(如:酷狗、QQ音乐)所在路径,将会启动此程序，并只采集此程序的声音;

</member>
        <member name="M:ITXLivePusher.closeMicTest">
\brief：关闭麦克风测试

</member>
        <member name="M:ITXLivePusher.openMicTest">
\brief：开启麦克风测试

</member>
        <member name="M:ITXLivePusher.enableMic(System.Boolean)">
\brief：关闭麦克风
\param：enable - false为关闭麦克风采集，true为启用麦克风采集

</member>
        <member name="M:ITXLivePusher.getAudioCaptureVolume">
\brief： 获取 SDK 采集音量

</member>
        <member name="M:ITXLivePusher.setAudioCaptureVolume(System.Int32)">
 \brief：设置 SDK 采集音量。

 \return volume 音量大小，取值[0, 65535]，默认值为65535

</member>
        <member name="M:ITXLivePusher.micVolumeIndication">
\brief：查询已选择麦克风的能量值，指示音量的大小
\return：能量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePusher.setMicVolume(System.UInt32)">
\brief：设置已选择麦克风的音量
\param：volume - 设置的音量大小，范围是[0, 65535]

</member>
        <member name="M:ITXLivePusher.micVolume">
\brief：查询已选择麦克风的音量
\return：音量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePusher.selectMicDevice(System.UInt32)">
\brief：选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风
\param：index - 麦克风设备的索引，要求index值小于 micDeviceCount 接口的返回值

</member>
        <member name="M:ITXLivePusher.setCallback(ITXLivePusherCallback*,System.Void*)">
\brief：设置回调 TXLivePusher 的回调代理，监听推流事件
\param：callback  - ITXLivePusherCallback 类型的代理指针
\param：pUserData - 一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数
\return 无

</member>
        <member name="M:destroyTXLivePusher(ITXLivePusher**)">
\brief 析构ITXLivePusher对象

</member>
        <member name="M:createTXLivePusher">
 \brief 用于动态加载dll时，导出ITXLivePusher C++对象。

 \return TXLivePusher对象指针，注意：delete ITXLivePusher*会编译错误，需要调用destroyTXLivePusher释放。

</member>
        <member name="T:TXEPlayType">
\brief：设置播放类型

</member>
        <member name="T:TXEBeautyStyle">
\brief：设置美颜风格

</member>
        <member name="T:TXEOutputVideoFormat">
\brief：设置输出的视频格式

</member>
        <member name="T:TXEVideoQualityParamPreset">
  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  推流的画面质量预设选项  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  - 1.2.0 版本开始引入推流画质接口 setVideoQualityParamPreset 用于傻瓜化的选择推流画质效果。
  - TXLivePush::setVideoQualityParamPreset 内部通过预先配置不同的视频参数调整到对应的质量
  - 目前支持的几种画质选项如下：

  （1）标清 - 采用 640 * 360 级别分辨率，码率会在 400kbps - 800kbps 之间自适应，如果主播的网络条件不理想，
              直播的画质会偏模糊，但总体卡顿率不会太高。
              Android平台下这一档我们会选择采用软编码，软编码虽然更加耗电，但在运动画面的表现要优于硬编码。

  （2）高清 - 采用 960 * 540 级别分辨率，码率会锁定在 1200kbps，如果主播的网络条件不理想，直播画质不会有变化，
              但这段时间内会出现频繁的卡顿和跳帧。 两个平台下，这一档我们都会采用硬编码。

  （3）超清 - 采用 1280 * 720 级别分辨率，码率会锁定在 1500kbps，对主播的上行带宽要求比较高，适合观看端是大屏的业务场景。

  （4）大主播 - 顾名思义，连麦中大主播使用，因为是观众的主画面，追求清晰一些的效果，所以分辨率会优先选择 960 * 540。

  （5）小主播 - 顾名思义，连麦中小主播使用，因为是小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

  （6）实时音视频通话 - 时延低，小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

  （7）静态画质场景   - 画面变动小，能保证非常低的码率下，视频相对清晰，如截屏正在播放的ppt，1080p，400kb左右码率。
 【特别说明】
  1. 使用 setVideoQualityParamPreset 之后，依然可以使用setVideoBitRate、setVideoFPS、setAutoAdjustStrategy等设置自定义画质，以最后一次的设置为准。

\brief：SDK推流画质预设选项

</member>
        <member name="T:TXEAutoAdjustStrategy">
\brief：目前SDK支持的流控策略

</member>
        <member name="T:TXEVideoRotationType">
\brief：目前SDK支持的画面顺时针旋转角度

</member>
        <member name="T:TXERenderMode">
\brief：目前SDK支持的画面渲染模式，两种模式均会严格保持画面的原始宽高比

</member>
        <member name="T:TXEVideoResolution">
\brief：推流视频分辨率

</member>
        <member name="T:TXEVideoRatio">
\brief：推流视频比例

</member>
        <member name="T:TXEVideoCaptureSrcType">
\brief：视频数据源类型

</member>
        <member name="T:TXEAudioPreprocessType">
\brief：音频前处理 TXEAudioPreprocessType

</member>
        <member name="T:TXEAudioCaptureSrcType">
\brief：音频数据源类型

</member>
        <member name="T:TXEAudioChannels">
@}
\brief：音频声道数

</member>
        <member name="M:ILiteAVStreamDataSource.onStop">
\brief SDK在不再需要用到该数据源的时候会调用该方法以通知数据源停止工作

</member>
        <member name="M:ILiteAVStreamDataSource.onStart">
\brief SDK在成功请求到视频位后会调用该方法以通知数据源开始工作

</member>
        <member name="M:ILiteAVDeviceCollection.release">
\brief 遍历完设备后，调用release释放资源。

</member>
        <member name="M:ILiteAVDeviceCollection.getDevicePID(System.UInt32)">
\return 设备PID，字符编码格式是UTF-8

</member>
        <member name="M:ILiteAVDeviceCollection.getDeviceName(System.UInt32)">
\return 设备名称，字符编码格式是UTF-8

</member>
        <member name="M:ILiteAVDeviceCollection.getCount">
\return 设备个数

</member>
        <member name="T:ILiteAVDeviceCollection">
\brief【获取SDK设备信息接口 ITRTCDeviceCollection】

\desc 您可以通过 getMicDevicesList()/getSpeakerDevicesList()/getMicDevicesList 枚举硬件设备列表，列表通过 ITRTCDeviceCollection 返回
</member>
        <member name="M:ILiteAVDeviceInfo.release">
\brief 获取完设备信息后，调用release释放资源。

</member>
        <member name="M:ILiteAVDeviceInfo.getDevicePID">
\return 设备PID，字符编码格式是UTF-8

</member>
        <member name="M:ILiteAVDeviceInfo.getDeviceName">
\return 设备名称，字符编码格式是UTF-8

</member>
        <member name="T:ILiteAVDeviceInfo">
\brief【获取SDK当前使用设备信息 ILiteAVDeviceInfo】

\desc 您可以通过 setCurrentCameraDevice()/getCurrentMicDevice()/getCurrentSpeakerDevice 获取当前使用设备。
</member>
        <member name="M:ILiteAVScreenCaptureSourceList.release">
\brief 遍历完窗口列表后，调用release释放资源。

</member>
        <member name="M:ILiteAVScreenCaptureSourceList.getSourceInfo(System.UInt32)">
\return 窗口信息

</member>
        <member name="M:ILiteAVScreenCaptureSourceList.getCount">
\return 窗口个数

</member>
        <member name="T:LiteAVScreenCaptureSourceType">
\brief【屏幕分享窗口信息 TRTCScreenCaptureSourceInfo】

\desc 您可以通过 getScreenCaptureSources() 枚举可共享的窗口列表，列表通过 ITRTCScreenCaptureSourceList 返回
</member>
        <member name="T:LiteAVAudioFrame">
音频帧数据

</member>
        <member name="T:LiteAVVideoFrame">
视频帧数据

</member>
        <member name="T:LiteAVVideoRotation">
视频画面旋转方向

</member>
        <member name="T:LiteAVAudioFrameFormat">
音频帧的格式

</member>
        <member name="T:LiteAVVideoPixelFormat">
视频帧的格式

</member>
        <member name="T:LiteAVVideoBufferType">
@addtogroup TRTCCloudDef_cplusplus
@{
视频数据结构类型

</member>
        <member name="M:getLiteAvSDKVersion">
@name SDK 导出基础功能接口
@{
 \brief 获取 SDK 版本号

 \return 返回 UTF-8 编码的版本号。

</member>
        <member name="M:ManageLiteAV.TXLivePusher.showDebugView(System.Int32)">
            <summary>
显示仪表盘（状态统计和事件消息浮层view），方便调试
<param name="showType">0: 不显示 1: 显示精简版 2: 显示全量版</param></summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setNearestIP(System.Boolean)">
            <summary>
设置是否就近选路
<param name="enable">true表示启用，false表示禁用，SDK 默认为true</param></summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setPauseVideo(System.Boolean)">
            <summary>
设置视频暂停
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoFPS(System.UInt32)">
            <summary>
设置视频帧率
</summary>
            <param name="fps">视频帧率，默认值为15，重启后生效</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRateMax(System.Int32)">
            <summary>
配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，该函数调用均视为无效
</summary>
            <param name="videoBitrateMax">允许 SDK 输出的最小视频码率, 比如 640x360 分辨率下这个值适合设置为 1000kbps</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRateMin(System.Int32)">
            <summary>
配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，该函数调用均视为无效
</summary>
            <param name="videoBitrateMin">允许 SDK 输出的最小视频码率，比如 640x360 分辨率下这个值适合设置为 300kbps</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setAutoAdjustStrategy(ManageLiteAV.TXEAutoAdjustStrategy)">
            <summary>
设置流控策略，即是否允许 SDK 根据当前网络情况调整视频码率，以避免网络上传速度不足导致的画面卡顿
</summary>
            <param name="strategy">参考 TXLiveTypeDef.h 中定义的 TXEAutoAdjustStrategy 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRate(System.UInt32)">
            <summary>
设置视频码率，注意，不是分辨率越高画面越清晰，是码率越高画面越清晰
</summary>
            <param name="bitrate">视频码率，单位 kbps， 比如 640x360 分辨率需要配合 800kbps 的视频码率</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setOutputYMirror(System.Boolean)">
            <summary>
设置推流画面的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRenderYMirror(System.Boolean)">
            <summary>
设置预览渲染的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setBeautyStyle(ManageLiteAV.TXEBeautyStyle,System.Int32,System.Int32)">
            <summary>
设置美颜和美白效果
</summary>
            <param name="beautyStyle">参考 TXLiveTypeDef.h 中定义的 TXEBeautyStyle 枚举值</param>
            <param name="beautyLevel">美颜级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显</param>
            <param name="whitenessLevel">美白级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoResolution(ManageLiteAV.TXEVideoResolution)">
            <summary>
设置视频分辨率
</summary>
            <param name="resolution">视频分辨率，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoQualityParamPreset(ManageLiteAV.TXEVideoQualityParamPreset)">
            <summary>
推流的画面质量预设选项
</summary>
            <param name="paramType">预设类型，参考 TXLiveTypeDef.h 中定义的 TXEVideoQualityParamPreset 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRotation(ManageLiteAV.TXEVideoRotation)">
            <summary>
设置图像的顺时针旋转角度
</summary>
            <param name="rotation">参考 TXLiveTypeDef.h 中定义的 TXEVideoRotation 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRenderMode(ManageLiteAV.TXERenderMode)">
            <summary>
设置图像的渲染（填充）模式
</summary>
            <param name="mode">参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setMute(System.Boolean)">
            <summary>
静音接口
</summary>
            <param name="mute">是否静音</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.switchCamera(System.Int32)">
            <summary>
切换摄像头，支持在推流中动态切换
</summary>
            <param name="cameraIndex">摄像头需要，取值返回：  0 ~ (摄像头个数 - 1)</param>
            <remarks>
指定要开启哪个摄像头的预览，如果只有一个摄像头，则设置为 0 ，否则，需要先用 enumCameras 获取 cameraIndex
cameraIndex ==  0   表示打开当前可用的第一个摄像头
cameraIndex == 1   表示打开当前可用的第二个摄像头
... ...
cameraIndex == -1   表示打开当前可用的全部摄像头，但是预览的是第一个，通过 switchCamera 来切换摄像头
Windows 下开启一个 USB 摄像头需要很长的电路和驱动启动时间（一般需要 1 - 3 秒），所以，如果您要实现较好的切换效果
推荐的做法是：switchCamera 时指定 cameraIndex 为 - 1 来打开全部摄像头 ，后续用 switchCamera 实现瞬间切换摄像头
</remarks>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopPush">
            <summary>
停止推流，注意推流 url 有排他性，也就是一个推流 Url 同时只能有一个推流端向上推流
若通过 startPreview 接口开启了预览，在调用这个接口前，请先调用 stopPreview 接口
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startPush(System.String)">
            <summary>
启动推流 (在 startPush 之前需要先 startPreview 启动摄像头预览，否则推送出去的数据流里只有音频)
</summary>
            <param name="url">合法的推流地址，腾讯云的推流 URL 都要求带有 txSecret 和 txTime 防盗链签名，如果您发现推流推不上去，请检查这两个签名是否合法</param>
            <returns>成功 or 失败，内存分配、资源申请失败等原因可能会导致返回失败</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.captureVideoSnapShot(System.String)">
            <summary>
推流的图像截图到本地
</summary>
            <param name="filePath">存储路径</param>
            <returns>0成功，非0失败：-1:失败，-2路径非法，-3文件存在，-4未推流</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setScreenCaptureParam(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
屏幕区域捕抓参数设置接口，startPreview(srcType = TXE_VIDEO_SRC_SDK_SCREEN..)前调用，默认捕抓整个主屏幕
</summary>
            <param name="captureHwnd">
指定捕抓窗口，如果captureHwnd不为NULL时，捕抓整个captureHwnd窗口大小,此时captureRect设置会失效，
如果captureHwnd为NULL时，则captureRect有效，捕抓主屏幕指定的区域：captureRect
</param>
            <param name="x">被捕抓窗口区域的坐标x，以左上角为准</param>
            <param name="y">被捕抓窗口区域的坐标y，以左上角为准</param>
            <param name="width">被捕抓窗口区域的宽度</param>
            <param name="height">被捕抓窗口区域的高度</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enumCaptureWindow">
            <summary>
枚举当前的可以捕抓的窗口，如果桌面同时存在多个窗口，那么此函数获取可采集的窗口句柄
</summary>
            <returns>当前可捕抓的窗口列表，每一个都分别表示窗口句柄和窗口名称的键值对</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopPreview">
            <summary>
关闭摄像头预览，stopPush 之前调用此函数并不会停止推流，会导致 SDK 只推送音频数据
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.updatePreview(System.IntPtr)">
            <summary>
重设摄像头预览区域，当您指定的 HWND 的窗口尺寸发生变化时，可以通过这个函数重新调整视频渲染区域
</summary>
            <param name="rendHwnd">承载预览画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startPreview(ManageLiteAV.TXEVideoCaptureSrcType,System.IntPtr)">
            <summary>
启动视频源预览
</summary>
            <param name="srcType">参考 TXLiveTypeDef.h 中定义的 TXEVideoCaptureSrcType 枚举值</param>
            <param name="rendHwnd">承载预览画面的 HWND，rendHwnd = null时无需预览视频</param>
            <param name="dataFormat">srcType指定为TXE_VIDEO_SRC_USER_DATA时生效，指定传入视频数据的格式</param>
            <returns>成功 or 失败，摄像头被占用可能会导致 camera 打开失败</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopAudioCapture">
            <summary>
关闭音频采集
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startAudioCapture(ManageLiteAV.TXEAudioCaptureSrcType)">
            <summary>
启动音频采集，SDK内部采用48K采样率，单声道，16位宽，实现很低延迟的实时音频通话的效果
</summary>
            <param name="srcType">音频数据源类型</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setAudioChannels(ManageLiteAV.TXEAudioChannels)">
            <summary>
设置音频声道数
</summary>
            <param name="channels">参考 TXLiveTypeDef.h 中定义的 TXEAudioChannels 枚举值，SDK 内部默认选择 TXE_AUDIO_CHANNELS_1 单声道</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enableAudioPreprocess(ManageLiteAV.TXEAudioPreprocessType,System.Boolean)">
            <summary>
设置系统声音前处理模式
默认开启AEC、AGC、NS，如需要关闭回声消除enableAudioPreprocess(TXE_AUDIO_PRETREATMENT_AEC, false);
</summary>
            <param name="preprocessType">参考 TXLiveTypeDef.h 中定义的 TXEAudioPreprocessType</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setSystemVoiceInputVolume(System.Int32)">
            <summary>
设置系统声音采集的音量（暂时不支持64位）
</summary>
            <param name="value">设置目标音量,取值范围[0,100]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.closeSystemVoiceInput">
            <summary>
关闭系统声音采集（暂时不支持64位）
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.openSystemVoiceInput(System.String)">
            <summary>
打开系统声音采集（暂时不支持64位）
</summary>
            <param name="szPlayerPath">播放器地址;如果用户此参数填空或不填，表示采集系统中的所有声音;
如果填入exe程序(如:酷狗、QQ音乐)所在路径, 将会启动此程序，并只采集此程序的声音; </param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.closeMicTest">
            <summary>
关闭麦克风测试
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.openMicTest">
            <summary>
打开麦克风测试
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enableMic(System.Boolean)">
            <summary>
关闭麦克风
</summary>
            <param name="enable">false为关闭麦克风采集，true为启用麦克风采集</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micVolumeIndication">
            <summary>
查询已选择麦克风的能量值，指示音量的大小
</summary>
            <returns>能量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setMicVolume(System.UInt32)">
            <summary>
设置已选择麦克风的音量
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micVolume">
            <summary>
查询已选择麦克风的音量
</summary>
            <returns>音量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.selectMicDevice(System.UInt32)">
            <summary>
选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风
</summary>
            <param name="index">麦克风设备的索引，要求index值小于 micDevices 接口的返回值的数组大小</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micDevices">
            <summary>
枚举当前可用的麦克风，如果一台Windows同时安装了多个麦克风，那么此函数获取可用的麦克风数量和名称
</summary>
            <returns>当前可用的麦克风列表，查询得到的字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enumCameras">
            <summary>
枚举当前可用的摄像头，如果一台Windows同时安装了多个摄像头，那么此函数获取可用的摄像头数量和名称
</summary>
            <returns>当前可用的摄像头列表</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setListener(ManageLiteAV.ITXLivePusherListener,System.IntPtr)">
            <summary>
设置回调 TXLivePusher 的回调代理，监听推流事件、以及获取音视频数据
</summary>
            <param name="listener">ITXLivePusherListener 类型的接口类</param>
            <param name="pUserData">一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.Dispose">
            <summary>
析构函数，C#代码中要求显示调用Dispose函数，来触发托管C++类析构函数
</summary>
        </member>
        <member name="M:ManageLiteAV.ITXLivePusherListener.onEventCallback(System.Int32,System.Collections.Generic.Dictionary`2{System.String,System.String},System.IntPtr)">
            <summary>
TXLivePusher的推流事件通知
</summary>
            <param name="eventId">事件ID, 见 TXLiveSDKEventDef.h 中的事件定义 - PushEvent</param>
            <param name="paramsDic">事件详情是一个 key-value 字典</param>
            <param name="pUserData">您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 0</param>
        </member>
        <member name="M:ManageLiteAV.ITXLivePlayerListener.onEventCallback(System.Int32,System.Collections.Generic.Dictionary`2{System.String,System.String},System.IntPtr)">
            <summary>
TXCSharpLivePlayer的播放事件通知
</summary>
            <param name="eventId">事件ID, 见 TXLiveSDKEventDef.h 中的事件定义 - PlayEvent</param>
            <param name="paramsDic">事件详情是一个 key-value 字典</param>
            <param name="pUserData">您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 0</param>
        </member>
        <member name="T:ManageLiteAV.PlayEvent">
            <summary>
播放事件列表
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SERVER_DISCONNECT">
            <summary>
RTMP服务器主动断开
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SHAKE_FAIL">
            <summary>
RTMP服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SEVER_CONN_FAIL">
            <summary>
RTMP服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_DNS_FAIL">
            <summary>
RTMP -DNS解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_FIRST_IDR_HW_DECODE_FAIL">
            <summary>
当前流硬解第一个I帧失败，SDK自动切软解
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_DISCONTINUITY">
            <summary>
当前视频帧不连续，可能丢帧
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_HW_ACCELERATION_FAIL">
            <summary>
硬解启动失败，采用软解
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_PLAY_LAG">
            <summary>
当前视频播放出现卡顿（用户直观感受）
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_RECV_DATA_LAG">
            <summary>
网络来包不稳：可能是下行带宽不足，或由于主播端出流不均匀
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_RECONNECT">
            <summary>
网络断连, 已启动自动重连 (自动重连连续失败超过三次会放弃)
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_AUDIO_DECODE_FAIL">
            <summary>
当前音频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_DECODE_FAIL">
            <summary>
当前视频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_ERR_GET_RTMP_ACC_URL_FAIL">
            <summary>
获取加速拉流地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_ERR_NET_DISCONNECT">
            <summary>
网络断连,且经多次重连抢救无效,可以放弃治疗,更多重试请自行重启播放
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_CHANGE_RESOLUTION">
            <summary>
视频分辨率改变
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_START_VIDEO_DECODER">
            <summary>
解码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_LOADING">
            <summary>
视频播放loading
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_END">
            <summary>
视频播放结束
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_PROGRESS">
            <summary>
视频播放进度
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_BEGIN">
            <summary>
视频播放开始
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_RCV_FIRST_I_FRAME">
            <summary>
渲染首个视频数据包(IDR)
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_RTMP_STREAM_BEGIN">
            <summary>
已经连接服务器，开始拉流
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_CONNECT_SUCC">
            <summary>
已经连接服务器
</summary>
        </member>
        <member name="T:ManageLiteAV.PushEvent">
            <summary>
推流事件列表
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SERVER_NO_DATA">
            <summary>
超过30s没有数据发送，主动断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SERVER_DISCONNECT">
            <summary>
RTMP服务器主动断开，请检查推流地址的合法性或防盗链有效期
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SHAKE_FAIL">
            <summary>
RTMP服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SEVER_CONN_FAIL">
            <summary>
RTMP服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_DNS_FAIL">
            <summary>
RTMP -DNS解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_VIDEO_ENCODE_BITRATE_OVERFLOW">
            <summary>
视频编码码率异常，警告
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_BEAUTYSURFACE_VIEW_INIT_FAIL">
            <summary>
视频编码码率异常，警告
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_VIDEO_ENCODE_FAIL">
            <summary>
视频编码失败,非致命错,内部会重启编码器
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_HW_ACCELERATION_FAIL">
            <summary>
硬编码启动失败，采用软编码
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_RECONNECT">
            <summary>
网络断连, 已启动自动重连 (自动重连连续失败超过三次会放弃)
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_CAMERA_OCCUPY">
            <summary>
摄像头正在被占用中，可尝试打开其他摄像头（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_NET_DISCONNECT">
            <summary>
网络断连,且经多次重连抢救无效,可以放弃治疗,更多重试请自行重启推流
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_UNSUPPORTED_SAMPLERATE">
            <summary>
不支持的音频采样率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_UNSUPPORTED_RESOLUTION">
            <summary>
不支持的视频分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_AUDIO_ENCODE_FAIL">
            <summary>
音频编码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_VIDEO_ENCODE_FAIL">
            <summary>
视频编码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_OPEN_MIC_FAIL">
            <summary>
打开麦克风失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_OPEN_CAMERA_FAIL">
            <summary>
打开摄像头失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_CLOSED">
            <summary>
关闭摄像头完成（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_AVAILABLE">
            <summary>
摄像头设备重新可用（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_REMOVED">
            <summary>
摄像头设备已被移出（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_START_VIDEO_ENCODER">
            <summary>
编码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_FIRST_FRAME_AVAILABLE">
            <summary>
首帧画面采集完成
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CHANGE_BITRATE">
            <summary>
推流动态调整码率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CHANGE_RESOLUTION">
            <summary>
推流动态调整分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_OPEN_CAMERA_SUCC">
            <summary>
打开摄像头成功
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_PUSH_BEGIN">
            <summary>
已经与服务器握手完毕,开始推流
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CONNECT_SUCC">
            <summary>
已经连接推流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CODEC_DROP_CNT">
            <summary>
编解码队列DROPCNT
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CODEC_CACHE">
            <summary>
编解码缓冲大小
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CACHE_SIZE">
            <summary>
缓冲区大小，缓冲区越大，说明当前上行带宽不足以消费掉已经生产的视频数据
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_NET_JITTER">
            <summary>
网络抖动情况，抖动越大，网络越不稳定
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_NET_SPEED">
            <summary>
当前的发送速度
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_GOP">
            <summary>
当前视频I帧间隔 ，也就是视频编码器每个I帧之间的间隔，单位S
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_FPS">
            <summary>
当前视频帧率，也就是视频编码器每条生产了多少帧画面
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_AUDIO_BITRATE">
            <summary>
当前音频编码器输出的比特率，也就是编码器每秒生产了多少音频数据，单位 KBPS
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_BITRATE">
            <summary>
当前视频编码器输出的比特率，也就是编码器每秒生产了多少视频数据，单位 KBPS
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CPU_USAGE_D">
            <summary>
设备总CPU占用
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CPU_USAGE">
            <summary>
cpu使用率
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.TXE_STATUS_DOWNLOAD_EVENT">
            <summary>
拉流相关数据
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.TXE_STATUS_UPLOAD_EVENT">
            <summary>
推流相关数据
</summary>
        </member>
        <member name="T:ManageLiteAV.Common">
            <summary>
回调状态定义 ,目前提供视频速度、音频速度、帧率、视频缓冲、音频缓冲、视频大小、服务器地址信息
状态键名定义
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEPlayType">
            <summary>
设置播放类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEPlayType.PLAY_TYPE_LIVE_RTMP_ACC">
            <summary>
RTMP直播加速播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEPlayType.PLAY_TYPE_LIVE_RTMP">
            <summary>
RTMP直播
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEBeautyStyle">
            <summary>
设置美颜风格
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_BLUR">
            <summary>
朦胧
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_NATURE">
            <summary>
自然
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_SMOOTH">
            <summary>
光滑
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEOutputVideoFormat">
            <summary>
设置输出的视频格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_FORMAT_BGRA">
            <summary>
RBGA格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_FORMAT_YUV420">
            <summary>
yuv420格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT">
            <summary>
不输出数据
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoQualityParamPreset">
            <summary>
推流的画面质量预设选项
- 1.2.0 版本开始引入推流画质接口 setVideoQualityParamPreset 用于傻瓜化的选择推流画质效果。
- TXLivePush::setVideoQualityParamPreset 内部通过预先配置不同的视频参数调整到对应的质量
- 目前支持的几种画质选项如下：

（1）标清 - 采用 640 * 360 级别分辨率，码率会在 400kbps - 800kbps 之间自适应，如果主播的网络条件不理想，
     直播的画质会偏模糊，但总体卡顿率不会太高。
     Android平台下这一档我们会选择采用软编码，软编码虽然更加耗电，但在运动画面的表现要优于硬编码。

（2）高清 - 采用 960 * 540 级别分辨率，码率会锁定在 1200kbps，如果主播的网络条件不理想，直播画质不会有变化，
     但这段时间内会出现频繁的卡顿和跳帧。 两个平台下，这一档我们都会采用硬编码。

（3）超清 - 采用 1280 * 720 级别分辨率，码率会锁定在 1500kbps，对主播的上行带宽要求比较高，适合观看端是大屏的业务场景。

（4）大主播 - 顾名思义，连麦中大主播使用，因为是观众的主画面，追求清晰一些的效果，所以分辨率会优先选择 960 * 540。

（5）小主播 - 顾名思义，连麦中小主播使用，因为是小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

（6）实时音视频通话 - 时延低，小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

（7）静态画质场景   - 画面变动小，能保证非常低的码率下，视频相对清晰，如截屏正在播放的ppt，1080p，400kb左右码率。
</summary>
            <remarks>
使用 setVideoQualityParamPreset 之后，依然可以使用setVideoBitRate、setVideoFPS、setAutoAdjustStrategy等设置自定义画质，以最后一次的设置为准。
</remarks>
        </member>
        <member name="T:ManageLiteAV.TXEAutoAdjustStrategy">
            <summary>
目前SDK支持的流控策略
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_REALTIME_VIDEOCHAT_STRATEGY">
            <summary>
适用于实时音视频通话的流控策略，也就是 VIDEO_QUALITY_REALTIME_VIDEOCHAT 所使用流控策略，该策略敏感度比较高，网络稍有风吹草动就会进行自适应调整
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_LIVEPUSH_RESOLUTION_STRATEGY">
            <summary>
适用于普通直播推流的流控策略，是对 LIVEPUSH_STRATEGY 的升级版本，差别是该模式下 SDK 会根据当前码率自动调整出适合的分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_LIVEPUSH_STRATEGY">
            <summary>
适用于普通直播推流的流控策略，该策略敏感度比较低，会缓慢适应带宽变化，有利于在带宽波动时保持画面的清晰度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_NONE">
            <summary>
无流控，恒定使用 setVideoBitRate 指定的视频码率
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoRotation">
            <summary>
画面顺时针旋转角度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_270">
            <summary>
顺时针旋转270度，最终图像的宽度和高度互换
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_180">
            <summary>
顺时针旋转180度，最终图像颠倒
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_90">
            <summary>
顺时针旋转90度，最终图像的宽度和高度互换
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_NONE">
            <summary>
保持原图像的角度
</summary>
        </member>
        <member name="T:ManageLiteAV.TXERenderMode">
            <summary>
目前SDK支持的画面渲染模式，两种模式均会严格保持画面的原始宽高比
</summary>
        </member>
        <member name="F:ManageLiteAV.TXERenderMode.TXE_RENDER_MODE_FILLSCREEN">
            <summary>
填充，此模式下画面无黑边，但是会裁剪掉一部分超出渲染区域的部分，裁剪模式为居中裁剪
</summary>
        </member>
        <member name="F:ManageLiteAV.TXERenderMode.TXE_RENDER_MODE_ADAPT">
            <summary>
适应，此模式下会显示整个画面的全部内容，但可能有黑边的存在
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoResolution">
            <summary>
推流视频分辨率，普屏 4:3和宽屏16:9两种分类
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoCaptureSrcType">
            <summary>
视频数据源类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioPreprocessType">
            <summary>
音频前处理选项
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioCaptureSrcType">
            <summary>
音频数据源类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioChannels">
            <summary>
音频声道数
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestVideoFrame(LiteAVVideoFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestAudioFrame(LiteAVAudioFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusher.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusher.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusherCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayerCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestVideoFrame(LiteAVVideoFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestAudioFrame(LiteAVAudioFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayer.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusherCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayerCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoStreamType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoFillMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoRotation'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCBeautyStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoPixelFormat'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCAppScene.TRTCAppSceneVideoCall'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCAppScene.TRTCAppSceneLIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCAppScene.TRTCAppSceneAudioCall'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCAppScene.TRTCAppSceneVoiceChatRoom'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCAppScene'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCRoleType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCQosControlMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoQosPreference'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.ITRTCDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.ITRTCDeviceInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCParams'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.sdkAppId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.userId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.userSig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.roomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.role'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.streamId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.privateMapKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVideoEncParam'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCVideoEncParam.videoResolution'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCVideoEncParam.resMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCVideoEncParam.videoFps'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCVideoEncParam.enableAdjustRes'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCNetworkQosParam.preference'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCNetworkQosParam.controlMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCVolumeInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCSpeedTestResult'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Manual'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_PureAudio'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_PresetLayout'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCTranscodingConfigMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCTranscodingConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.videoWidth'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.videoHeight'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.videoBitrate'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.videoFramerate'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.videoGOP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.backgroundColor'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.audioSampleRate'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.audioBitrate'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCTranscodingConfig.audioChannels'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ManageLiteAV.TRTCAudioRecordingParams'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestVideoFrame(LiteAVVideoFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ILiteAVStreamDataSource.onRequestAudioFrame(LiteAVAudioFrame*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCAppSceneVideoCall'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCAppSceneLIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCAppSceneAudioCall'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCAppSceneVoiceChatRoom'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloudCallback.onEnterRoom(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ManageLiteAV.ITRTCCloud.enterRoom(ManageLiteAV.TRTCParams@,ManageLiteAV.TRTCAppScene)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ManageLiteAV.ITRTCCloud.setMixTranscodingConfig(ManageLiteAV.TRTCTranscodingConfig)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ManageLiteAV.ITRTCCloud.startAudioRecording(ManageLiteAV.TRTCAudioRecordingParams@)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.enterRoom(TRTCParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,TRTCAppScene)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.setLocalVideoRenderCallback(LiteAVVideoPixelFormat,LiteAVVideoBufferType,ITRTCVideoRenderCallback*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.setRemoteVideoRenderCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,LiteAVVideoPixelFormat,LiteAVVideoBufferType,ITRTCVideoRenderCallback*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITRTCCloud.setAudioFrameCallback(ITRTCAudioFrameCallback*)'. -->
    </members>
</doc>