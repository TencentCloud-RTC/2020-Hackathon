!function (t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.TEduBoard = e() : t.TEduBoard = e()
}(window, function () {
    return function (t) {
        var e = {};

        function i(r) {
            if (e[r]) return e[r].exports;
            var o = e[r] = {i: r, l: !1, exports: {}};
            return t[r].call(o.exports, o, o.exports, i), o.l = !0, o.exports
        }

        return i.m = t, i.c = e, i.d = function (t, e, r) {
            i.o(t, e) || Object.defineProperty(t, e, {enumerable: !0, get: r})
        }, i.r = function (t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(t, "__esModule", {value: !0})
        }, i.t = function (t, e) {
            if (1 & e && (t = i(t)), 8 & e) return t;
            if (4 & e && "object" == typeof t && t && t.__esModule) return t;
            var r = Object.create(null);
            if (i.r(r), Object.defineProperty(r, "default", {
                enumerable: !0,
                value: t
            }), 2 & e && "string" != typeof t) for (var o in t) i.d(r, o, function (e) {
                return t[e]
            }.bind(null, o));
            return r
        }, i.n = function (t) {
            var e = t && t.__esModule ? function () {
                return t.default
            } : function () {
                return t
            };
            return i.d(e, "a", e), e
        }, i.o = function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e)
        }, i.p = "", i(i.s = 1)
    }([function (t, e) {
        t.exports = r;
        var i = null;
        try {
            i = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports
        } catch (t) {
        }

        function r(t, e, i) {
            this.low = 0 | t, this.high = 0 | e, this.unsigned = !!i
        }

        function o(t) {
            return !0 === (t && t.__isLong__)
        }

        r.prototype.__isLong__, Object.defineProperty(r.prototype, "__isLong__", {value: !0}), r.isLong = o;
        var s = {}, n = {};

        function a(t, e) {
            var i, r, o;
            return e ? (o = 0 <= (t >>>= 0) && t < 256) && (r = n[t]) ? r : (i = d(t, (0 | t) < 0 ? -1 : 0, !0), o && (n[t] = i), i) : (o = -128 <= (t |= 0) && t < 128) && (r = s[t]) ? r : (i = d(t, t < 0 ? -1 : 0, !1), o && (s[t] = i), i)
        }

        function h(t, e) {
            if (isNaN(t)) return e ? T : m;
            if (e) {
                if (t < 0) return T;
                if (t >= g) return O
            } else {
                if (t <= -f) return S;
                if (t + 1 >= f) return E
            }
            return t < 0 ? h(-t, e).neg() : d(t % p | 0, t / p | 0, e)
        }

        function d(t, e, i) {
            return new r(t, e, i)
        }

        r.fromInt = a, r.fromNumber = h, r.fromBits = d;
        var l = Math.pow;

        function u(t, e, i) {
            if (0 === t.length) throw Error("empty string");
            if ("NaN" === t || "Infinity" === t || "+Infinity" === t || "-Infinity" === t) return m;
            if ("number" == typeof e ? (i = e, e = !1) : e = !!e, (i = i || 10) < 2 || 36 < i) throw RangeError("radix");
            var r;
            if ((r = t.indexOf("-")) > 0) throw Error("interior hyphen");
            if (0 === r) return u(t.substring(1), e, i).neg();
            for (var o = h(l(i, 8)), s = m, n = 0; n < t.length; n += 8) {
                var a = Math.min(8, t.length - n), d = parseInt(t.substring(n, n + a), i);
                if (a < 8) {
                    var c = h(l(i, a));
                    s = s.mul(c).add(h(d))
                } else s = (s = s.mul(o)).add(h(d))
            }
            return s.unsigned = e, s
        }

        function c(t, e) {
            return "number" == typeof t ? h(t, e) : "string" == typeof t ? u(t, e) : d(t.low, t.high, "boolean" == typeof e ? e : t.unsigned)
        }

        r.fromString = u, r.fromValue = c;
        var p = 4294967296, g = p * p, f = g / 2, _ = a(1 << 24), m = a(0);
        r.ZERO = m;
        var T = a(0, !0);
        r.UZERO = T;
        var y = a(1);
        r.ONE = y;
        var b = a(1, !0);
        r.UONE = b;
        var D = a(-1);
        r.NEG_ONE = D;
        var E = d(-1, 2147483647, !1);
        r.MAX_VALUE = E;
        var O = d(-1, -1, !0);
        r.MAX_UNSIGNED_VALUE = O;
        var S = d(0, -2147483648, !1);
        r.MIN_VALUE = S;
        var B = r.prototype;
        B.toInt = function () {
            return this.unsigned ? this.low >>> 0 : this.low
        }, B.toNumber = function () {
            return this.unsigned ? (this.high >>> 0) * p + (this.low >>> 0) : this.high * p + (this.low >>> 0)
        }, B.toString = function (t) {
            if ((t = t || 10) < 2 || 36 < t) throw RangeError("radix");
            if (this.isZero()) return "0";
            if (this.isNegative()) {
                if (this.eq(S)) {
                    var e = h(t), i = this.div(e), r = i.mul(e).sub(this);
                    return i.toString(t) + r.toInt().toString(t)
                }
                return "-" + this.neg().toString(t)
            }
            for (var o = h(l(t, 6), this.unsigned), s = this, n = ""; ;) {
                var a = s.div(o), d = (s.sub(a.mul(o)).toInt() >>> 0).toString(t);
                if ((s = a).isZero()) return d + n;
                for (; d.length < 6;) d = "0" + d;
                n = "" + d + n
            }
        }, B.getHighBits = function () {
            return this.high
        }, B.getHighBitsUnsigned = function () {
            return this.high >>> 0
        }, B.getLowBits = function () {
            return this.low
        }, B.getLowBitsUnsigned = function () {
            return this.low >>> 0
        }, B.getNumBitsAbs = function () {
            if (this.isNegative()) return this.eq(S) ? 64 : this.neg().getNumBitsAbs();
            for (var t = 0 != this.high ? this.high : this.low, e = 31; e > 0 && 0 == (t & 1 << e); e--) ;
            return 0 != this.high ? e + 33 : e + 1
        }, B.isZero = function () {
            return 0 === this.high && 0 === this.low
        }, B.eqz = B.isZero, B.isNegative = function () {
            return !this.unsigned && this.high < 0
        }, B.isPositive = function () {
            return this.unsigned || this.high >= 0
        }, B.isOdd = function () {
            return 1 == (1 & this.low)
        }, B.isEven = function () {
            return 0 == (1 & this.low)
        }, B.equals = function (t) {
            return o(t) || (t = c(t)), (this.unsigned === t.unsigned || this.high >>> 31 != 1 || t.high >>> 31 != 1) && this.high === t.high && this.low === t.low
        }, B.eq = B.equals, B.notEquals = function (t) {
            return !this.eq(t)
        }, B.neq = B.notEquals, B.ne = B.notEquals, B.lessThan = function (t) {
            return this.comp(t) < 0
        }, B.lt = B.lessThan, B.lessThanOrEqual = function (t) {
            return this.comp(t) <= 0
        }, B.lte = B.lessThanOrEqual, B.le = B.lessThanOrEqual, B.greaterThan = function (t) {
            return this.comp(t) > 0
        }, B.gt = B.greaterThan, B.greaterThanOrEqual = function (t) {
            return this.comp(t) >= 0
        }, B.gte = B.greaterThanOrEqual, B.ge = B.greaterThanOrEqual, B.compare = function (t) {
            if (o(t) || (t = c(t)), this.eq(t)) return 0;
            var e = this.isNegative(), i = t.isNegative();
            return e && !i ? -1 : !e && i ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1
        }, B.comp = B.compare, B.negate = function () {
            return !this.unsigned && this.eq(S) ? S : this.not().add(y)
        }, B.neg = B.negate, B.add = function (t) {
            o(t) || (t = c(t));
            var e = this.high >>> 16, i = 65535 & this.high, r = this.low >>> 16, s = 65535 & this.low,
                n = t.high >>> 16, a = 65535 & t.high, h = t.low >>> 16, l = 0, u = 0, p = 0, g = 0;
            return p += (g += s + (65535 & t.low)) >>> 16, u += (p += r + h) >>> 16, l += (u += i + a) >>> 16, l += e + n, d((p &= 65535) << 16 | (g &= 65535), (l &= 65535) << 16 | (u &= 65535), this.unsigned)
        }, B.subtract = function (t) {
            return o(t) || (t = c(t)), this.add(t.neg())
        }, B.sub = B.subtract, B.multiply = function (t) {
            if (this.isZero()) return m;
            if (o(t) || (t = c(t)), i) return d(i.mul(this.low, this.high, t.low, t.high), i.get_high(), this.unsigned);
            if (t.isZero()) return m;
            if (this.eq(S)) return t.isOdd() ? S : m;
            if (t.eq(S)) return this.isOdd() ? S : m;
            if (this.isNegative()) return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
            if (t.isNegative()) return this.mul(t.neg()).neg();
            if (this.lt(_) && t.lt(_)) return h(this.toNumber() * t.toNumber(), this.unsigned);
            var e = this.high >>> 16, r = 65535 & this.high, s = this.low >>> 16, n = 65535 & this.low,
                a = t.high >>> 16, l = 65535 & t.high, u = t.low >>> 16, p = 65535 & t.low, g = 0, f = 0, T = 0, y = 0;
            return T += (y += n * p) >>> 16, f += (T += s * p) >>> 16, T &= 65535, f += (T += n * u) >>> 16, g += (f += r * p) >>> 16, f &= 65535, g += (f += s * u) >>> 16, f &= 65535, g += (f += n * l) >>> 16, g += e * p + r * u + s * l + n * a, d((T &= 65535) << 16 | (y &= 65535), (g &= 65535) << 16 | (f &= 65535), this.unsigned)
        }, B.mul = B.multiply, B.divide = function (t) {
            if (o(t) || (t = c(t)), t.isZero()) throw Error("division by zero");
            var e, r, s;
            if (i) return this.unsigned || -2147483648 !== this.high || -1 !== t.low || -1 !== t.high ? d((this.unsigned ? i.div_u : i.div_s)(this.low, this.high, t.low, t.high), i.get_high(), this.unsigned) : this;
            if (this.isZero()) return this.unsigned ? T : m;
            if (this.unsigned) {
                if (t.unsigned || (t = t.toUnsigned()), t.gt(this)) return T;
                if (t.gt(this.shru(1))) return b;
                s = T
            } else {
                if (this.eq(S)) return t.eq(y) || t.eq(D) ? S : t.eq(S) ? y : (e = this.shr(1).div(t).shl(1)).eq(m) ? t.isNegative() ? y : D : (r = this.sub(t.mul(e)), s = e.add(r.div(t)));
                if (t.eq(S)) return this.unsigned ? T : m;
                if (this.isNegative()) return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
                if (t.isNegative()) return this.div(t.neg()).neg();
                s = m
            }
            for (r = this; r.gte(t);) {
                e = Math.max(1, Math.floor(r.toNumber() / t.toNumber()));
                for (var n = Math.ceil(Math.log(e) / Math.LN2), a = n <= 48 ? 1 : l(2, n - 48), u = h(e), p = u.mul(t); p.isNegative() || p.gt(r);) p = (u = h(e -= a, this.unsigned)).mul(t);
                u.isZero() && (u = y), s = s.add(u), r = r.sub(p)
            }
            return s
        }, B.div = B.divide, B.modulo = function (t) {
            return o(t) || (t = c(t)), i ? d((this.unsigned ? i.rem_u : i.rem_s)(this.low, this.high, t.low, t.high), i.get_high(), this.unsigned) : this.sub(this.div(t).mul(t))
        }, B.mod = B.modulo, B.rem = B.modulo, B.not = function () {
            return d(~this.low, ~this.high, this.unsigned)
        }, B.and = function (t) {
            return o(t) || (t = c(t)), d(this.low & t.low, this.high & t.high, this.unsigned)
        }, B.or = function (t) {
            return o(t) || (t = c(t)), d(this.low | t.low, this.high | t.high, this.unsigned)
        }, B.xor = function (t) {
            return o(t) || (t = c(t)), d(this.low ^ t.low, this.high ^ t.high, this.unsigned)
        }, B.shiftLeft = function (t) {
            return o(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? d(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : d(0, this.low << t - 32, this.unsigned)
        }, B.shl = B.shiftLeft, B.shiftRight = function (t) {
            return o(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? d(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : d(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned)
        }, B.shr = B.shiftRight, B.shiftRightUnsigned = function (t) {
            if (o(t) && (t = t.toInt()), 0 == (t &= 63)) return this;
            var e = this.high;
            return t < 32 ? d(this.low >>> t | e << 32 - t, e >>> t, this.unsigned) : d(32 === t ? e : e >>> t - 32, 0, this.unsigned)
        }, B.shru = B.shiftRightUnsigned, B.shr_u = B.shiftRightUnsigned, B.toSigned = function () {
            return this.unsigned ? d(this.low, this.high, !1) : this
        }, B.toUnsigned = function () {
            return this.unsigned ? this : d(this.low, this.high, !0)
        }, B.toBytes = function (t) {
            return t ? this.toBytesLE() : this.toBytesBE()
        }, B.toBytesLE = function () {
            var t = this.high, e = this.low;
            return [255 & e, e >>> 8 & 255, e >>> 16 & 255, e >>> 24, 255 & t, t >>> 8 & 255, t >>> 16 & 255, t >>> 24]
        }, B.toBytesBE = function () {
            var t = this.high, e = this.low;
            return [t >>> 24, t >>> 16 & 255, t >>> 8 & 255, 255 & t, e >>> 24, e >>> 16 & 255, e >>> 8 & 255, 255 & e]
        }, r.fromBytes = function (t, e, i) {
            return i ? r.fromBytesLE(t, e) : r.fromBytesBE(t, e)
        }, r.fromBytesLE = function (t, e) {
            return new r(t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24, t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24, e)
        }, r.fromBytesBE = function (t, e) {
            return new r(t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7], t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3], e)
        }
    }, function (t, e, i) {
        "use strict";
        i.r(e);
        var r = function (t, e) {
            this.user = t, this.type = e.type, this.seq = e.seq
        };

        function o() {
            this.VERSION = "2.0.0_RC2", this.NATIVEVERSION = "web", this.PLATFORM = "web", this.SERVER_URL = "https://yun.tim.qq.com/v4/ilvb_edu/whiteboard?contenttype=json&sdkappid=", this.TEST_SERVER_URL = "https://test.tim.qq.com/v4/ilvb_test/whiteboard?contenttype=json&sdkappid=", this.COS_SERVER_URL = "https://cloud.tim.qq.com/v4/ilvb_cos/cos", this.TEST_COS_SERVER_URL = "https://cloud-test.tim.qq.com/v4/ilvb_cos_test/cos", this.WHITELIST_SERVER_URL = "https://yun.tim.qq.com/v4/ilvb_edu/whitelist?contenttype=json&sdkappid=", this.TEST_WHITELIST_SERVER_URL = "https://test.tim.qq.com/v4/ilvb_test/whitelist?contenttype=json&sdkappid=", this.SUB_CMD = {
                GET_BOARD_DATA: "get_board_data",
                REPORT_BOARD_DATA: "report_board_data"
            }, this.COMMON_GROUP = "#DEFAULT", this.COMMON_DEFAULT_BOARD = "#DEFAULT", this.THIN = 100, this.RADIUS = 100, this.TEXT_MAX_LENGTH = 140, this.TEXT_SIZE = 320, this.TEXT_COLOR = 0, this.TEXT_FONT_FAMILY = "sans-serif,serif,monospace", this.TEXT_FONT_STYLE = {
                NORMAL: 0,
                BOLD: 1,
                ITALIC: 2,
                BOLD_ITALIC: 3
            }, this.FILE_TYPE = {IMG: 0, H5: 1}, this.PROTOCOL_ACTION = {
                LINE_START_ACTION: 1,
                LINE_MOVE_ACTION: 2,
                LINE_END_ACTION: 3,
                RASER_SHOW_ACTION: 6,
                RASER_HIDE_ACTION: 7,
                ERASER_ACTION: 8,
                MOVE_LINE_GRAPH_ACTION: 9,
                GRAPH_LINE_ACTION: 10,
                GRAPH_CIRCLE_ACTION: 11,
                GRAPH_RECT_ACTION: 12,
                INPUT_TEXT_ACTION: 13,
                GRAPH_CLEAR_ALL_ACTION: 101,
                GRAPH_CLEAR_ACTION: 102,
                FILE_CLEAR_ACTION: 103,
                RESET_DATA_ACTION: 104,
                SET_BOARD_RATIO_ACTION: 105,
                UPDATE_BG_IMG_ACTION: 201,
                DELETE_BG_IMG_ACTION: 202,
                UPDATE_BG_COLOR_ACTION: 203,
                BOARD_MOVE_SCALE_ACTION: 301,
                SWITCH_ACTION: 401,
                ADD_FILE_ACTION: 501
            }
        }

        o.prototype.setPlatform = function (t) {
            this.PLATFORM = t
        }, o.prototype.setNativeVersion = function (t) {
            this.NATIVEVERSION = t
        };
        var s = new o, n = {
            decimalToRgba(t) {
                var e = [];
                return t.replace(/../g, function (t) {
                    e.push(parseInt(t, 16))
                }), "rgba(" + e.join(",") + ",1)"
            },
            hexToRgba(t) {
                var e;
                if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(t)) return 3 == (e = t.substring(1).split("")).length && (e = [e[0], e[0], e[1], e[1], e[2], e[2]]), t = "#" + e.join(""), "rgba(" + parseInt("0x" + t.slice(1, 3)) + "," + parseInt("0x" + t.slice(3, 5)) + "," + parseInt("0x" + t.slice(5, 7)) + ",1)"
            },
            rgbaToDecimal(t) {
                for (var e = t.toString().match(/\d+/g), i = "", r = 0; r < 3; r++) i += ("0" + Number(e[r]).toString(16)).slice(-2);
                return i
            },
            dealColor(t) {
                if (t < 0) return "rgba(" + (t >> 24 & 255) + "," + (t >> 16 & 255) + "," + (t >> 8 & 255) + ",1)";
                var e = parseInt(t).toString(16);
                return e = (e = "000000" + (e = e.substr(0, e.length - 2))).substring(e.length - 6, e.length), this.decimalToRgba(e)
            },
            formatColor(t) {
                var e = this.rgbaToDecimal(t);
                return parseInt(e + "ff", 16)
            },
            getEffectivePoint: (t, e) => (t <= 0 ? t = Math.floor(e / 2) : t >= 1e4 && (t = 1e4 - Math.floor(e / 2)), t),
            getAVSdkTimestamp() {
                var t = Date.now() + "", e = t.substring(0, 5) + "00000000", i = t.substr(5),
                    r = parseInt(e, 10).toString(2).substr(-32);
                return parseInt(r, 2) + (4294967295 & i)
            },
            getTimeStamp: () => (new Date).getTime(),
            getSecondTime() {
                return parseInt(this.getTimeStamp() / 1e3)
            },
            getTimeDiff: t => (new Date).getTime() - t,
            boardId2Fid: t => t.substring(t.indexOf("#")),
            boardId2Uid(t) {
                if (t === s.COMMON_DEFAULT_BOARD) return "";
                var e = "";
                try {
                    e = (e = t.substring(0, t.match(/_\d+_\d+_#\w+$/).index)).substring(e.indexOf("_") + 1)
                } catch (t) {
                }
                return e
            },
            boardIdGetSeq: t => t.match(/\d+_#/)[0].replace(/\D/gi, ""),
            isCosUrl: t => t.indexOf("myqcloud.com") > -1 && t.indexOf("cos") > -1,
            cosUrlExtractFileName(t) {
                t.indexOf("?") > -1 && (t = t.substring(0, t.indexOf("?")));
                var e = t.substring(t.lastIndexOf("/") + 1);
                return t.indexOf("-1257240443") > -1 && e.match(/\d+_/) && (e = e.substr(e.match(/^\d+_/)[0].length)), decodeURIComponent(e)
            },
            fileDownLoadUrlToPreviewUrl(t) {
                t.startsWith("https") || (t = t.startsWith("http") ? t.replace("http", "https") : "https://" + t), t.indexOf("?") > -1 && (t = t.substring(0, t.indexOf("?")));
                var e = "//";
                t.indexOf(e) > -1 && (t = t.substring(t.indexOf(e) + e.length)), e = ".";
                var i = t.indexOf(e);
                return e = ".com", "https://" + t.substr(0, i) + ".preview.myqcloud.com" + t.substring(t.indexOf(e) + e.length) + "?cmd=doc_preview&of=pic&page="
            },
            fontStyle2CanvasFontStyle(t) {
                var e = "";
                return 0 === t ? e = "" : 1 === t ? e = "bold" : 2 === t ? e = "italic" : 3 === t && (e = "italic bold"), e + " "
            }
        };

        function a(t, e) {
            this.user = t, this.type = "line", this.seq = e.belongSeq, this.belongSeq = e.belongSeq, this.show = e.show, this.status = "begin", this.select = !1, this.color = e.color, this.time = n.getTimeStamp(), this.thin = e.thin, this.startSeq = e.belongSeq, this.endSeq = 0, this.lines = [{
                x: e.x,
                y: e.y,
                belongSeq: e.belongSeq,
                seq: e.seq
            }], this.border = {maxX: e.x, maxY: e.y, minX: e.x, minY: e.y}
        }

        a.prototype.setBorder = function (t, e) {
            t + this.thin > this.border.maxX && (this.border.maxX = n.getEffectivePoint(t + this.thin, this.thin)), t - this.thin < this.border.minX && (this.border.minX = n.getEffectivePoint(t - this.thin, this.thin)), e + this.thin > this.border.maxY && (this.border.maxY = n.getEffectivePoint(e + this.thin, this.thin)), e - this.thin < this.border.minY && (this.border.minY = n.getEffectivePoint(e - this.thin, this.thin))
        }, a.prototype.sort = function () {
            this.lines.sort(function (t, e) {
                return t.seq - e.seq
            })
        };
        var h = a, d = function (t, e) {
            this.user = t, this.type = "graph", this.graph = e.graph, this.seq = e.seq, this.show = e.show, this.status = "begin", this.select = !1, this.time = n.getTimeStamp(), this.color = e.color, this.thin = e.thin, this.solid = e.solid || !1, this.startPoint = {
                x: e.beginPoint.x,
                y: e.beginPoint.y,
                seq: e.beginPoint.seq
            }, this.endPoint = {x: e.endPoint.x, y: e.endPoint.y, seq: e.endPoint.seq}
        }, l = function (t, e) {
            this.user = t, this.type = "select", this.seq = Math.floor(100 * Math.random()), this.show = !0, this.color = e.color, this.startInfo = {
                x: e.startx,
                y: e.starty
            }, this.location = {x: e.x, y: e.y}
        }, u = function (t, e) {
            this.user = t, this.type = "raser", this.seq = e.seq, this.show = !0, this.status = 1, this.color = e.color, this.radius = e.radius, this.location = {
                x: e.x,
                y: e.y
            }
        }, c = i(0), p = i.n(c), g = {
            seq: 0, getSeq() {
                var t = Math.round((new Date).getTime() / 1e3);
                return 1 * new p.a(t >>> 0 << 15 | 32767 & this.seq++, t >>> 0 >> 17).toString()
            }
        }, f = {
            VERSION: "2.5.0",
            PLATFORM: "miniprogram",
            SERVER_URL: "https://yun.tim.qq.com/v4/ilvb_edu/whiteboard?contenttype=json&sdkappid=",
            TEST_SERVER_URL: "https://test.tim.qq.com/v4/ilvb_test/whiteboard?contenttype=json&sdkappid=",
            COS_SERVER_URL: "https://cloud.tim.qq.com/v4/ilvb_cos/cos",
            TEST_COS_SERVER_URL: "https://cloud-test.tim.qq.com/v4/ilvb_cos_test/cos",
            WHITELIST_SERVER_URL: "https://yun.tim.qq.com/v4/ilvb_edu/whitelist?contenttype=json&sdkappid=",
            TEST_WHITELIST_SERVER_URL: "https://test.tim.qq.com/v4/ilvb_test/whitelist?contenttype=json&sdkappid=",
            SUB_CMD: {GET_BOARD_DATA: "get_board_data", REPORT_BOARD_DATA: "report_board_data"},
            COMMON_GROUP: "#DEFAULT",
            COMMON_DEFAULT_BOARD: "#DEFAULT",
            THIN: 100,
            RADIUS: 100,
            TEXT_MAX_LENGTH: 140,
            TEXT_SIZE: 14,
            TEXT_COLOR: 0,
            TEXT_FONT_FAMILY: "sans-serif,serif,monospace",
            TEXT_FONT_STYLE: {NORMAL: 0, BOLD: 1, ITALIC: 2, BOLD_ITALIC: 3},
            FILE_TYPE: {IMG: 0, H5: 1},
            PROTOCOL_ACTION: {
                LINE_START_ACTION: 1,
                LINE_MOVE_ACTION: 2,
                LINE_END_ACTION: 3,
                RASER_SHOW_ACTION: 6,
                RASER_HIDE_ACTION: 7,
                ERASER_ACTION: 8,
                MOVE_LINE_GRAPH_ACTION: 9,
                GRAPH_LINE_ACTION: 10,
                GRAPH_CIRCLE_ACTION: 11,
                GRAPH_RECT_ACTION: 12,
                INPUT_TEXT_ACTION: 13,
                GRAPH_CLEAR_ALL_ACTION: 101,
                GRAPH_CLEAR_ACTION: 102,
                FILE_CLEAR_ACTION: 103,
                RESET_DATA_ACTION: 104,
                UPDATE_BG_IMG_ACTION: 201,
                DELETE_BG_IMG_ACTION: 202,
                UPDATE_BG_COLOR_ACTION: 203,
                BOARD_MOVE_SCALE_ACTION: 301,
                SWITCH_ACTION: 401,
                ADD_FILE_ACTION: 501
            }
        };

        function _() {
        }

        _.prototype.on = function (t, e) {
            return this._cbs = this._cbs || {}, (this._cbs[t] || (this._cbs[t] = [])).unshift(e), this
        }, _.prototype.off = function (t, e) {
            if (this._cbs = this._cbs || {}, !t) return this._cbs = {};
            if (!e) return delete this._cbs[t];
            for (var i, r = this._cbs[t] || []; r && ~(i = r.indexOf(e));) r.splice(i, 1);
            return this
        }, _.prototype.fire = function (t = this, e, ...i) {
            this._cbs = this._cbs || {};
            var r = this._cbs[e];
            if (r) for (var o = r.length; o--;) r[o].apply(t, [...i]);
            return this
        };
        var m = new _, T = function (t, e) {
            this.user = t, this.type = "inputtext", this.seq = e.belongSeq, this.belongSeq = e.belongSeq, this.scale = 1, this.color = 0, this.typeFace = "", this.textSize = 0, this.fontStyle = 0, this.time = n.getTimeStamp(), this.text = "", this.show = !0, this.textWidth = 0, this.location = {
                x: e.x,
                y: e.y
            }
        }, y = {
            BOARD_ACTION_TYPE: {
                LINE: "line",
                ERASER: "eraser",
                RASER: "raser",
                POINTSELECT: "pointselect",
                SELECT: "select",
                MOVE: "move",
                "GRAPH-LINE": "graph-line",
                "GRAPH-CIRCLE": "graph-circle",
                "GRAPH-RECT": "graph-rect",
                "GRAPH-OVAL": "graph-oval",
                "GRAPH-CIRCLE-SOLID": "graph-circle-solid",
                "GRAPH-RECT-SOLID": "graph-rect-solid",
                "GRAPH-OVAL-SOLID": "graph-oval-solid",
                INPUTTEXT: "inputtext",
                MOUSE: "mouse"
            },
            BOARD_MODE: {BOARD: 0, FILE: 1},
            BACKGROUND_TYPE: {IMAGE: 0, H5: 1},
            FILL_MODE: {DEFAULT: 0, LEFT: 4, TOP: 5, RIGHT: 6, BOTTOM: 7},
            COLOR: {RED: 4278190335, WHITE: 4294967295},
            EVENT: {
                HISTROY_DATA_COMPLETE: "histroy_data_complete",
                ADD_BOARD: "add_board",
                RT_DATA: "real_time_data",
                REAL_TIME_DATA: "real_time_data",
                ADD_DATA_ERROR: "add_data_error",
                DELETE_BOARD: "delete_board",
                SWITCH_BOARD: "switch_board",
                ADD_FILE: "add_group",
                ADD_H5PPT_FILE: "add_h5ppt_file",
                DELETE_FILE: "delete_group",
                SWITCH_FILE: "switch_group",
                IMG_START_LOAD: "img_start_load",
                IMG_LOAD: "img_load",
                IMG_ERROR: "img_error",
                IMG_ABORT: "img_abort",
                PRELOAD: "preload",
                BOARD_CAN_UNDO: "board_can_undo",
                BOARD_CAN_REDO: "board_can_redo",
                VERIFY_SDK_SUCC: "verify_sdk_succ",
                VERIFY_SDK_ERROR: "verify_sdk_error",
                CANVAS_MOUSEDOWN: "canvas_mousedown",
                CANVAS_MOUSEMOVE: "canvas_mousemove",
                CANVAS_MOUSEUP: "canvas_mouseup",
                CANVAS_MOUSELEAVE: "canvas_mouseleave",
                CANVAS_TOUCHSTART: "canvas_touchstart",
                CANVAS_TOUCHMOVE: "canvas_touchmove",
                CANVAS_TOUCHEND: "CANVAS_touchend",
                CANVAS_TOUCHCANCEL: "canvas_touchcancel",
                UPDATE_BACKGROUND_IMAGE_SUCCESS: "update_background_image_success",
                UPDATE_BACKGROUND_IMAGE_ERROR: "update_background_image_error",
                COS: {
                    GET_SIGN_ERROR: "get_sign_error",
                    TASK_READY: "task_ready",
                    HASH_PROGRESS: "hash_progress",
                    PROGRESS: "progress",
                    GET_SIGN_SUCCESS: "get_sign_success",
                    DOES_NOT_SUPPORT_UPLOAD: "does_not_support_upload",
                    UPLOAD_SUCCESS: "upload_success",
                    UPLOAD_ERROR: "upload_error"
                }
            }
        };

        function b() {
            this.wxSysData = wx.getSystemInfoSync()
        }

        b.prototype = {
            APIURL: "https://ilivelog.qcloud.com",
            events: {
                start_draw_curve: "start_draw_curve",
                move_draw_curve: "move_draw_curve",
                end_draw_curve: "end_draw_curve",
                over_draw_curve: "over_draw_curve",
                start_raser: "start_raser",
                end_raser: "end_raser",
                eraser: "eraser",
                move_scrawl: "move_scrawl",
                draw_graph: "draw_graph",
                clear_all: "clear_all",
                clear_scrawl: "clear_scrawl",
                set_bg_img: "set_bg_img",
                clear_bg_img: "clear_bg_img",
                set_bg_color: "set_bg_color",
                switch_board: "switch_board",
                start_select: "start_select",
                move_select: "move_select",
                end_select: "end_select",
                point_select: "point_select"
            },
            levels: {info: "info", warn: "warn", error: "error"},
            send: function (t) {
                this.defDatas.brand = this.wxSysData.brand, this.defDatas.model = this.wxSysData.model, this.defDatas.platform = this.wxSysData.platform, this.defDatas.system = this.wxSysData.system, this.defDatas.weixinversion = this.wxSysData.version;
                try {
                    t = this.fillDatas(t), wx.request({
                        url: this.APIURL,
                        data: JSON.stringify(t),
                        method: "POST",
                        header: {"content-type": "application/x-www-form-urlencoded"},
                        success: function (t) {
                        },
                        fail: function (t) {
                        }
                    })
                } catch (t) {
                }
            },
            fillDatas: function (t) {
                var e = {};
                for (var i in this.defDatas) ["sdkappid", "classid", "userid"].indexOf(i) >= 0 ? e[i] = this.defDatas[i] : e[i] = void 0 !== t[i] ? t[i] : this.defDatas[i];
                return e
            },
            datasParseToString: function (t) {
                var e = [];
                for (var i in t) e.push(i + "=" + encodeURIComponent(t[i]));
                return e.join("&")
            },
            reporterHandel: function () {
                return function (t) {
                    t && t.readyState && t.readyState
                }
            },
            log: function (t, e) {
                this.send({action: t, action_result: e || 0, log_msg: t, log_level: this.levels.info})
            },
            warn: function (t, e) {
                this.send({action: t, action_result: e || 0, log_msg: t, log_level: this.levels.warn})
            },
            error: function (t, e) {
                this.send({action: t, action_result: e || 0, log_msg: t, log_level: this.levels.error})
            },
            defDatas: {
                action: "",
                version: f.VERSION,
                action_result: 0,
                action_info: "",
                userid: "",
                time_consume: 0,
                sdkappid: "",
                device: "miniprog",
                log_time: 0,
                business: "ticsdk",
                roomid: "",
                boardid: "",
                image_url: "",
                boardid_list: [],
                to_boardId: "",
                color: null,
                file_id: "",
                file_title: "",
                isfinish: 0,
                msgLength: 20,
                bucket: "",
                cos_appid: null,
                extra_info: "",
                net_type: null,
                userAgent: null,
                cookie: null,
                brand: null,
                model: null,
                platform: null,
                system: null,
                weixinversion: null
            },
            setSdkAppid: function (t) {
                null != t && null != t && (this.defDatas.sdkappid = t)
            },
            setRoomId: function (t) {
                null != t && null != t && (this.defDatas.roomid = t)
            },
            setUserId: function (t) {
                null != t && null != t && (this.defDatas.userid = t)
            },
            boardAction(t, e) {
                this.report(t, e)
            },
            report(t, e = {}) {
                try {
                    this.send(Object.assign({action_result: 0, time_consume: 0}, e, {
                        action: t,
                        log_time: n.getTimeStamp()
                    }))
                } catch (t) {
                }
            }
        };
        var D = new b;

        function E(t) {
            if (this.permissions = !1, this.option = Object.assign({}, t), !this.option.tlsData) throw new Error("not found tlsData.sdkAppId|tlsData.identifie|tlsData.userSig");
            if (!this.option.tlsData.sdkAppId) throw new Error("not found tlsData.sdkAppId");
            if (!this.option.tlsData.identifier) throw new Error("not found tlsData.identifie");
            if (!this.option.tlsData.userSig) throw new Error("not found tlsData.userSig");
            this.BOARD_URL = (t.debug ? f.TEST_SERVER_URL : f.SERVER_URL) + this.option.tlsData.sdkAppId, this.COS_SERVER_URL = t.debug ? f.TEST_COS_SERVER_URL : f.COS_SERVER_URL, this.WHITELIST_SERVER_URL = (t.debug ? f.TEST_WHITELIST_SERVER_URL : f.WHITELIST_SERVER_URL) + this.option.tlsData.sdkAppId
        }

        E.prototype.setPermissions = function (t = !1) {
            this.permissions = t
        }, E.prototype.reportMsg = function (t, e, i) {
            this.option.classId && this.permissions && (t = {
                cmd: "open_conf_svc",
                sub_cmd: "report_board_data",
                conf_id: parseInt(this.option.classId, 10),
                board_data_list: t
            }, this.post(t, e, i))
        }, E.prototype.getBoardData = function (t = !0, e, i) {
            var r = {
                first_time: t,
                seq: g.getSeq(),
                cmd: "open_conf_svc",
                sub_cmd: "get_board_data",
                conf_id: parseInt(this.option.classId, 10),
                version: 1
            };
            this.post(r, e, i)
        }, E.prototype.getLineData = function (t, e, i) {
            var r = (new Date).getTime(), o = {
                cmd: "open_conf_svc",
                sub_cmd: "get_line",
                conf_id: parseInt(this.option.classId, 10),
                boardId: t.boardId,
                owner: t.owner,
                seq: t.seq
            };
            this.post(o, t => {
                D.report("getLineData", {
                    action_result: 0,
                    time_consume: (new Date).getTime() - r,
                    extra_info: JSON.stringify(t)
                }), e && e(t)
            }, t => {
                D.report("getLineData", {
                    action_result: -1,
                    time_consume: (new Date).getTime() - r,
                    extra_info: JSON.stringify(t)
                }), i && i(t)
            })
        }, E.prototype.getCosAuthData = function () {
            var t = this.COS_SERVER_URL + `?SdkAppId=${this.option.tlsData.sdkAppId}&Identifier=${this.option.tlsData.identifier}&UserSig=${this.option.tlsData.identifier}`;
            return this.postPromise(t, {cmd: "open_cos_svc", sub_cmd: "get_cos_token", duration: 300, version: 1})
        }, E.prototype.applyPermissions = function () {
            var t = this.WHITELIST_SERVER_URL + "&usersig=" + this.option.tlsData.userSig + "&identifier=" + this.option.tlsData.identifier;
            return this.postPromise(t, {
                cmd: "open_conf_svc",
                sub_cmd: "verify_sdk",
                sdkappid: 1 * this.option.tlsData.sdkAppId
            })
        }, E.prototype.post = function (t, e, i) {
            var r = this.BOARD_URL + "&usersig=" + this.option.tlsData.userSig + "&identifier=" + this.option.tlsData.identifier;
            wx.request({
                url: r,
                data: t,
                method: "POST",
                header: {"content-type": "application/json"},
                success: function (t) {
                    e(t.data)
                },
                fail: i
            })
        }, E.prototype.postPromise = function (t, e) {
            return t = t || this.BOARD_URL + "&usersig=" + this.option.tlsData.userSig + "&identifier=" + this.option.tlsData.identifier, new Promise((i, r) => {
                wx.request({
                    url: t,
                    data: e,
                    method: "POST",
                    header: {"content-type": "application/json"},
                    success: function (t) {
                        i(t)
                    },
                    fail: function () {
                        r.apply(this, arguments)
                    }
                })
            })
        };
        var O = E;

        function S(t) {
            this.request = t
        }

        S.prototype.reportCreateBoards = function (t, e) {
            var i;
            if (0 !== (i = Array.isArray(e) ? e : [e]).length) {
                var r = (new Date).getTime();
                this.request.reportMsg([{
                    type: "createBoards",
                    seq: g.getSeq(),
                    content: {fid: n.boardId2Fid(i[0]), createBoards: i, updateTime: n.getTimeStamp()}
                }], function (e) {
                    e.ErrorCode || e.error_code ? D.boardAction("createBoards", {
                        action_result: e.ErrorCode ? `ErrorCode:${e.ErrorCode}` : `error_code:${e.error_code}`,
                        action_info: e.ErrorInfo || e.error_msg,
                        time_consume: n.getTimeDiff(r),
                        boardid: t,
                        boardid_list: i,
                        image_url: null,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    }) : D.boardAction("createBoards", {
                        action_result: 0,
                        action_info: null,
                        time_consume: n.getTimeDiff(r),
                        boardid: t,
                        boardid_list: i,
                        image_url: null,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    })
                }, function (e) {
                    D.boardAction("createBoards", {
                        action_result: -9999,
                        action_info: e && e.message,
                        time_consume: n.getTimeDiff(r),
                        boardid: t,
                        boardid_list: i,
                        image_url: null,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    })
                })
            }
        }, S.prototype.reportDeleteBoard = function (t, e) {
            var i = (new Date).getTime();
            this.request.reportMsg([{
                type: "deleteBoards",
                seq: g.getSeq(),
                content: {deleteBoards: t, toBoardId: e, updateTime: n.getTimeStamp()}
            }], function (r) {
                r.ErrorCode || r.error_code ? D.boardAction("deleteBoards", {
                    action_result: r.ErrorCode ? `ErrorCode:${r.ErrorCode}` : `error_code:${r.error_code}`,
                    action_info: r.ErrorInfo || r.error_msg,
                    time_consume: n.getTimeDiff(i),
                    boardid: null,
                    boardid_list: t,
                    image_url: null,
                    to_boardId: e,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("deleteBoards", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(i),
                    boardid: null,
                    boardid_list: t,
                    image_url: null,
                    to_boardId: e,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, function (r) {
                D.boardAction("deleteBoards", {
                    action_result: -9999,
                    action_info: r && r.message,
                    time_consume: n.getTimeDiff(i),
                    boardid: null,
                    boardid_list: t,
                    image_url: null,
                    to_boardId: e,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportSetBoardBgColor = function (t, e) {
            var i = (new Date).getTime();
            this.request.reportMsg([{
                type: "setBoardBG",
                seq: g.getSeq(),
                content: {boardId: t, updateTime: n.getTimeStamp(), colorRGBA: e}
            }], function (r) {
                r.ErrorCode || r.error_code ? D.boardAction("setBoardBG", {
                    action_result: r.ErrorCode ? `ErrorCode:${r.ErrorCode}` : `error_code:${r.error_code}`,
                    action_info: r.ErrorInfo || r.error_msg,
                    time_consume: n.getTimeDiff(i),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: e,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("setBoardBG", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(i),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: e,
                    file_id: null,
                    file_title: null
                })
            }, function (r) {
                D.boardAction("setBoardBG", {
                    action_result: -9999,
                    action_info: r && r.message,
                    time_consume: n.getTimeDiff(i),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: e,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportClear = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{
                type: "clean",
                seq: g.getSeq(),
                content: {boardId: t, updateTime: n.getTimeStamp()}
            }], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("clean", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("clean", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("clean", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportClearDraws = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{
                type: "cleanDraws",
                seq: g.getSeq(),
                content: {boardId: t, updateTime: n.getTimeStamp()}
            }], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("cleanDraws", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("cleanDraws", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("cleanDraws", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportImage = function (t, e, i = y.FILL_MODE.DEFAULT, r = y.BACKGROUND_TYPE.IMAGE) {
            var o = (new Date).getTime();
            this.request.reportMsg([{
                type: "image",
                seq: g.getSeq(),
                content: {fid: n.boardId2Fid(t), boardId: t, url: e, updateTime: n.getTimeStamp(), type: r, mode: i}
            }], function (i) {
                var r = {};
                r[t] = e, i.ErrorCode || i.error_code ? D.boardAction("image", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(o),
                    boardid: null,
                    boardid_list: [r],
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("image", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(o),
                    boardid: null,
                    boardid_list: [r],
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                var r = {};
                r[t] = e, D.boardAction("image", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(o),
                    boardid: null,
                    boardid_list: [r],
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportImages = function (t) {
            for (var e = (new Date).getTime(), i = 0, r = Math.ceil(t.length / 100); i < r; i++) {
                var o;
                o = t.slice(100 * i, 100 * (i + 1)), this.request.reportMsg(o, function (i) {
                    var r = [];
                    t.forEach(t => {
                        var e = {};
                        e[t.content.boardId] = t.content.url, r.push(e)
                    }), i.ErrorCode || i.error_code ? D.boardAction("image", {
                        action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                        action_info: i.ErrorInfo || i.error_msg,
                        time_consume: n.getTimeDiff(e),
                        boardid: null,
                        boardid_list: r,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    }) : D.boardAction("image", {
                        action_result: 0,
                        action_info: null,
                        time_consume: n.getTimeDiff(e),
                        boardid: null,
                        boardid_list: r,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    })
                }, function (i) {
                    var r = [];
                    t.forEach(t => {
                        var e = {};
                        e[t.content.boardId] = t.content.url, r.push(e)
                    }), D.boardAction("image", {
                        action_result: -9999,
                        action_info: i && i.message,
                        time_consume: n.getTimeDiff(e),
                        boardid: null,
                        boardid_list: r,
                        to_boardId: null,
                        color: null,
                        file_id: null,
                        file_title: null
                    })
                })
            }
        }, S.prototype.reportSwitchBoard = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{
                type: "switchBoard",
                seq: g.getSeq(),
                content: {boardId: t, updateTime: n.getTimeStamp()}
            }], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("switchBoard", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("switchBoard", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("switchBoard", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportGlobalBgColor = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{
                type: "setGlobalBG",
                seq: g.getSeq(),
                content: {updateTime: n.getTimeStamp(), colorRGBA: t}
            }], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("setGlobalBG", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("setGlobalBG", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("setGlobalBG", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportAddLine = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{type: "addLine", seq: g.getSeq(), content: t}], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("addLine", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("addLine", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("addLine", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportAddText = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{type: "addText", seq: g.getSeq(), content: t}], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("addText", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("addText", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("addText", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: t.colorRGBA,
                    file_id: null,
                    file_title: null
                })
            })
        }, S.prototype.reportDisplayLine = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{type: "displayLine", seq: g.getSeq(), content: t}], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("displayLine", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null,
                    display: t.display
                }) : D.boardAction("displayLine", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null,
                    display: t.display
                })
            }, function (i) {
                D.boardAction("displayLine", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: t.boardId,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null,
                    display: t.display
                })
            })
        }, S.prototype.reportGraphData = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg(t, function (i) {
                t.forEach(t => {
                    i.ErrorCode || i.error_code ? D.boardAction(t.type, {
                        action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                        action_info: i.ErrorInfo || i.error_msg,
                        time_consume: n.getTimeDiff(e),
                        boardid: t.content.boardId,
                        boardid_list: null,
                        to_boardId: null,
                        color: t.content.colorRGBA,
                        file_id: null,
                        file_title: null
                    }) : D.boardAction(t.type, {
                        action_result: 0,
                        action_info: null,
                        time_consume: n.getTimeDiff(e),
                        boardid: t.content.boardId,
                        boardid_list: null,
                        to_boardId: null,
                        color: t.content.colorRGBA,
                        file_id: null,
                        file_title: null
                    })
                })
            }, function (i) {
                t.forEach(t => {
                    D.boardAction(t.type, {
                        action_result: -9999,
                        action_info: i && i.message,
                        time_consume: n.getTimeDiff(e),
                        boardid: t.content.boardId,
                        boardid_list: null,
                        to_boardId: null,
                        color: t.content.colorRGBA,
                        file_id: null,
                        file_title: null
                    })
                })
            })
        }, S.prototype.reportAddFile = function (t) {
            var e = t.fid, i = t.title, r = t.downloadURL, o = t.pageCount, s = t.currentPageIndex,
                a = t.currentPageStep, h = t.uid, d = t.timestamp, l = t.platform, u = t.type, c = (new Date).getTime();
            this.request.reportMsg([{
                type: "addFile",
                seq: g.getSeq(),
                content: {
                    updateTime: n.getTimeStamp(),
                    fid: e,
                    title: i,
                    downloadURL: r,
                    pageCount: o,
                    currentPageIndex: s,
                    currentPageStep: a,
                    uid: h,
                    timestamp: d,
                    platform: l,
                    type: u
                }
            }], function (t) {
                t.ErrorCode || t.error_code ? D.boardAction("addFile", {
                    action_result: t.ErrorCode ? `ErrorCode:${t.ErrorCode}` : `error_code:${t.error_code}`,
                    action_info: t.ErrorInfo || t.error_msg,
                    time_consume: n.getTimeDiff(c),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: e,
                    file_title: i
                }) : D.boardAction("addFile", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(c),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: e,
                    file_title: i
                })
            }, function (t) {
                D.boardAction("addFile", {
                    action_result: -9999,
                    action_info: t && t.message,
                    time_consume: n.getTimeDiff(c),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: e,
                    file_title: i
                })
            })
        }, S.prototype.reportDeleteFile = function (t) {
            var e = (new Date).getTime();
            this.request.reportMsg([{
                type: "deleteFile",
                seq: g.getSeq(),
                content: {fid: t, updateTime: n.getTimeStamp()}
            }], function (i) {
                i.ErrorCode || i.error_code ? D.boardAction("deleteFile", {
                    action_result: i.ErrorCode ? `ErrorCode:${i.ErrorCode}` : `error_code:${i.error_code}`,
                    action_info: i.ErrorInfo || i.error_msg,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: t,
                    file_title: null
                }) : D.boardAction("deleteFile", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: t,
                    file_title: null
                })
            }, function (i) {
                D.boardAction("deleteFile", {
                    action_result: -9999,
                    action_info: i && i.message,
                    time_consume: n.getTimeDiff(e),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: t,
                    file_title: null
                })
            })
        }, S.prototype.reportsetBoardRatio = function (t) {
            this.request.reportMsg([{type: "setRatio", seq: g.getSeq(), content: {ratio: t}}], function (t) {
            }, function (t) {
            })
        }, S.prototype.reportCleanAll = function () {
            var t = (new Date).getTime();
            this.request.reportMsg([{type: "cleanAll", seq: g.getSeq()}], e => {
                e.ErrorCode || e.error_code ? D.boardAction("cleanAll", {
                    action_result: e.ErrorCode ? `ErrorCode:${e.ErrorCode}` : `error_code:${e.error_code}`,
                    action_info: e.ErrorInfo || e.error_msg,
                    time_consume: n.getTimeDiff(t),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                }) : D.boardAction("cleanAll", {
                    action_result: 0,
                    action_info: null,
                    time_consume: n.getTimeDiff(t),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            }, e => {
                D.boardAction("cleanAll", {
                    action_result: -9999,
                    action_info: e && e.message,
                    time_consume: n.getTimeDiff(t),
                    boardid: null,
                    boardid_list: null,
                    image_url: null,
                    to_boardId: null,
                    color: null,
                    file_id: null,
                    file_title: null
                })
            })
        };
        var B = S, I = {
            postMessage(t, e) {
                t && t.contentWindow && t.contentWindow.postMessage(e, "*")
            }, init(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "init"}, "*")
            }, count(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "count"}, "*")
            }, getCurrentSlideIndex(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "current_slide_index"}, "*")
            }, getCurrentStepIndex(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "current_step_index"}, "*")
            }, getCurrentStepCount(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "current_step_count"}, "*")
            }, nextPage(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "next_page"}, "*")
            }, prevPage(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "prev_page"}, "*")
            }, gotoNextStep(t, e) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "next_step", data: e}, "*")
            }, gotoPreviousStep(t, e) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "prev_step", data: e}, "*")
            }, gotoSlide(t, e, i) {
                this.postMessage(t, {
                    module: "tx_board_postmessage",
                    cmd: "goto_slide",
                    data: {slideIndex: e, autoStart: i}
                }, "*")
            }, gotoTimestamp(t, e, i, r, o) {
                this.postMessage(t, {
                    module: "tx_board_postmessage",
                    cmd: "goto_timestamp",
                    data: {slideIndex: e, stepIndex: i, autoStart: r, timeOffset: o}
                }, "*")
            }, clearIframeCache(t) {
                this.postMessage(t, {module: "tx_board_postmessage", cmd: "clear_cache"}, "*")
            }
        }, A = 1, C = 2;

        function x(t) {
            this.options = JSON.parse(JSON.stringify(t)), this.boardMode = y.BOARD_MODE.FILE, this.preStep = t.preStep || 2, this.context = t.context, this.maxSeq = 0, this.request = new O(t), this.report = new B(this.request), this.permissions = 0, this.syncHistroy = t.syncHistroy || !0, this.identifier = t.tlsData.identifier, this.classId = t.classId, this.user = t.tlsData.identifier, this.data = {}, this.opData = {}, this.opIndex = {}, this.userData = {}, this.backgroundPic = {}, this.backgroundColor = {}, this.boardRatio = {}, this.currentGroup = null, this.currentBoard = null, this.boardList = [], this.groups = [], this.color = 0, this.thin = 0, this.typeFace = t.textFamily || f.TEXT_FONT_FAMILY, this.textSize = t.textSize || f.TEXT_SIZE, this.textColor = t.textColor || 0, this.fontStyle = t.textStyle || f.TEXT_FONT_STYLE.NORMAL, this.radius = 0, this.globalBackgroundColor = 0, this.type = "", this.transparent = !1, this.seq = 0, this.selectedList = [], this.selectArea = {}, this.gSeq = 0, this.boardIdSeq = 0, this.belongLineSeq = 0, this.realTimeData = [], this.beforeMoveType = "", this.boardWidth = 0, this.boardHeight = 0, this.ctx = null, D.setSdkAppid(t.tlsData.sdkAppId), D.setRoomId(this.classId), D.setUserId(t.tlsData.identifier), this.applyPermissions(() => {
            }), this.initInterval()
        }

        x.prototype.applyPermissions = function (t) {
            var e = Date.now();
            this.request.applyPermissions().then(i => {
                try {
                    0 === i.data.error_code && i.data.level ? (this.permissions = i.data.level, this.request.setPermissions(this.permissions), this.setDefaultBoard(), this.initData(this.options), t(), this.syncHistroy && this.classId && this.syncHistroyData(), D.report("verify_sdk", {
                        time_consume: Date.now() - e,
                        extra_info: JSON.stringify({permissions: this.permissions})
                    }), m.fire(this, "TEB_INIT")) : (this.permissions = 0, this.request.setPermissions(this.permissions), m.fire(this, "TEB_ERROR", C), this.setDefaultBoard(), this.initData(this.options), D.report("verify_sdk", {
                        action_result: i.data.error_code,
                        action_info: JSON.stringify(i.data),
                        time_consume: Date.now() - e,
                        extra_info: JSON.stringify({permissions: this.permissions})
                    }))
                } catch (t) {
                    this.permissions = 0, this.request.setPermissions(this.permissions), m.fire(this, "TEB_ERROR", C), this.setDefaultBoard(), this.initData(this.options), D.report("verify_sdk", {
                        action_result: -2,
                        action_info: JSON.stringify(t),
                        time_consume: Date.now() - e,
                        extra_info: JSON.stringify({permissions: this.permissions})
                    })
                }
                this.needDraw = !0
            }, t => {
                this.permissions = 0, this.request.setPermissions(this.permissions), m.fire(this, "TEB_ERROR", C), this.setDefaultBoard(), this.initData(this.options), D.report("verify_sdk", {
                    action_result: -1,
                    action_info: JSON.stringify(t),
                    time_consume: Date.now() - e,
                    extra_info: JSON.stringify({permissions: this.permissions})
                }), this.needDraw = !0
            })
        }, x.prototype.createBoardIdForFile = function (t, e, i, r, o) {
            for (var s = 1, n = [], a = 0; a < r; a++) {
                var h = `${o}_${e}_${i}_${s++}_${t}`;
                n.push(h)
            }
            return n
        }, x.prototype.createBoardId = function (t = this.currentGroup, e) {
            return 0 == this.boardIdSeq ? (this.boardIdSeq++, f.COMMON_DEFAULT_BOARD) : (f.COMMON_GROUP, `${f.PLATFORM}_${this.identifier}_${e || n.getSecondTime()}_${this.boardIdSeq++}_${t}`)
        }, x.prototype.initInterval = function () {
            this.sendInterval = setInterval(() => {
                this.realTimeData.length > 0 && this.sendRequest()
            }, 200)
        }, x.prototype.resetData = function () {
            this.data = {}, this.opData = {}, this.opIndex = {}, this.userData = {}, this.backgroundPic = {}, this.backgroundColor = {}, this.currentGroup = null, this.currentBoard = null, this.boardList = [], this.groups = [], this.seq = 0, this.selectedList = [], this.selectArea = {}, this.gSeq = 0, this.boardIdSeq = 0, this.belongLineSeq = 0, this.realTimeData = [], this.beforeMoveType = "", this.setDefaultBoard(), this.initData(this.options)
        }, x.prototype.initData = function (t) {
            this.setColor(t.brushColor), this.setTextColor(t.textColor), this.setThin(t.brushThin), this.setRadius(t.radius), this.setType(y.BOARD_ACTION_TYPE[["MOUSE", "LINE", "ERASER", "RASER", "GRAPH-LINE", "GRAPH-OVAL", "GRAPH-RECT", "GRAPH-OVAL-SOLID", "GRAPH-RECT-SOLID", "POINTSELECT", "SELECT", "INPUTTEXT", "H5-PPT"][t.toolType]]), this.setGlobalBackgroundColor(t.globalBackgroundColor, !0), this.setTransparent(t.transparent), this.setSelectArea(), setTimeout(() => {
                m.fire(this, "TEB_OPERATE_CANREDO_STATUS_CHANGED", this.canRedo()), m.fire(this, "TEB_OPERATE_CANUNDO_STATUS_CHANGED", this.canUndo())
            }, 500)
        }, x.prototype.addBoard = function (t, e = !0) {
            var i = [];
            if (Array.isArray(t)) i = t; else {
                if (!t) return;
                i = [t]
            }
            return i.forEach((t, e) => {
                this.userData[t] = {}, this.userData[t][this.identifier] = [], this.data[t] = [], this.opData[t] = [], this.opIndex[t] = 0, this.backgroundColor[t] = this.globalBackgroundColor, this.backgroundPic[t] = {
                    url: "",
                    user: t === f.COMMON_DEFAULT_BOARD ? this.identifier : n.boardId2Uid(t),
                    show: !0,
                    mode: y.FILL_MODE.DEFAULT,
                    type: y.BACKGROUND_TYPE.IMAGE
                }, -1 === this.boardList.indexOf(t) && this.boardList.push(t), this.sortBoard(), m.fire(this, "TEB_ADDBOARD", t, n.boardId2Fid(t))
            }), e && this.report.reportCreateBoards(this.currentBoard, i), this.boardList
        }, x.prototype.findLine = function (t, e, i) {
            var r, o = this.userData[t][e];
            for (let t = 0, e = o.length; t < e; t++) {
                const e = o[t];
                if ("line" === e.type && e.seq == i.belongSeq) {
                    r = e;
                    break
                }
            }
            return r
        }, x.prototype.setNeedDraw = function (t = !0) {
            this.needDraw = t
        }, x.prototype.getNeedDraw = function () {
            return this.needDraw
        }, x.prototype.getBoardList = function () {
            return this.boardList
        }, x.prototype.getBoardPicList = function () {
            return this.backgroundPic
        }, x.prototype.setDefaultBoard = function () {
            this.currentGroup = f.COMMON_GROUP;
            var t = n.getSecondTime();
            this.addGroup(f.COMMON_GROUP, f.COMMON_GROUP, this.user, null, 1, 0, t, f.PLATFORM, f.FILE_TYPE.IMG, 0), this.currentBoard = this.createBoardId(), this.addBoard(this.currentBoard), this.setBackgroundColor(n.formatColor(this.globalBackgroundColor), !0), delete this.setDefaultBoard
        }, x.prototype.removeBoard = function (t) {
            Array.isArray(t) || (t = [t]);
            var e = [], i = [], r = !1;
            for (let p = 0, g = t.length; p < g; p++) {
                var o, s = t[p];
                if (s !== f.COMMON_DEFAULT_BOARD && (o = this.boardList.indexOf(s)) > -1) {
                    if (e.push(s), delete this.userData[s], delete this.data[s], delete this.opData[s], delete this.opIndex[s], delete this.backgroundColor[s], delete this.backgroundPic[s], s == this.currentBoard) {
                        r = !0;
                        var a = this.getBoardByGroup(this.currentGroup), h = a.indexOf(s);
                        if (this.currentBoard = 0 === h ? a[h + 1] : a[h - 1], !this.currentBoard) {
                            var d = this.getBoardByGroup(f.COMMON_GROUP);
                            this.currentBoard = d[this.getFileInfo(f.COMMON_GROUP).currentPageIndex]
                        }
                    }
                    this.boardList.splice(o, 1);
                    var l = n.boardId2Fid(s), u = this.getBoardByGroup(l), c = this.getFileInfo(l);
                    0 === u.length ? c && (this.deleteGroup(l), i.push(l)) : c && (c.pageCount = c.pageCount - 1, c.pageCount === c.currentPageIndex && (c.currentPageIndex = c.currentPageIndex - 1), this.updateFileInfo(c))
                }
            }
            var p = n.boardId2Fid(this.currentBoard), g = this.getBoardByGroup(p);
            return (c = this.getFileInfo(p)) && (c.pageCount = g.length, c.currentPageIndex = g.indexOf(this.currentBoard), this.updateFileInfo(c)), this.currentGroup = n.boardId2Fid(this.currentBoard), e.length && e.forEach(t => {
                m.fire(this, "TEB_DELETEBOARD", t, n.boardId2Fid(t))
            }), r && m.fire(this, "TEB_GOTOBOARD", this.currentBoard, n.boardId2Fid(this.currentBoard)), this.needDraw = !0, {
                deleteBoards: e,
                deleteFids: i
            }
        }, x.prototype.deleteBoard = function (t = this.currentBoard, e) {
            var {deleteBoards: i, deleteFids: r} = this.removeBoard(t) || [];
            if (i.length) {
                var o = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : "";
                o && this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                    url: o,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    mode: this.backgroundPic[this.currentBoard].mode,
                    cleanBoard: 0
                });
                var s = [];
                e ? r.indexOf(e) > -1 ? s = r : s.push(e) : s = r, this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.SWITCH_ACTION,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    toBoardId: this.currentBoard,
                    deleteBoards: s.length ? [] : i,
                    deleteFiles: s.length ? s : []
                }), this.report.reportDeleteBoard(i, this.currentBoard);
                var a = this.getBoardByGroup(this.currentGroup), h = this.getFileInfo(this.currentGroup),
                    d = a.indexOf(this.currentBoard);
                h.currentPageIndex = d, h.currentPageStep = 0, h.pageCount = a.length, this.report.reportAddFile(h)
            }
            return i
        }, x.prototype.getGroup = function () {
            var t = Object.assign([], this.groups);
            return t.forEach(t => {
                var e = [];
                t.type === f.FILE_TYPE.IMG && (this.getBoardByGroup(t.fid) || []).forEach(t => {
                    var i = new class {
                        constructor(t, e, i) {
                            this.boardId = t || "", this.backgroundUrl = "", e && (this.backgroundUrl = e.url || ""), this.backgroundColor = i || ""
                        }

                        setBoardId(t) {
                            this.boardId = t
                        }

                        setBackgroundUrl(t) {
                            this.backgroundUrl = t
                        }

                        getBoardId() {
                            return this.boardId
                        }

                        getBackgroundUrl() {
                            return this.backgroundUrl
                        }

                        setBackgroundColor(t) {
                            this.backgroundColor = t
                        }

                        getBackgroundColor() {
                            return this.backgroundColor
                        }
                    }(t, this.backgroundPic[t], this.backgroundColor[t]);
                    e.push(i)
                }), t.boardInfoList = e
            }), t
        }, x.prototype.getFileInfo = function (t = f.COMMON_GROUP) {
            var e = null, i = this.getGroup();
            for (let r = 0, o = i.length; r < o; r++) {
                const o = i[r];
                if (t === o.fid) {
                    e = o;
                    break
                }
            }
            return e
        }, x.prototype.getBoardByGroup = function (t = f.COMMON_GROUP) {
            return this.boardList.filter(e => t === f.COMMON_GROUP && e === f.COMMON_DEFAULT_BOARD || e.indexOf(`_${t}`) > -1)
        }, x.prototype.addGroup = function (t, e, i, r, o, s, n, a = f.PLATFORM, h = f.FILE_TYPE.IMG, d) {
            for (var l = !1, u = 0, c = this.groups.length; u < c; u++) if (this.groups[u].fid == t) {
                l = !0;
                break
            }
            if (l) return this.groups;
            h == f.FILE_TYPE.IMG ? m.fire(this, "TEB_ADDFILE", t) : m.fire(this, "TEB_ADDH5PPTFILE", t);
            var p = {
                fid: t,
                title: e || t,
                downloadURL: r,
                pageCount: o,
                currentPageIndex: s,
                currentPageStep: d,
                uid: i,
                timestamp: n,
                platform: a,
                type: h
            };
            return t && t !== f.COMMON_GROUP && this.report.reportAddFile(p), this.groups.push(p)
        }, x.prototype.deleteGroup = function (t, e = !0) {
            if (t === f.COMMON_GROUP) return [];
            for (var i = -1, r = 0, o = this.groups.length; r < o; r++) if (this.groups[r].fid == t) {
                i = r;
                break
            }
            return i > -1 && (this.groups.splice(i, 1), I.clearIframeCache(this.iframeDom)), e && this.report.reportDeleteFile(t), this.getBoardByGroup(t)
        }, x.prototype.setColor = function (t = y.COLOR.RED) {
            this.cancelSelect(), "number" == typeof t ? this.color = n.dealColor(t) : "string" != typeof t || 0 != t.indexOf("#") || 4 !== t.length && 7 !== t.length ? "string" == typeof t && t.startsWith("rgba(") && (this.color = t) : this.color = n.hexToRgba(t)
        }, x.prototype.getColor = function () {
            return this.color
        }, x.prototype.setThin = function (t = f.THIN) {
            this.cancelSelect(), this.thin = t
        }, x.prototype.getThin = function () {
            return this.thin
        }, x.prototype.setTextSize = function (t = f.TEXT_SIZE) {
            this.cancelSelect(), this.textSize = t
        }, x.prototype.getTextSize = function () {
            return this.textSize
        }, x.prototype.setTextColor = function (t = f.TEXT_COLOR) {
            this.cancelSelect(), "number" == typeof t ? this.textColor = n.dealColor(t) : "string" != typeof t || 0 != t.indexOf("#") || 4 !== t.length && 7 !== t.length ? "string" == typeof t && t.startsWith("rgba(") && (this.textColor = t) : this.textColor = n.hexToRgba(t)
        }, x.prototype.getTextColor = function () {
            return this.textColor
        }, x.prototype.setTextFontFamily = function (t = f.TEXT_FONT_FAMILY) {
            this.cancelSelect(), this.typeFace = t
        }, x.prototype.getTextFontFamily = function () {
            return this.typeFace
        }, x.prototype.setTextFontStyle = function (t = f.TEXT_FONT_STYLE.NORMAL) {
            this.cancelSelect(), this.fontStyle = t
        }, x.prototype.getTextFontStyle = function () {
            return this.fontStyle
        }, x.prototype.setRadius = function (t = f.RADIUS) {
            this.cancelSelect(), this.radius = t
        }, x.prototype.setType = function (t) {
            var e = Object.values(y.BOARD_ACTION_TYPE);
            this.cancelSelect(), e.indexOf(t) > -1 ? this.type = t : this.type = y.BOARD_ACTION_TYPE.LINE
        }, x.prototype.getType = function () {
            return this.type
        }, x.prototype.setTransparent = function (t = !1) {
            this.transparent = t
        }, x.prototype.getTransparent = function () {
            return this.transparent
        }, x.prototype.setBackgroundColor = function (t = y.COLOR.WHITE, e) {
            var i = this.currentBoard;
            "object" == typeof t && (i = t.boardId, t = t.color);
            var r = 0;
            "number" == typeof t ? (this.backgroundColor[i] = n.dealColor(t), r = t) : "string" != typeof t || 0 != t.indexOf("#") || 4 !== t.length && 7 !== t.length ? "string" == typeof t && t.startsWith("rgba(") && (this.backgroundColor[i] = t, r = n.formatColor(t)) : (this.backgroundColor[i] = n.hexToRgba(t), r = n.formatColor(n.hexToRgba(t))), this.needDraw = !0, e || (this.realTimeData.push({
                action: f.PROTOCOL_ACTION.UPDATE_BG_COLOR_ACTION,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                color: r,
                isGlobal: 0
            }), this.report.reportSetBoardBgColor(i, r))
        }, x.prototype.getBackgroundColor = function () {
            return this.backgroundColor[this.getCurrentBoard()]
        }, x.prototype.setSelectArea = function (t = 0, e = 0, i = 0, r = 0) {
            this.selectArea = {x: t, y: e, width: i, height: r}
        }, x.prototype.getSelectArea = function () {
            return this.selectArea
        }, x.prototype.getCurrentBoard = function () {
            return this.currentBoard
        }, x.prototype.getCurrentFile = function () {
            return this.currentGroup
        }, x.prototype.getData = function () {
            return this.data
        }, x.prototype.getCurrentBoardData = function () {
            return {
                data: this.data[this.currentBoard],
                userData: this.userData[this.currentBoard],
                opData: this.opData[this.currentBoard],
                opIndex: this.opIndex[this.currentBoard],
                backgroundPic: this.backgroundPic[this.currentBoard],
                backgroundColor: this.backgroundColor[this.currentBoard],
                ratio: this.boardRatio[this.currentBoard]
            }
        }, x.prototype.getCurrentBoardPic = function () {
            return this.backgroundPic[this.currentBoard]
        }, x.prototype.getCurrentBoardColor = function () {
            return this.backgroundColor[this.currentBoard]
        }, x.prototype.getSelectList = function () {
            return this.selectedList
        }, x.prototype.clearBoard = function (t) {
            this.currentBoard && (this.data[this.currentBoard] = [], this.opData[this.currentBoard] = [], this.opIndex[this.currentBoard] = 0, this.userData[this.currentBoard] = {}, this.userData[this.currentBoard][this.identifier] = [], t || (this.backgroundPic[this.currentBoard] = {
                show: !1,
                mode: y.FILL_MODE.DEFAULT,
                url: "",
                type: y.BACKGROUND_TYPE.IMAGE,
                user: ""
            }, this.backgroundColor[this.currentBoard] = this.globalBackgroundColor), this.cancelSelect(), this.needDraw = !0)
        }, x.prototype.clearFileDrawData = function (t) {
            t.forEach(t => {
                (this.getBoardByGroup(t) || []).forEach(t => {
                    this.data[t] = [], this.opData[t] = [], this.opIndex[t] = 0, this.userData[t] = {}, this.userData[t][this.identifier] = []
                })
            }), this.cancelSelect(), this.needDraw = !0
        }, x.prototype.clear = function () {
            this.clearBoard(), this.realTimeData.push({
                action: 101,
                seq: g.getSeq()
            }), this.report.reportClear(this.currentBoard)
        }, x.prototype.clearDraws = function () {
            this.clearBoard(!0), this.realTimeData.push({
                action: 102,
                seq: g.getSeq()
            }), this.report.reportClearDraws(this.currentBoard)
        }, x.prototype.clearFileDraws = function (t) {
            if (t) {
                Array.isArray(t) || (t = [t]), this.clearFileDrawData(t);
                var e = [];
                t.forEach(t => {
                    e = e.concat(this.getBoardByGroup(t))
                }), this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.FILE_CLEAR_ACTION,
                    seq: g.getSeq(),
                    fids: t
                }), this.report.reportClearDraws(e)
            }
        }, x.prototype.clearAll = function () {
            this.report.reportCleanAll(), this.realTimeData.push({
                action: f.PROTOCOL_ACTION.RESET_DATA_ACTION,
                seq: g.getSeq()
            }), this.sendRequest(), this.resetData()
        }, x.prototype.addBackgroundPic = function ({boardIds: t, urls: e, type: i = y.BACKGROUND_TYPE.IMAGE, needReport: r = !0, position: o = y.FILL_MODE.DEFAULT}) {
            var s = [], a = [];
            if (Array.isArray(t)) {
                if (!Array.isArray(e) || t.length != e.length) return !1;
                s = t, a = e
            } else {
                if (Array.isArray(e)) return !1;
                s = [t], a = [e]
            }
            var h = [];
            this.cancelSelect(), s.forEach((t, e) => {
                t === this.currentBoard && r && this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                    url: encodeURI(a[e]),
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    mode: o,
                    type: i,
                    cleanBoard: 0
                }), this.data[t] || this.addBoard(t), this.backgroundPic[t].url = a[e], this.backgroundPic[t].show = !0, this.backgroundPic[t].mode = o, this.backgroundPic[t].type = i, h.push({
                    type: "image",
                    seq: g.getSeq(),
                    content: {
                        fid: n.boardId2Fid(t),
                        boardId: t,
                        url: a[e],
                        updateTime: n.getTimeStamp(),
                        type: i,
                        mode: o
                    }
                })
            }), r && this.report.reportImages(h)
        }, x.prototype.setBackgroundPic = function (t, e = y.FILL_MODE.DEFAULT) {
            t && (this.cancelSelect(), this.addBackgroundPic({
                boardIds: this.currentBoard,
                urls: t,
                type: y.BACKGROUND_TYPE.IMAGE,
                needReport: !1,
                position: e
            }), this.realTimeData.push({
                action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                url: t,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                mode: e,
                type: y.BACKGROUND_TYPE.IMAGE,
                cleanBoard: 0
            }), this.report.reportImage(this.currentBoard, t, e))
        }, x.prototype.setBackgroundH5 = function (t) {
            this.cancelSelect(), this.addBackgroundPic({
                boardIds: this.currentBoard,
                urls: t,
                type: y.BACKGROUND_TYPE.H5,
                needReport: !1
            }), this.realTimeData.push({
                action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                url: t,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                mode: y.FILL_MODE.DEFAULT,
                type: y.BACKGROUND_TYPE.H5,
                cleanBoard: 0
            }), this.report.reportImage(this.currentBoard, t, y.FILL_MODE.DEFAULT, y.BACKGROUND_TYPE.H5)
        }, x.prototype.updateCurrentFillMode = function (t) {
            var e = this.backgroundPic[this.currentBoard];
            e && e.url && this.setBackgroundPic(e.url, t)
        }, x.prototype.deleteBackgroundPic = function (t) {
            this.cancelSelect(), this.backgroundPic[t].show = !1, this.needDraw = !0
        }, x.prototype.cancelBackgroundPic = function () {
            this.cancelSelect(), this.deleteBackgroundPic(this.currentBoard), this.img.style.display = "none", this.realTimeData.push({
                action: f.PROTOCOL_ACTION.DELETE_BG_IMG_ACTION,
                seq: this.getSeq()
            }), this.report.reportImage(this.currentBoard, "", 0)
        }, x.prototype.clearGlobalBgColor = function () {
            this.setGlobalBackgroundColor(this.options.globalBackgroundColor)
        }, x.prototype.switchStep = function (t) {
            var e = this.getFileInfo(this.getCurrentFile());
            if (e.type == f.FILE_TYPE.H5) {
                e.currentPageStep < t ? I.gotoTimestamp(this.iframeDom, e.currentPageIndex, t, !0) : I.gotoTimestamp(this.iframeDom, e.currentPageIndex, t, !1), e.currentPageStep = t;
                var i = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : "";
                i && this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                    url: i,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    mode: this.backgroundPic[this.currentBoard].mode,
                    cleanBoard: 0
                }), this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.SWITCH_ACTION,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    toBoardId: this.getCurrentBoard(),
                    deleteBoards: [],
                    deleteFiles: [],
                    page: e.currentPageIndex,
                    step: t
                }), this.sendRequest(), this.report.reportAddFile(e), this.needDraw = !0
            }
        }, x.prototype.switchPage = function (t = 0) {
            var e, i;
            return e = (i = this.getBoardByGroup(this.getCurrentFile()))[t = Math.min(t, i.length - 1)], this.switchBoard(e)
        }, x.prototype.switchBoard = function (t) {
            if (this.cancelSelect(), t && !this.data[t]) return !1;
            var e = this.currentBoard;
            t || (t = this.createBoardId(), this.addBoard(t)), this.currentBoard = t, this.currentGroup = n.boardId2Fid(t);
            var i = this.getBoardByGroup(this.currentGroup), r = this.getFileInfo(this.currentGroup), o = i.indexOf(t),
                s = r.currentPageStep, a = n.boardId2Fid(e);
            r.type == f.FILE_TYPE.H5 && (a != this.currentGroup ? s = r.currentPageStep : (s = 0, i.indexOf(e) < o ? I.gotoTimestamp(this.iframeDom, o, s, !0) : I.gotoTimestamp(this.iframeDom, o, s, !1))), r.currentPageIndex = o, r.currentPageStep = s, r.pageCount = i.length;
            var h = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : "";
            return h && this.realTimeData.push({
                action: f.PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
                url: h,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                mode: this.backgroundPic[this.currentBoard].mode,
                cleanBoard: 0
            }), this.realTimeData.push({
                action: f.PROTOCOL_ACTION.SWITCH_ACTION,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                toBoardId: t,
                deleteBoards: [],
                deleteFiles: [],
                page: r.currentPageIndex,
                step: s
            }), this.sendRequest(), this.report.reportSwitchBoard(t), this.report.reportAddFile(r), m.fire(this, "TEB_GOTOBOARD", this.currentBoard, n.boardId2Fid(this.currentBoard)), this.needDraw = !0, t
        }, x.prototype.setGlobalBackgroundColor = function (t = y.COLOR.WHITE, e) {
            var i = 0;
            "number" == typeof t ? (this.globalBackgroundColor = n.dealColor(t), i = t) : "string" != typeof t || 0 != t.indexOf("#") || 4 !== t.length && 7 !== t.length ? "string" == typeof t && t.startsWith("rgba(") && (this.globalBackgroundColor = t, i = n.formatColor(t)) : (this.globalBackgroundColor = n.hexToRgba(t), i = n.formatColor(n.hexToRgba(t))), this.boardList.forEach(t => {
                this.backgroundColor[t] = this.globalBackgroundColor
            }), this.needDraw = !0, e || (this.realTimeData.push({
                action: f.PROTOCOL_ACTION.UPDATE_BG_COLOR_ACTION,
                time: n.getTimeStamp(),
                seq: g.getSeq(),
                color: i,
                isGlobal: 1
            }), this.report.reportGlobalBgColor(i))
        }, x.prototype.getGlobalBackgroundColor = function () {
            return this.globalBackgroundColor
        }, x.prototype.resetOperation = function () {
            this.opData[this.currentBoard] = this.opData[this.currentBoard].slice(0, this.opIndex[this.currentBoard])
        }, x.prototype.collectLineData = function () {
            return {
                start: (t, e) => {
                    var i = g.getSeq();
                    this.belongLineSeq = i;
                    var o = new h(this.identifier, {
                        color: this.color,
                        thin: this.thin,
                        x: t,
                        y: e,
                        show: !0,
                        seq: i,
                        belongSeq: i
                    });
                    this.userData[this.currentBoard][this.identifier].push(o), this.data[this.currentBoard].push(o), this.opData[this.currentBoard].push(new r(this.identifier, {
                        seq: o.seq,
                        type: this.type
                    })), this.opIndex[this.currentBoard]++;
                    var s = {
                        action: f.PROTOCOL_ACTION.LINE_START_ACTION,
                        color: n.formatColor(o.color),
                        scale: 100,
                        thin: o.thin,
                        time: n.getTimeStamp(),
                        seq: o.seq,
                        belongSeq: o.belongSeq,
                        x: t,
                        y: e
                    };
                    this.realTimeData.push(s)
                }, draw: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length,
                        r = this.userData[this.currentBoard][this.identifier][i - 1];
                    r.setBorder(t, e);
                    var o = g.getSeq();
                    r.lines.push({x: t, y: e, seq: o});
                    var s = {
                        action: f.PROTOCOL_ACTION.LINE_MOVE_ACTION,
                        seq: o,
                        belongSeq: this.belongLineSeq,
                        x: t,
                        y: e
                    };
                    this.realTimeData.push(s)
                }, end: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length,
                        r = this.userData[this.currentBoard][this.identifier][i - 1];
                    r.setBorder(t, e);
                    var o = g.getSeq();
                    r.lines.push({x: t, y: e, seq: o});
                    var s = {
                        action: f.PROTOCOL_ACTION.LINE_END_ACTION,
                        belongSeq: this.belongLineSeq,
                        seq: o,
                        x: t,
                        y: e
                    };
                    this.realTimeData.push(s);
                    var a = [];
                    r.lines.forEach(t => {
                        a.push({seq: t.seq, x: t.x, y: t.y})
                    }), this.currentBoard, this.identifier, n.formatColor(this.color), this.thin, r.time, n.getTimeStamp(), r.seq, this.report.reportAddLine({
                        boardId: this.currentBoard,
                        uid: r.user,
                        colorRGBA: n.formatColor(this.color),
                        scale: 100,
                        width: this.thin,
                        time: r.time,
                        updateTime: n.getTimeStamp(),
                        seq: r.seq,
                        hidden: 0,
                        points: a
                    })
                }, over(t, e) {
                    this.end(t, e)
                }
            }
        }, x.prototype.collectTextInputData = function () {
            return {
                start: (t, e) => {
                    var i, o = g.getSeq();
                    try {
                        var s = this.data[this.currentBoard], n = {seq: 0, index: -1};
                        if (s.forEach((i, r) => {
                            if ("inputtext" === i.type && i.show && i.user === this.identifier) {
                                var o = 5 / this.boardWidth * 1e4, s = 5 / this.boardHeight * 1e4, a = i.location.x - o,
                                    h = i.location.y - s, d = i.location.x + i.textWidth / this.boardWidth * 1e4 + o,
                                    l = i.location.y + i.textSize + s;
                                t >= a && t <= d && e >= h && e <= l && i.belongSeq > n.seq && (n = {
                                    seq: i.belongSeq,
                                    index: r
                                })
                            }
                        }), n.index > -1) {
                            var a = this.data[this.currentBoard].splice(n.index, 1)[0];
                            a.show = !1, this.setNeedDraw(!0), i = a, (this.userData[this.currentBoard][this.identifier] || []).forEach((t, e) => {
                                t.belongSeq === i.belongSeq && this.userData[this.currentBoard][this.identifier].splice(e, 1)
                            })
                        }
                    } catch (t) {
                    }
                    i || ((i = new T(this.identifier, {
                        x: t,
                        y: e,
                        belongSeq: o
                    })).color = this.getTextColor(), i.textSize = this.getTextSize(), i.typeFace = this.getTextFontFamily(), i.fontStyle = this.getTextFontStyle()), this.userData[this.currentBoard][this.identifier].push(i), this.data[this.currentBoard].push(i);
                    for (var h = !1, d = 0, l = this.opData[this.currentBoard].length; d < l; d++) if (this.opData[this.currentBoard][d].seq === i.belongSeq) {
                        h = !0;
                        break
                    }
                    return h || (this.opData[this.currentBoard].push(new r(this.identifier, {
                        seq: i.belongSeq,
                        type: this.type
                    })), this.opIndex[this.currentBoard]++), i
                }, inputting: t => {
                    var e = this.userData[this.currentBoard][this.identifier].length,
                        i = this.userData[this.currentBoard][this.identifier][e - 1], r = g.getSeq();
                    i.text = t, i.seq = r;
                    var o = {
                        action: f.PROTOCOL_ACTION.INPUT_TEXT_ACTION,
                        seq: r,
                        belongSeq: i.belongSeq,
                        color: n.formatColor(i.color),
                        scale: 100,
                        typeFace: i.typeFace,
                        textSize: Math.floor(i.textSize),
                        fontStyle: i.fontStyle,
                        time: n.getTimeStamp(),
                        x: i.location.x,
                        y: i.location.y,
                        text: t
                    };
                    this.realTimeData.push(o)
                }, draw: t => {
                    var e = this.userData[this.currentBoard][this.identifier].length,
                        i = this.userData[this.currentBoard][this.identifier][e - 1];
                    if (!t && !t.trim()) {
                        for (var r = -1, o = 0, s = this.opData[this.currentBoard].length; o < s; o++) if (this.opData[this.currentBoard][o].seq === i.belongSeq) {
                            r = o;
                            break
                        }
                        return r > -1 && (this.opData[this.currentBoard].splice(r, 1), this.opIndex[this.currentBoard]--), this.userData[this.currentBoard][this.identifier].splice(e - 1, 1), void this.data[this.currentBoard].splice(this.data[this.currentBoard].length - 1, 1)
                    }
                    i.text = t, i.show = !0, this.ctx.setFontSize(Math.ceil(i / 1e4 * this.boardHeight));
                    var a = Math.ceil(this.ctx.measureText(t).width);
                    i.textWidth = a, this.report.reportAddText({
                        belongSeq: i.belongSeq,
                        time: i.time,
                        boardId: this.currentBoard,
                        uid: i.user,
                        x: Math.floor(i.location.x),
                        y: Math.floor(i.location.y),
                        colorRGBA: n.formatColor(i.color),
                        scale: 100,
                        updateTime: n.getTimeStamp(),
                        hidden: 0,
                        typeface: i.typeFace,
                        textSize: Math.floor(i.textSize),
                        fontStyle: i.fontStyle,
                        text: t
                    })
                }
            }
        }, x.prototype.collectEraserData = function (t, e) {
            var i = this.eraserImpactCheck(t, e, this.radius);
            if (i.length > 0) {
                this.opData[this.currentBoard].push(new r(this.identifier, {
                    seq: i,
                    type: this.type
                })), this.opIndex[this.currentBoard]++;
                var o = {
                    action: f.PROTOCOL_ACTION.ERASER_ACTION,
                    display: 0,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    x: 0,
                    y: 0,
                    lines: i
                };
                i.length && (this.realTimeData.push(o), this.report.reportDisplayLine({
                    boardId: this.currentBoard,
                    updateTime: n.getTimeStamp(),
                    display: 0,
                    lines: i
                })), this.needDraw = !0
            }
        }, x.prototype.collectRaserData = function () {
            return {
                start: (t, e) => {
                    var i = new u(this.identifier, {
                        color: n.dealColor(y.COLOR.RED),
                        radius: this.thin,
                        x: t,
                        y: e,
                        seq: g.getSeq()
                    });
                    this.seq = i.seq, this.userData[this.currentBoard][this.identifier].push(i), this.data[this.currentBoard].push(i);
                    var r = {action: f.PROTOCOL_ACTION.RASER_SHOW_ACTION, r: this.thin, seq: i.seq, x: t, y: e};
                    this.realTimeData.push(r), this.needDraw = !0
                }, draw: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length;
                    this.userData[this.currentBoard][this.identifier][i - 1].location = {
                        x: t,
                        y: e
                    }, this.needDraw = !0, this.realTimeData.push({
                        action: f.PROTOCOL_ACTION.RASER_SHOW_ACTION,
                        seq: g.getSeq(),
                        x: t,
                        y: e,
                        r: this.thin
                    })
                }, end: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length,
                        r = this.userData[this.currentBoard][this.identifier][i - 1];
                    r.point = {x: t, y: e}, r.status = 0;
                    var o = {action: f.PROTOCOL_ACTION.RASER_HIDE_ACTION, seq: r.seq};
                    this.realTimeData.push(o), this.needDraw = !0
                }, over() {
                    var t = this.userData[this.currentBoard][this.identifier].length;
                    this.userData[this.currentBoard][this.identifier][t - 1].status = 0, this.needDraw = !0
                }
            }
        }, x.prototype.collectSelectData = function () {
            return {
                start: (t, e) => {
                    this.beforeMoveType = "select";
                    var i = new l(this.identifier, {startx: t, starty: e, x: t, y: e});
                    this.seq = i.seq, this.userData[this.currentBoard][this.identifier].push(i), this.data[this.currentBoard].push(i)
                }, draw: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length;
                    this.userData[this.currentBoard][this.identifier][i - 1].location = {x: t, y: e}, this.needDraw = !0
                }, end: (t, e, i, r) => {
                    for (var o = t > i ? t : i, s = e > r ? e : r, n = t + i - o, a = e + r - s, h = this.data[this.currentBoard].length - 1; h >= 0; h--) {
                        var d = this.data[this.currentBoard][h];
                        if ("line" == d.type && d.show) o >= d.border.maxX && s >= d.border.maxY && n <= d.border.minX && a <= d.border.minY && (d.select = !0, this.selectedList.push(d)); else if ("graph" == d.type && d.show) o >= d.endPoint.x && s >= d.endPoint.y && n <= d.startPoint.x && a <= d.startPoint.y && (d.select = !0, this.selectedList.push(d)); else if ("inputtext" == d.type && d.show) {
                            var l = d.location.x, u = d.location.y,
                                c = d.location.x + d.textWidth / this.boardWidth * 1e4, p = d.location.y + d.textSize;
                            o >= c && s >= p && n <= l && a <= u && (d.select = !0, this.selectedList.push(d))
                        }
                    }
                    this.selectArea = {
                        x: n,
                        y: a,
                        width: o - n,
                        height: s - a
                    }, this.userData[this.currentBoard][this.identifier][this.userData[this.currentBoard][this.identifier].length - 1].show = !1, this.needDraw = !0
                }
            }
        }, x.prototype.collectPointSelectData = function (t, e) {
            this.beforeMoveType = "pointselect";
            for (var i = !1, r = this.data[this.currentBoard].length - 1; r >= 0; r--) {
                var o = this.data[this.currentBoard][r];
                if ("line" == o.type && o.show) {
                    if (t < o.border.maxX && t > o.border.minX && e < o.border.maxY && e > o.border.minY) {
                        i = !0, o.select = !0, this.selectedList = [o], this.selectArea = {
                            x: o.border.minX,
                            y: o.border.minY,
                            width: o.border.maxX - o.border.minX,
                            height: o.border.maxY - o.border.minY
                        };
                        break
                    }
                } else if ("graph" == o.type && o.show) {
                    var s = o.endPoint.x, n = o.endPoint.y, a = o.startPoint.x, h = o.startPoint.y;
                    if (s < a && (s += a, s -= a = s - a), n < h && (n += h, n -= h = n - h), n += this.thin, s += this.thin, a -= this.thin, h -= this.thin, t >= a && t <= s && e >= h && e <= n) {
                        i = !0, o.select = !0, this.selectedList = [o], this.selectArea = {
                            x: a,
                            y: h,
                            width: s - a,
                            height: n - h
                        };
                        break
                    }
                } else if ("inputtext" === o.type && o.show) {
                    var d = 5 / this.boardWidth * 1e4, l = 5 / this.boardHeight * 1e4, u = o.location.x - d,
                        c = o.location.y - l, p = o.location.x + o.textWidth / this.boardWidth * 1e4 + d,
                        g = o.location.y + o.textSize + l;
                    if (t >= u && t <= p && e >= c && e <= g) {
                        i = !0, o.select = !0, this.selectedList = [o], this.selectArea = {
                            x: u,
                            y: c,
                            width: p - u,
                            height: g - c
                        };
                        break
                    }
                }
            }
            i && (this.needDraw = !0)
        }, x.prototype.collectMoverData = function () {
            return {
                beforeStart: (t, e) => {
                    if (0 == this.selectedList.length) return !1;
                    for (var i = !1, r = 0; r < this.selectedList.length; r++) {
                        var o = this.selectedList[r];
                        if ("line" == o.type) {
                            var s = 1.5 * this.thin, n = 1.5 * this.thin;
                            if (o.border.minX - s <= t && o.border.maxX + s >= t && o.border.minY - n <= e && o.border.maxY + n >= e) {
                                i = !0;
                                break
                            }
                        } else if ("graph" == o.type) {
                            var a = o.startPoint.x, h = o.endPoint.x, d = o.startPoint.y, l = o.endPoint.y;
                            if (h < a && (h += a, h -= a = h - a), l < d && (l += d, l -= d = l - d), l += this.thin, h += this.thin, d -= this.thin, (a -= this.thin) <= t && h >= t && d <= e && l >= e) {
                                i = !0;
                                break
                            }
                        } else if ("inputtext" === o.type) {
                            var u = 5 / this.boardWidth * 1e4, c = 5 / this.boardHeight * 1e4, p = o.location.x - u,
                                g = o.location.y - c, f = o.location.x + o.textWidth / this.boardWidth * 1e4 + u,
                                _ = o.location.y + o.textSize + c;
                            if (t >= p && t <= f && e >= g && e <= _) {
                                i = !0;
                                break
                            }
                        }
                    }
                    return !!i || (this.cancelSelect(), !1)
                }, start: (t, e) => {
                    var i = [];
                    this.selectedList.forEach(t => {
                        "line" == t.type ? i.push({
                            uid: t.user,
                            seq: t.seq,
                            x: t.lines[0].x,
                            y: t.lines[0].y
                        }) : "graph" == t.type ? i.push({
                            uid: t.user,
                            seq: t.startPoint.seq,
                            x: t.startPoint.x,
                            y: t.startPoint.y
                        }) : "inputtext" == t.type && i.push({
                            uid: t.user,
                            seq: t.belongSeq,
                            x: t.location.x,
                            y: t.location.y
                        })
                    }), this.opData[this.currentBoard].push(new r(this.identifier, {
                        seq: {origin: i, final: []},
                        type: "move"
                    }))
                }, draw: (t, e, i, r) => {
                    if (this.selectedList.length > 0) {
                        for (var o = 0; o < this.selectedList.length; o++) {
                            var s = this.selectedList[o], n = t - i, a = e - r;
                            "line" == s.type ? (s.border.maxX += n, s.border.minX += n, s.border.maxY += a, s.border.minY += a, s.lines.forEach(t => {
                                t.x += n, t.y += a
                            })) : "graph" == s.type ? (s.startPoint.x += n, s.startPoint.y += a, s.endPoint.x += n, s.endPoint.y += a) : "inputtext" === s.type && (s.location.x += n, s.location.y += a)
                        }
                        this.selectArea.x += n, this.selectArea.y += a, this.needDraw = !0
                    }
                }, end: () => {
                    this.needDraw = !0;
                    var t = [];
                    if (0 != this.selectedList.length) {
                        this.selectedList.forEach(e => {
                            "line" == e.type ? t.push({
                                seq: e.seq,
                                x: e.lines[0].x,
                                y: e.lines[0].y,
                                uid: e.user
                            }) : "graph" == e.type ? t.push({
                                seq: e.startPoint.seq,
                                x: e.startPoint.x,
                                y: e.startPoint.y,
                                uid: e.user
                            }) : "inputtext" === e.type && t.push({
                                seq: e.belongSeq,
                                x: e.location.x,
                                y: e.location.y,
                                uid: e.user
                            })
                        });
                        var e = {
                            action: f.PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
                            seq: g.getSeq(),
                            moves: t,
                            time: n.getTimeStamp()
                        };
                        this.realTimeData.push(e);
                        var i = [];
                        this.selectedList.forEach(t => {
                            "line" == t.type ? i.push({
                                uid: t.user,
                                seq: t.seq,
                                x: t.lines[0].x,
                                y: t.lines[0].y
                            }) : "graph" == t.type ? i.push({
                                uid: t.user,
                                seq: t.startPoint.seq,
                                x: t.startPoint.x,
                                y: t.startPoint.y
                            }) : "inputtext" === t.type && i.push({
                                uid: t.user,
                                seq: t.belongSeq,
                                x: t.location.x,
                                y: t.location.y
                            })
                        }), this.opData[this.currentBoard][this.opData[this.currentBoard].length - 1].seq.final = i, this.opIndex[this.currentBoard]++;
                        var r = [];
                        t.forEach(t => {
                            for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                                var o = this.userData[this.currentBoard][e][i];
                                if ("line" == o.type && t.seq == o.seq) {
                                    var s = [];
                                    o.lines.forEach(t => {
                                        s.push({seq: t.seq, x: t.x, y: t.y})
                                    }), r.push({
                                        type: "addLine",
                                        seq: g.getSeq(),
                                        content: {
                                            boardId: this.currentBoard,
                                            uid: o.user,
                                            colorRGBA: n.formatColor(o.color),
                                            scale: 100,
                                            width: o.thin,
                                            time: o.time,
                                            updateTime: n.getTimeStamp(),
                                            seq: o.seq,
                                            hidden: 0,
                                            points: s
                                        }
                                    })
                                } else if ("graph" == o.type && t.seq == o.startPoint.seq) {
                                    var a = {
                                        type: {
                                            line: "addPatternLine",
                                            oval: "addPatternCircle",
                                            circle: "addPatternCircle",
                                            rect: "addPatternRectangle"
                                        }[o.graph],
                                        seq: g.getSeq(),
                                        content: {
                                            boardId: this.currentBoard,
                                            uid: o.user,
                                            colorRGBA: n.formatColor(o.color),
                                            scale: 100,
                                            width: o.thin,
                                            time: o.time,
                                            updateTime: n.getTimeStamp(),
                                            hidden: 0,
                                            beginPoint: {x: o.startPoint.x, y: o.startPoint.y, seq: o.startPoint.seq},
                                            endPoint: {x: o.endPoint.x, y: o.endPoint.y, seq: o.endPoint.seq}
                                        }
                                    };
                                    "oval" == o.graph || "circle" == o.graph ? a.content.fillRect = o.solid ? 1 : 0 : "rect" == o.graph && (a.content.fillRect = o.solid ? 1 : 0, a.content.cornerRadius = 0), r.push(a)
                                } else "inputtext" === o.type && t.seq == o.belongSeq && r.push({
                                    type: "addText",
                                    seq: g.getSeq(),
                                    content: {
                                        belongSeq: o.belongSeq,
                                        time: n.getTimeStamp(),
                                        boardId: this.currentBoard,
                                        uid: o.user,
                                        x: o.location.x,
                                        y: o.location.y,
                                        colorRGBA: n.formatColor(o.color),
                                        scale: o.scale,
                                        updateTime: n.getTimeStamp(),
                                        hidden: 0,
                                        typeface: o.typeFace,
                                        textSize: o.textSize,
                                        fontStyle: o.fontStyle,
                                        text: o.text
                                    }
                                })
                            }
                        }), this.report.reportGraphData(r)
                    }
                }
            }
        }, x.prototype.collectGraphData = function () {
            return {
                start: (t, e) => {
                    var i = this.type.split("-")[1], o = new d(this.identifier, {
                        graph: i,
                        color: this.color,
                        thin: this.thin,
                        seq: g.getSeq(),
                        beginPoint: {x: t, y: e, seq: g.getSeq()},
                        endPoint: {x: t, y: e, seq: g.getSeq()},
                        show: !0,
                        solid: this.type.indexOf("solid") > -1
                    });
                    this.seq = o.seq, this.userData[this.currentBoard][this.identifier].push(o), this.data[this.currentBoard].push(o), this.opData[this.currentBoard].push(new r(this.identifier, {
                        seq: o.startPoint.seq,
                        type: "graph"
                    })), this.opIndex[this.currentBoard]++
                }, draw: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length,
                        r = this.userData[this.currentBoard][this.identifier][i - 1];
                    r.endPoint.x = t, r.endPoint.y = e, "circle" == r.graph && this.circleFix(r), this.needDraw = !0
                }, end: (t, e) => {
                    var i = this.userData[this.currentBoard][this.identifier].length,
                        r = this.userData[this.currentBoard][this.identifier][i - 1];
                    r.endPoint.x = t, r.endPoint.y = e, "circle" == r.graph && this.circleFix(r), "line" != r.graph && this.graphFix(r), this.needDraw = !0;
                    var o = {
                        seq: r.seq,
                        time: n.getTimeStamp(),
                        color: n.formatColor(this.color),
                        scale: 100,
                        thin: this.thin,
                        beginPoint: {x: r.startPoint.x, y: r.startPoint.y, seq: r.startPoint.seq},
                        endPoint: {x: r.endPoint.x, y: r.endPoint.y, seq: r.endPoint.seq}
                    };
                    o.action = {line: 10, oval: 11, circle: 11, rect: 12}[r.graph];
                    var s = {
                        type: {
                            line: "addPatternLine",
                            oval: "addPatternCircle",
                            circle: "addPatternCircle",
                            rect: "addPatternRectangle"
                        }[r.graph],
                        seq: g.getSeq(),
                        content: {
                            boardId: this.currentBoard,
                            uid: r.user,
                            colorRGBA: n.formatColor(this.color),
                            scale: 100,
                            width: this.thin,
                            time: r.time,
                            updateTime: n.getTimeStamp(),
                            hidden: 0,
                            beginPoint: {x: r.startPoint.x, y: r.startPoint.y, seq: r.startPoint.seq},
                            endPoint: {x: r.endPoint.x, y: r.endPoint.y, seq: r.endPoint.seq}
                        }
                    }, a = this.type.indexOf("solid") > -1 ? 1 : 0;
                    o.action > 10 && (o.fillRect = a, s.content.fillRect = a), 12 == o.action && (o.cornerRadius = 0, s.content.cornerRadius = 0), this.realTimeData.push(o), this.report.reportGraphData([s])
                }, over(t, e) {
                    this.end(t, e)
                }
            }
        }, x.prototype.cancelSelect = function () {
            for (var t = 0; t < this.selectedList.length; t++) this.selectedList[t].select = !1;
            this.selectedList = [], this.selectArea = {x: 0, y: 0, width: 0, height: 0}, this.needDraw = !0
        }, x.prototype.eraserImpactCheck = function (t, e, i) {
            var r = [];
            return this.data[this.currentBoard].forEach(o => {
                if ("line" == o.type && o.show) {
                    var s = !1, n = o.border.maxX, a = o.border.maxY, h = o.border.minX, d = o.border.minY, l = 0;
                    if (n >= t && a >= e && h <= t && d <= e ? s = !0 : n >= t && h <= t ? (l = Math.min(Math.abs(a - e), Math.abs(d - e))) <= i && (s = !0) : a >= e && d <= e ? (l = Math.min(Math.abs(n - t), Math.abs(h - t))) <= i && (s = !0) : n < t ? (l = 0, (l = a < e ? Math.pow(t - n, 2) + Math.pow(e - a, 2) : Math.pow(t - n, 2) + Math.pow(e - d, 2)) <= Math.pow(i, 2) && (s = !0)) : (l = 0, (l = a < e ? Math.pow(t - h, 2) + Math.pow(e - a, 2) : Math.pow(t - h, 2) + Math.pow(e - d, 2)) <= Math.pow(i, 2) && (s = !0)), !s) return;
                    s = !1;
                    for (var u = 1; u < o.lines.length; u++) {
                        var c = o.lines[u], p = o.lines[u - 1];
                        if ((l = this.getDistance(t, e, c.x, c.y, p.x, p.y)) <= (i + this.thin) * (i + this.thin)) {
                            s = !0;
                            break
                        }
                    }
                    s && (o.show = !1, r.push({uid: o.user, seq: o.seq}))
                } else if ("graph" == o.type && o.show) {
                    if ("line" == o.graph) (l = this.getDistance(t, e, o.startPoint.x, o.startPoint.y, o.endPoint.x, o.endPoint.y)) <= (i + this.thin) * (i + this.thin) && (o.show = !1, r.push({
                        uid: o.user,
                        seq: o.startPoint.seq
                    })); else if ("rect" == o.graph) if (o.solid) t > o.startPoint.x && e > o.startPoint.y && t < o.endPoint.x && e < o.endPoint.y && (o.show = !1, r.push({
                        uid: o.user,
                        seq: o.startPoint.seq
                    })); else {
                        var g = this.getDistance(t, e, o.startPoint.x, o.startPoint.y, o.startPoint.x, o.endPoint.y),
                            f = this.getDistance(t, e, o.startPoint.x, o.startPoint.y, o.endPoint.x, o.startPoint.y),
                            _ = this.getDistance(t, e, o.endPoint.x, o.endPoint.y, o.startPoint.x, o.endPoint.y),
                            m = this.getDistance(t, e, o.endPoint.x, o.endPoint.y, o.endPoint.x, o.startPoint.y);
                        Math.min(g, f, _, m) <= (i + this.thin) * (i + this.thin) && (o.show = !1, r.push({
                            uid: o.user,
                            seq: o.startPoint.seq
                        }))
                    } else if ("circle" == o.graph) {
                        let s = (o.startPoint.x + o.endPoint.x) / 2, n = (o.startPoint.y + o.endPoint.y) / 2;
                        var T = Math.sqrt(Math.pow(o.startPoint.x - o.endPoint.x, 2) + Math.pow(o.startPoint.y - o.endPoint.y, 2)) / 2;
                        l = Math.sqrt(Math.pow(t - s, 2) + Math.pow(e - n, 2)), o.solid ? l < T + i && (o.show = !1, r.push({
                            uid: o.user,
                            seq: o.startPoint.seq
                        })) : Math.abs(T - l) <= i + this.thin && (o.show = !1, r.push({
                            uid: o.user,
                            seq: o.startPoint.seq
                        }))
                    } else if ("oval" == o.graph) {
                        let i = (o.startPoint.x + o.endPoint.x) / 2, s = (o.startPoint.y + o.endPoint.y) / 2;
                        var y = Math.abs(o.startPoint.x - o.endPoint.x) / 2,
                            b = Math.abs(o.startPoint.y - o.endPoint.y) / 2;
                        if (y === b && 0 === y) return;
                        var D = Math.pow(t - i, 2) / Math.pow(y, 2) + Math.pow(e - s, 2) / Math.pow(b, 2),
                            E = Math.pow(t - i + this.thin / 2, 2) / Math.pow(y, 2) + Math.pow(e - s + this.thin / 2, 2) / Math.pow(b, 2),
                            O = Math.pow(t - i + this.thin / 2, 2) / Math.pow(y, 2) + Math.pow(e - s - this.thin / 2, 2) / Math.pow(b, 2),
                            S = Math.pow(t - i - this.thin / 2, 2) / Math.pow(y, 2) + Math.pow(e - s + this.thin / 2, 2) / Math.pow(b, 2),
                            B = Math.pow(t - i - this.thin / 2, 2) / Math.pow(y, 2) + Math.pow(e - s - this.thin / 2, 2) / Math.pow(b, 2);
                        o.solid ? (D <= 1.2 || E <= 1.2 || O <= 1.2 || S <= 1.2 || B <= 1.2) && (o.show = !1, r.push({
                            uid: o.user,
                            seq: o.startPoint.seq
                        })) : (D <= 1.2 && D >= .8 || E <= 1.2 && E >= .8 || O <= 1.2 && O >= .8 || S <= 1.2 && S >= .8 || B <= 1.2 && B >= .8) && (o.show = !1, r.push({
                            uid: o.user,
                            seq: o.startPoint.seq
                        }))
                    }
                } else if ("inputtext" == o.type && o.show) {
                    var I = 5 / this.boardWidth * 1e4, A = 5 / this.boardHeight * 1e4, C = o.location.x - I,
                        x = o.location.y - A, P = o.location.x + o.textWidth / this.boardWidth * 1e4 + I,
                        q = o.location.y + o.textSize + A;
                    t > C && e > x && t < P && e < q && (o.show = !1, r.push({uid: o.user, seq: o.belongSeq}))
                }
            }), r
        }, x.prototype.getDistance = function (t, e, i, r, o, s) {
            var n = {};
            if (i == o) n.x = i, n.y = e; else {
                var a = (r - s) / (i - o), h = r - a * i, d = t + a * e;
                n.x = (d - a * h) / (a * a + 1), n.y = a * n.x + h
            }
            return n.x >= i && n.x <= o || n.x <= i && n.x >= o ? (n.x - t) * (n.x - t) + (n.y - e) * (n.y - e) : Math.min((i - t) * (i - t) + (r - e) * (r - e), (o - t) * (o - t) + (s - e) * (s - e))
        }, x.prototype.circleFix = function (t) {
            var e = Math.abs(t.startPoint.x - t.endPoint.x) * this.boardWidth / 1e4,
                i = Math.abs(t.startPoint.y - t.endPoint.y) * this.boardHeight / 1e4;
            e > i ? (t.endPoint.x = t.startPoint.x < t.endPoint.x ? t.startPoint.x + 1e4 * i / this.boardWidth : t.startPoint.x - 1e4 * i / this.boardWidth, t.endPoint.x = parseInt(t.endPoint.x)) : (t.endPoint.y = t.startPoint.y < t.endPoint.y ? t.startPoint.y + 1e4 * e / this.boardHeight : t.startPoint.y - 1e4 * e / this.boardHeight, t.endPoint.y = parseInt(t.endPoint.y))
        }, x.prototype.graphFix = function (t) {
            var e = t.startPoint.x, i = t.startPoint.y, r = t.endPoint.x, o = t.endPoint.y;
            t.startPoint = {x: e > r ? r : e, y: i > o ? o : i, seq: t.startPoint.seq}, t.endPoint = {
                x: e > r ? e : r,
                y: i > o ? i : o,
                seq: t.endPoint.seq
            }
        }, x.prototype.sendRequest = function () {
            if (this.permissions) {
                var t = JSON.parse(JSON.stringify(this.realTimeData)), e = {
                    seq: g.getSeq(),
                    timestamp: n.getTimeStamp(),
                    value: {boardId: this.currentBoard, operator: this.identifier, actions: t}
                };
                this.realTimeData = [], m.fire(this, "TEB_SYNCDATA", e)
            }
        }, x.prototype.addHistory = function (t) {
            var e = this;
            this.sortBoard(), t.forEach(t => {
                var i, r;
                if (t.content = JSON.parse(t.content), "setGlobalBG" === t.type) ; else if ("createBoards" === t.type) t.content && t.content.createBoards.forEach(t => {
                    (i = t) && !e.userData[i] && e.addBoard(i, !1)
                }); else if ("addFile" === t.type) {
                    for (var o = t.content.fid, s = t.content.title, a = t.content.downloadURL, l = t.content.pageCount, u = t.content.currentPageIndex, c = t.content.currentPageStep || 0, p = t.content.timestamp, g = t.content.uid, _ = t.content.platform, b = t.content.type, E = !1, O = 0, S = e.groups.length; O < S; O++) {
                        var B = e.groups[O];
                        if (B.fid == o) {
                            B.title = s, B.downloadURL = a, B.pageCount = l, B.currentPageIndex = u, B.currentPageStep = c, B.timestamp = p, B.uid = g, B.type = b, E = !0;
                            break
                        }
                    }
                    if (E ? E && o === f.COMMON_GROUP && m.fire(this, "TEB_ADDFILE", o) : e.addGroup(o, s, g, a, l, u, p, _, b, c), !p && !g && !_) return;
                    if (o != f.COMMON_GROUP) {
                        var I = e.createBoardIdForFile(o, g, p, l, _), A = [], C = n.fileDownLoadUrlToPreviewUrl(a);
                        for (let t = 0; t < l; t++) i = I[t], A.push(C + (t + 1)), i && !e.userData[i] && e.addBoard(i, !1);
                        b == f.FILE_TYPE.IMG && e.addBackgroundPic({
                            boardIds: I,
                            urls: A,
                            type: y.BACKGROUND_TYPE.IMAGE,
                            needReport: !1
                        })
                    }
                } else i = t.content.boardId, r = t.content.uid, i && !e.userData[i] && e.addBoard(i, !1), i && !e.userData[i][r] && (e.userData[i][r] = []);
                if (t.content.colorRGBA && (t.content.color = n.dealColor(t.content.colorRGBA)), t.content.width && (t.content.thin = t.content.width), "addLine" == t.type) {
                    var x;
                    for (let e = 0; e < t.content.points.length - 1; e++) {
                        var P = t.content.points[e].x, q = t.content.points[e].y, R = t.content.points[0].seq;
                        0 == e ? x = new h(r, {
                            color: t.content.color,
                            thin: t.content.thin,
                            x: P,
                            y: q,
                            seq: t.content.points[e].seq,
                            belongSeq: R,
                            show: !t.content.hidden
                        }) : (x.lines.push({
                            x: P,
                            y: q,
                            belongSeq: R,
                            seq: t.content.points[e].seq
                        }), x.sort(), e == t.content.points.length - 1 && (x.endSeq = t.content.points[e].seq)), x.setBorder(P, q)
                    }
                    x && (e.userData[i][r].push(x), e.data[i].push(x))
                } else if ("addText" == t.type) {
                    var v = new T(r, {belongSeq: t.content.belongSeq, x: t.content.x, y: t.content.y});
                    v.seq = t.content.belongSeq, v.scale = t.content.scale, v.color = t.content.color, v.typeFace = t.content.typeface, v.textSize = t.content.textSize, v.fontStyle = t.content.fontStyle, v.time = t.content.time, v.text = t.content.text, v.show = !t.content.hidden, e.ctx.font = `${n.fontStyle2CanvasFontStyle(t.content.fontStyle)}${Math.ceil(t.content.textSize / 1e4 * e.boardHeight)}px ${e.getTextFontFamily()}`;
                    var w = Math.ceil(e.ctx.measureText(t.content.text).width);
                    v.textWidth = w, e.userData[i][r].push(v), e.data[i].push(v)
                } else if ("displayLine" == t.type) t.content.lines.forEach(i => {
                    for (var o = 0; o < e.userData[e.currentBoard][r].length; o++) {
                        var s = e.userData[e.currentBoard][r][o];
                        "line" == s.type && s.startSeq == i.seq ? s.show = !!t.content.display : "graph" == s.type && s.startPoint.seq == i.seq ? s.show = !!t.content.display : "inputtext" == s.type && s.belongSeq == i.seq && (s.show = !!t.content.display)
                    }
                }); else if ("addPatternLine" == t.type || "addPatternCircle" == t.type || "addPatternRectangle" == t.type) {
                    t.content.graph = {
                        addPatternLine: "line",
                        addPatternCircle: "oval",
                        addPatternRectangle: "rect"
                    }[t.type], t.content.seq = t.content.beginPoint.seq, t.content.show = !t.content.hidden, t.content.solid = !!t.content.fillRect;
                    var L = new d(r, t.content);
                    e.userData[i][r].push(L), e.data[i].push(L)
                } else if ("image" == t.type) t.content.url ? e.addBackgroundPic({
                    boardIds: t.content.boardId,
                    urls: t.content.url,
                    type: t.content.type,
                    needReport: !1,
                    position: t.content.mode
                }) : e.deleteBackgroundPic(t.content.boardId); else if ("clean" == t.type) e.clearBoard(!1); else if ("cleanDraws" == t.type) e.clearBoard(!0); else if ("switchBoard" == t.type) {
                    if (!i) return;
                    (1 * t.seq || 0) > e.maxSeq ? (e.maxSeq = t.seq, e.data[i] || e.addBoard(i, !1), e.currentBoard = i, i === f.COMMON_DEFAULT_BOARD ? e.currentGroup = f.COMMON_GROUP : e.currentGroup = i.match(/\d+_#\w+$/)[0].split("_")[1], m.fire(this, "TEB_GOTOBOARD", i, n.boardId2Fid(i))) : D.report("throw_seq", {
                        extra_info: JSON.stringify({
                            seq: t.seq,
                            maxSeq: e.maxSeq,
                            boardId: i,
                            method: "addHistory"
                        })
                    })
                } else "setBoardBG" == t.type ? e.setBackgroundColor({
                    boardId: i,
                    color: t.content.colorRGBA
                }, !0) : "setGlobalBG" == t.type && e.setGlobalBackgroundColor(t.content.colorRGBA, !0)
            }), e.needDraw = !0
        }, x.prototype.undo = function () {
            this.cancelSelect();
            var t = this.opData[this.currentBoard][this.opIndex[this.currentBoard] - 1];
            if (t) {
                if ("line" == t.type) for (var e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    var i = this.userData[this.currentBoard][t.user][e];
                    if (t.seq == i.seq) {
                        i.show = !1, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 0,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 0,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("eraser" == t.type) t.seq.forEach(t => {
                    for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                        var r = this.userData[this.currentBoard][e][i];
                        "line" == r.type && t.seq == r.seq ? r.show = !0 : "graph" == r.type && t.seq == r.startPoint.seq ? r.show = !0 : "inputtext" == r.type && t.seq == r.belongSeq && (r.show = !0)
                    }
                }), this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.ERASER_ACTION,
                    display: 1,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    lines: t.seq
                }), this.report.reportDisplayLine({
                    boardId: this.currentBoard,
                    updateTime: n.getTimeStamp(),
                    display: 1,
                    lines: t.seq
                }); else if ("graph" == t.type) for (let e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    let i = this.userData[this.currentBoard][t.user][e];
                    if ("graph" == i.type && t.seq == i.startPoint.seq) {
                        i.show = !1, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 0,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 0,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("inputtext" == t.type) for (let e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    let i = this.userData[this.currentBoard][t.user][e];
                    if ("inputtext" == i.type && t.seq == i.belongSeq) {
                        i.show = !1, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 0,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 0,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("move" == t.type) {
                    var r = [];
                    t.seq.origin.forEach(t => {
                        for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                            var o = this.userData[this.currentBoard][e][i], s = 0, n = 0;
                            "line" == o.type && t.seq == o.seq ? (s = t.x - o.lines[0].x, n = t.y - o.lines[0].y, o.border.maxX += s, o.border.minX += s, o.border.maxY += n, o.border.minY += n, o.lines.forEach(t => {
                                t.x += s, t.y += n
                            }), r.push({
                                uid: e,
                                seq: t.seq,
                                x: t.x,
                                y: t.y
                            })) : "graph" == o.type && t.seq == o.startPoint.seq ? (s = t.x - o.startPoint.x, n = t.y - o.startPoint.y, o.startPoint.x += s, o.startPoint.y += n, o.endPoint.x += s, o.endPoint.y += n, r.push({
                                uid: e,
                                seq: t.seq,
                                x: t.x,
                                y: t.y
                            })) : "inputtext" == o.type && t.seq == o.belongSeq && (o.location.x = t.x, o.location.y = t.y, r.push({
                                uid: e,
                                seq: o.belongSeq,
                                x: t.x,
                                y: t.y
                            }))
                        }
                    }), this.realTimeData.push({
                        action: f.PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
                        time: n.getTimeStamp(),
                        seq: g.getSeq(),
                        moves: r
                    });
                    var o = [];
                    t.seq.origin.forEach(t => {
                        for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                            var r = this.userData[this.currentBoard][e][i];
                            if ("line" == r.type && t.seq == r.seq) {
                                var s = [];
                                r.lines.forEach(t => {
                                    s.push({seq: t.seq, x: t.x, y: t.y})
                                }), o.push({
                                    type: "addLine",
                                    seq: g.getSeq(),
                                    content: {
                                        boardId: this.currentBoard,
                                        uid: r.user,
                                        colorRGBA: n.formatColor(r.color),
                                        scale: 100,
                                        width: r.thin,
                                        time: r.time,
                                        updateTime: n.getTimeStamp(),
                                        seq: r.seq,
                                        hidden: 0,
                                        points: s
                                    }
                                })
                            } else if ("graph" == r.type && t.seq == r.startPoint.seq) {
                                var a = {
                                    type: {
                                        line: "addPatternLine",
                                        oval: "addPatternCircle",
                                        circle: "addPatternCircle",
                                        rect: "addPatternRectangle"
                                    }[r.graph],
                                    seq: g.getSeq(),
                                    content: {
                                        boardId: this.currentBoard,
                                        uid: r.user,
                                        colorRGBA: n.formatColor(r.color),
                                        scale: 100,
                                        width: r.thin,
                                        time: r.time,
                                        updateTime: n.getTimeStamp(),
                                        hidden: 0,
                                        fillRect: r.solid ? 1 : 0,
                                        beginPoint: {x: r.startPoint.x, y: r.startPoint.y, seq: r.startPoint.seq},
                                        endPoint: {x: r.endPoint.x, y: r.endPoint.y, seq: r.endPoint.seq}
                                    }
                                };
                                "rect" == r.graph && (a.content.cornerRadius = 0), o.push(a)
                            } else "inputtext" === r.type && t.seq == r.belongSeq && o.push({
                                type: "addText",
                                seq: g.getSeq(),
                                content: {
                                    belongSeq: r.belongSeq,
                                    time: n.getTimeStamp(),
                                    boardId: this.currentBoard,
                                    uid: r.user,
                                    x: r.location.x,
                                    y: r.location.y,
                                    colorRGBA: n.formatColor(r.color),
                                    scale: r.scale,
                                    updateTime: n.getTimeStamp(),
                                    hidden: 0,
                                    typeface: r.typeFace,
                                    textSize: r.textSize,
                                    fontStyle: r.fontStyle,
                                    text: r.text
                                }
                            })
                        }
                    }), this.report.reportGraphData(o)
                }
                this.opIndex[this.currentBoard]--, this.needDraw = !0, m.fire(this, "TEB_OPERATE_CANREDO_STATUS_CHANGED", this.canRedo()), m.fire(this, "TEB_OPERATE_CANUNDO_STATUS_CHANGED", this.canUndo())
            }
        }, x.prototype.canUndo = function () {
            return 0 != this.opIndex[this.currentBoard]
        }, x.prototype.redo = function () {
            this.cancelSelect();
            var t = this.opData[this.currentBoard][this.opIndex[this.currentBoard]];
            if (t) {
                if ("line" == t.type) for (var e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    var i = this.userData[this.currentBoard][t.user][e];
                    if (t.seq == i.seq) {
                        i.show = !0, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 1,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 1,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("inputtext" == t.type) for (let e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    let i = this.userData[this.currentBoard][t.user][e];
                    if ("inputtext" == i.type && t.seq == i.belongSeq) {
                        i.show = !0, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 1,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 1,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("eraser" == t.type) t.seq.forEach(t => {
                    var e = t.uid;
                    for (let i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                        let r = this.userData[this.currentBoard][e][i];
                        "line" == r.type && t.seq == r.seq ? r.show = !1 : "graph" == r.type && t.seq == r.startPoint.seq ? r.show = !1 : "inputtext" === r.type && t.seq == r.belongSeq && (r.show = !1)
                    }
                }), this.realTimeData.push({
                    action: f.PROTOCOL_ACTION.ERASER_ACTION,
                    display: 0,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    lines: t.seq
                }), this.report.reportDisplayLine({
                    boardId: this.currentBoard,
                    updateTime: n.getTimeStamp(),
                    display: 0,
                    lines: t.seq
                }); else if ("graph" == t.type) for (let e = 0; e < this.userData[this.currentBoard][t.user].length; e++) {
                    let i = this.userData[this.currentBoard][t.user][e];
                    if ("graph" == i.type && t.seq == i.startPoint.seq) {
                        i.show = !0, this.realTimeData.push({
                            action: f.PROTOCOL_ACTION.ERASER_ACTION,
                            display: 1,
                            time: n.getTimeStamp(),
                            seq: g.getSeq(),
                            lines: [{uid: t.user, seq: t.seq}]
                        }), this.report.reportDisplayLine({
                            boardId: this.currentBoard,
                            updateTime: n.getTimeStamp(),
                            display: 1,
                            lines: [{uid: t.user, seq: t.seq}]
                        });
                        break
                    }
                } else if ("move" == t.type) {
                    var r = [];
                    t.seq.final.forEach(t => {
                        for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                            var o = this.userData[this.currentBoard][e][i], s = 0, n = 0;
                            "line" == o.type && t.seq == o.seq ? (s = t.x - o.lines[0].x, n = t.y - o.lines[0].y, o.border.maxX += s, o.border.minX += s, o.border.maxY += n, o.border.minY += n, o.lines.forEach(t => {
                                t.x += s, t.y += n
                            }), r.push({
                                uid: e,
                                seq: t.seq,
                                x: t.x,
                                y: t.y
                            })) : "graph" == o.type && t.seq == o.startPoint.seq ? (s = t.x - o.startPoint.x, n = t.y - o.startPoint.y, o.startPoint.x += s, o.startPoint.y += n, o.endPoint.x += s, o.endPoint.y += n, r.push({
                                uid: e,
                                seq: t.seq,
                                x: t.x,
                                y: t.y
                            })) : "inputtext" == o.type && t.seq == o.belongSeq && (o.location.x = t.x, o.location.y = t.y, r.push({
                                uid: e,
                                seq: o.belongSeq,
                                x: t.x,
                                y: t.y
                            }))
                        }
                    }), this.realTimeData.push({
                        action: f.PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
                        time: n.getTimeStamp(),
                        seq: g.getSeq(),
                        moves: r
                    });
                    var o = [];
                    t.seq.final.forEach(t => {
                        for (var e = t.uid, i = 0; i < this.userData[this.currentBoard][e].length; i++) {
                            var r = this.userData[this.currentBoard][e][i];
                            if ("line" == r.type && t.seq == r.seq) {
                                var s = [];
                                r.lines.forEach(t => {
                                    s.push({seq: t.seq, x: t.x, y: t.y})
                                }), o.push({
                                    type: "addLine",
                                    seq: g.getSeq(),
                                    content: {
                                        boardId: this.currentBoard,
                                        uid: r.user,
                                        colorRGBA: n.formatColor(r.color),
                                        scale: 100,
                                        width: r.thin,
                                        time: r.time,
                                        updateTime: n.getTimeStamp(),
                                        seq: r.seq,
                                        hidden: 0,
                                        points: s
                                    }
                                })
                            } else if ("graph" == r.type && t.seq == r.startPoint.seq) {
                                var a = {
                                    type: {
                                        line: "addPatternLine",
                                        oval: "addPatternCircle",
                                        circle: "addPatternCircle",
                                        rect: "addPatternRectangle"
                                    }[r.graph],
                                    seq: g.getSeq(),
                                    content: {
                                        boardId: this.currentBoard,
                                        uid: r.user,
                                        colorRGBA: n.formatColor(r.color),
                                        scale: 100,
                                        width: r.thin,
                                        time: r.time,
                                        updateTime: n.getTimeStamp(),
                                        hidden: 0,
                                        beginPoint: {x: r.startPoint.x, y: r.startPoint.y, seq: r.startPoint.seq},
                                        endPoint: {x: r.endPoint.x, y: r.endPoint.y, seq: r.endPoint.seq}
                                    }
                                };
                                "oval" == r.graph || "circle" == r.graph ? a.content.fillRect = 0 : "rect" == r.graph && (a.content.fillRect = 0, a.content.cornerRadius = 0), o.push(a)
                            } else "inputtext" === r.type && t.seq == r.belongSeq && o.push({
                                type: "addText",
                                seq: g.getSeq(),
                                content: {
                                    belongSeq: r.belongSeq,
                                    time: n.getTimeStamp(),
                                    boardId: this.currentBoard,
                                    uid: r.user,
                                    x: r.location.x,
                                    y: r.location.y,
                                    colorRGBA: n.formatColor(r.color),
                                    scale: r.scale,
                                    updateTime: n.getTimeStamp(),
                                    hidden: 0,
                                    typeface: r.typeFace,
                                    textSize: r.textSize,
                                    fontStyle: r.fontStyle,
                                    text: r.text
                                }
                            })
                        }
                    }), this.report.reportGraphData(o)
                }
                this.opIndex[this.currentBoard]++, this.needDraw = !0, m.fire(this, "TEB_OPERATE_CANREDO_STATUS_CHANGED", this.canRedo()), m.fire(this, "TEB_OPERATE_CANUNDO_STATUS_CHANGED", this.canUndo())
            }
        }, x.prototype.canRedo = function () {
            return this.opIndex[this.currentBoard] != this.opData[this.currentBoard].length
        }, x.prototype.syncHistroyData = function () {
            var t = this;
            t.clearBoard();
            var e = [], i = [], r = 0, o = (t, s, n) => {
                var a = (new Date).getTime();
                new Promise((e, i) => {
                    this.request.getBoardData(t, function (t) {
                        t.error_code ? (D.report("getBoardData", {
                            action_result: t.error_code,
                            action_info: t.error_msg,
                            time_consume: (new Date).getTime() - a,
                            extra_info: JSON.stringify(t)
                        }), i(`error_code:${t.error_code} error_msg:${t.error_msg}`)) : (D.report("getBoardData", {
                            time_consume: (new Date).getTime() - a,
                            extra_info: JSON.stringify(t)
                        }), e(t))
                    }, function (t) {
                        i(`error_code:${t} error_msg:HTTP请求错误，请重试`)
                    })
                }).then(t => {
                    (t.board_data_list || []).forEach(t => {
                        "setGlobalBG" === t.type ? e.push(t) : i.push(t)
                    }), r++, !t.is_finish && r < 500 ? o(!1, s, n) : s()
                }).catch(t => {
                })
            };
            return new Promise((r, s) => {
                o(!0, function () {
                    t.addHistory(e), t.addHistory(i), t.sortBoard(), t.syncBoardSeq(), t.sortGroup(), m.fire(this, "TEB_HISTROYDATA_SYNCCOMPLETED")
                })
            })
        }, x.prototype.sortBoard = function () {
            this.boardList = this.boardList.sort((t, e) => {
                var i = t === f.COMMON_DEFAULT_BOARD ? 0 : t.match(/\d+_\d+_#\w+$/)[0].split("_")[0],
                    r = e === f.COMMON_DEFAULT_BOARD ? 0 : e.match(/\d+_\d+_#\w+$/)[0].split("_")[0];
                return i != r ? i - r : (t === f.COMMON_DEFAULT_BOARD ? 0 : t.match(/\d+_#\w+$/)[0].split("_")[0]) - (e === f.COMMON_DEFAULT_BOARD ? 0 : e.match(/\d+_#\w+$/)[0].split("_")[0])
            })
        }, x.prototype.syncBoardSeq = function () {
            1 == this.boardList.length && this.boardList[0] === f.COMMON_DEFAULT_BOARD ? this.boardIdSeq = 1 : this.boardList[this.boardList.length - 1] && (this.boardIdSeq = 1 * this.boardList[this.boardList.length - 1].match(/\d+_#\w+$/)[0].split("_")[0] + 1)
        }, x.prototype.sortGroup = function () {
            this.groups = this.groups.sort((t, e) => t.fid === f.COMMON_GROUP ? -1 : e.fid === f.COMMON_GROUP ? 1 : 1 * t.fid.replace(/\D*/, "") - 1 * e.fid.replace(/\D*/, ""))
        }, x.prototype.addData = function (t) {
            if (this.permissions) {
                if ("[object String]" === Object.prototype.toString.call(t)) try {
                    throw t = JSON.parse(t), new Error("test")
                } catch (e) {
                    m.fire(this, "TEB_WARNING", A, e.message + ", " + t)
                }
                D.report("addData", {extra_info: JSON.stringify(t)});
                var e = t.value.operator, i = t.value.actions, r = t.value.boardId;
                this.userData[r] || this.addBoard(r, !1), this.userData[r][e] || (this.userData[r][e] = []), this.userData[r][e].length, i.forEach(t => {
                    var i;
                    if (t.color && (t.color = n.dealColor(t.color)), 1 == t.action) (i = this.findLine(r, e, t)) ? (i.color = t.color, i.thin = t.thin, i.show = !0, i.lines.push({
                        x: t.x,
                        y: t.y,
                        belongSeq: t.belongSeq,
                        seq: t.seq
                    }), i.sort(), i.setBorder(t.x, t.y)) : ((i = new h(e, t)).show = !0, this.userData[r][e].push(i), this.data[r].push(i)); else if (2 == t.action || 3 == t.action) (i = this.findLine(r, e, t)) ? (i.lines.push({
                        x: t.x,
                        y: t.y,
                        belongSeq: t.belongSeq,
                        seq: t.seq
                    }), i.sort(), i.setBorder(t.x, t.y)) : (i = new h(e, t), this.userData[r][e].push(i), this.data[r].push(i)), 3 == t.action && (i.endSeq = t.seq, ((t, e) => {
                        setTimeout(() => {
                            t.color && t.thin || this.request.getLineData({
                                boardId: e,
                                owner: t.user,
                                seq: t.belongSeq
                            }, t => {
                                t.error_code || (this.addHistory([{
                                    content: t.content,
                                    type: t.type
                                }]), this.sortBoard(), this.syncBoardSeq())
                            })
                        }, 500)
                    })(i, r)); else if (6 == t.action) {
                        this.userData[r][e].forEach(t => {
                            "raser" == t.type && (t.status = 0)
                        });
                        var o = new u(this.identifier, {
                            color: t.color,
                            radius: this.thin,
                            x: t.x,
                            y: t.y,
                            seq: g.getSeq()
                        });
                        this.userData[r][e].push(o), this.data[r].push(o)
                    } else if (7 == t.action) this.userData[r][e].forEach(t => {
                        "raser" == t.type && (t.status = 0)
                    }); else if (8 == t.action) {
                        if (!t.lines) return;
                        t.lines.forEach(e => {
                            for (var i = 0; i < this.userData[r][e.uid].length; i++) {
                                var o = this.userData[r][e.uid][i];
                                "line" == o.type && o.startSeq == e.seq ? o.show = !!t.display : "graph" == o.type && o.startPoint.seq == e.seq ? o.show = !!t.display : "inputtext" == o.type && o.belongSeq == e.seq && (o.show = !!t.display)
                            }
                        })
                    } else if (9 == t.action) {
                        if (!t.moves) return;
                        t.moves.forEach(t => {
                            for (var e = 0; e < this.userData[r][t.uid].length; e++) {
                                var i = this.userData[r][t.uid][e], o = 0, s = 0;
                                "line" == i.type && i.startSeq == t.seq ? (o = t.x - i.lines[0].x, s = t.y - i.lines[0].y, i.border.maxX += o, i.border.minX += o, i.border.maxY += s, i.border.minY += s, i.lines.forEach(t => {
                                    t.x += o, t.y += s
                                })) : "graph" == i.type && i.startPoint.seq == t.seq ? (o = t.x - i.startPoint.x, s = t.y - i.startPoint.y, i.startPoint.x += o, i.startPoint.y += s, i.endPoint.x += o, i.endPoint.y += s) : "inputtext" == i.type && i.belongSeq == t.seq && (i.location.x = t.x, i.location.y = t.y)
                            }
                        })
                    } else if (10 == t.action || 11 == t.action || 12 == t.action) {
                        t.graph = {10: "line", 11: "oval", 12: "rect"}[t.action], t.solid = !!t.fillRect, t.show = !0;
                        var s = new d(e, t);
                        this.userData[r][e].push(s), this.data[r].push(s)
                    } else if (13 == t.action) if ((1 * t.seq || 0) > this.maxSeq) {
                        this.maxSeq = t.seq;
                        for (var a = null, l = 0; l < this.userData[r][e].length; l++) {
                            var c = this.userData[r][e][l];
                            if (c.belongSeq === t.belongSeq) {
                                t.seq > c.seq && (c.seq = t.seq), a = c;
                                break
                            }
                        }
                        a ? a.text = t.text : ((a = new T(e, {
                            x: t.x,
                            y: t.y,
                            belongSeq: t.belongSeq
                        })).color = t.color, a.scale = t.scale, a.typeFace = t.typeFace, a.textSize = t.textSize, a.fontStyle = t.fontStyle, a.time = t.time, a.text = t.text, this.userData[r][e].push(a), this.data[r].push(a))
                    } else D.report("throw_seq", {
                        extra_info: JSON.stringify({
                            seq: t.seq,
                            maxSeq: this.maxSeq,
                            boardId: p,
                            method: "addData"
                        })
                    }); else if (101 == t.action) this.clearBoard(!1); else if (102 == t.action) this.clearBoard(!0); else if (103 == t.action) try {
                        this.clearFileDrawData(t.fids)
                    } catch (t) {
                    } else if (104 == t.action) this.resetData(); else if (t.action == f.PROTOCOL_ACTION.SET_BOARD_RATIO_ACTION) this.setBoardRatio(t.ratio, !1); else if (201 == t.action) this.addBackgroundPic({
                        boardIds: r,
                        urls: t.url,
                        type: t.type,
                        needReport: !1,
                        position: t.mode
                    }); else if (202 == t.action) this.deleteBackgroundPic(r); else if (203 == t.action) t.color && (t.color = n.formatColor(t.color)), t.isGlobal ? this.setGlobalBackgroundColor(t.color, !0) : this.setBackgroundColor(t.color, !0); else if (401 == t.action) {
                        var p = t.toBoardId, _ = [], b = [];
                        if ((1 * t.seq || 0) > this.maxSeq) {
                            this.maxSeq = t.seq, _ = t.deleteFiles || [], b = t.deleteBoards || [], _.forEach(t => {
                                this.deleteGroup(t, !1), b = b.concat(this.getBoardByGroup(t))
                            }), b.forEach(t => {
                                this.removeBoard(t)
                            }), this.data[p] || this.addBoard(p, !1), this.currentBoard = p;
                            var E = n.boardId2Fid(p);
                            this.currentGroup = E;
                            var O = this.getFileInfo(E);
                            O.type === f.FILE_TYPE.H5 && (O.currentPageIndex < t.page ? I.gotoTimestamp(this.iframeDom, t.page, t.step, !0) : O.currentPageIndex > t.page ? I.gotoTimestamp(this.iframeDom, t.page, t.step, !1) : O.currentPageStep < t.step ? I.gotoTimestamp(this.iframeDom, t.page, t.step, !0) : O.currentPageStep > t.step && I.gotoTimestamp(this.iframeDom, t.page, t.step, !1)), this.updateFileInfo({
                                fid: E,
                                pageCount: this.getBoardByGroup(E).length,
                                currentPageIndex: this.getBoardByGroup(E).indexOf(p) || 0,
                                currentPageStep: t.step || 0
                            }), m.fire(this, "TEB_GOTOBOARD", p, n.boardId2Fid(p))
                        } else _ = t.deleteFiles || [], b = t.deleteBoards || [], _.forEach(t => {
                            this.deleteGroup(t, !1), b = b.concat(this.getBoardByGroup(t))
                        }), b.forEach(t => {
                            this.removeBoard(t)
                        }), D.report("throw_seq", {
                            extra_info: JSON.stringify({
                                seq: t.seq,
                                maxSeq: this.maxSeq,
                                boardId: p,
                                method: "addData"
                            })
                        })
                    } else if (501 == t.action) {
                        var S = t.file, B = null, A = [];
                        if (S.type === f.FILE_TYPE.H5) {
                            for (A = [], l = 0; l < S.pageCount; l++) B = `${S.platform}_${S.uid}_${S.timestamp}_${l + 1}_${S.fid}`, A.push(B);
                            this.addBoard(A, !1), this.updateFileInfo({
                                fid: S.fid,
                                title: S.title,
                                downloadURL: S.downloadURL,
                                pageCount: S.pageCount,
                                uid: S.uid,
                                timestamp: S.timestamp,
                                type: f.FILE_TYPE.H5
                            })
                        } else {
                            var C = S.downloadURL.replace(/cos\..*\.myqcloud/gi, "preview.myqcloud");
                            A = [];
                            for (var x = [], P = 0; P < S.pageCount; P++) B = `${S.platform}_${S.uid}_${S.timestamp}_${P + 1}_${S.fid}`, A.push(B), x.push(C + "?cmd=doc_preview&of=pic&page=" + (P + 1));
                            this.addBoard(A, !1), this.addBackgroundPic({
                                boardIds: A,
                                urls: x,
                                type: y.BACKGROUND_TYPE.IMAGE,
                                needReport: !1
                            }), this.updateFileInfo({
                                fid: S.fid,
                                title: S.title,
                                downloadURL: S.downloadURL,
                                pageCount: S.pageCount,
                                currentPageIndex: 0,
                                currentPageStep: 0,
                                uid: S.uid,
                                timestamp: S.timestamp,
                                type: f.FILE_TYPE.IMG
                            })
                        }
                    }
                }), this.needDraw = !0
            }
        }, x.prototype.addFile = function (t, e, i) {
            if (Array.isArray(t)) {
                var r, o = `#${n.getTimeStamp()}`, s = n.getSecondTime();
                r = this.createBoardIdForFile(o, this.user, s, t.length, f.PLATFORM) || [], this.addGroup(o, e, this.user, i, t.length, 0, s, f.FILE_TYPE.IMG, 0), this.addBoard(r), this.addBackgroundPic({
                    boardIds: r,
                    urls: t
                });
                var a = {
                    action: f.PROTOCOL_ACTION.ADD_FILE_ACTION,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    file: {
                        fid: o,
                        title: e,
                        downloadURL: i,
                        pageCount: t.length,
                        uid: this.identifier,
                        timestamp: s,
                        platform: f.PLATFORM,
                        type: f.FILE_TYPE.IMG
                    }
                };
                return this.realTimeData.push(a), r.length && this.switchFile(o), o
            }
        }, x.prototype.addH5PPTFile = function (t, e, i) {
            for (var r = !1, o = this.getGroup() || [], s = 0, a = o.length; s < a; s++) if (o[s].downloadURL == t) {
                r = !0;
                break
            }
            if (!r) {
                var h, d = `#${n.getTimeStamp()}`, l = n.getSecondTime();
                h = this.createBoardIdForFile(d, this.user, l, i, f.PLATFORM) || [], this.addGroup(d, e, this.user, t, i, 0, l, f.PLATFORM, f.FILE_TYPE.H5, 0), this.addBoard(h);
                var u = {
                    action: f.PROTOCOL_ACTION.ADD_FILE_ACTION,
                    time: n.getTimeStamp(),
                    seq: g.getSeq(),
                    file: {
                        fid: d,
                        title: e,
                        downloadURL: t,
                        pageCount: i,
                        uid: this.identifier,
                        timestamp: l,
                        platform: f.PLATFORM,
                        type: f.FILE_TYPE.H5
                    }
                };
                return this.realTimeData.push(u), h.length && this.switchFile(d), d
            }
        }, x.prototype.deleteFile = function (t = this.getCurrentFile()) {
            if (t === f.COMMON_GROUP) return !1;
            var e = this.deleteGroup(t);
            return m.fire(this, "TEB_DELETEFILE", t), this.switchFile(f.COMMON_GROUP), !(!e || !e.length || (this.deleteBoard(e, t), 0))
        }, x.prototype.switchFile = function (t) {
            for (var e = !1, i = 0, r = this.groups.length; i < r; i++) if (this.groups[i].fid == t) {
                e = !0;
                break
            }
            if (e) {
                this.currentGroup = t;
                var o = this.getFileInfo(t), s = Math.max(0, o.currentPageIndex), n = this.getBoardByGroup(t)[s];
                return m.fire(this, "TEB_SWITCHFILE", t), this.switchBoard(n), t
            }
            return !1
        }, x.prototype.setBoardSize = function (t, e) {
            this.boardWidth = t, this.boardHeight = e
        }, x.prototype.setCanvasContext = function (t) {
            this.ctx = t
        }, x.prototype.setIframeDom = function (t) {
            this.iframeDom = t
        }, x.prototype.setBoardRatio = function (t, e = !0) {
            this.boardRatio[this.currentBoard] = t;
            var i = {};
            i[this.currentBoard] = t, e && this.realTimeData.push({
                action: f.PROTOCOL_ACTION.SET_BOARD_RATIO_ACTION,
                seq: g.getSeq(),
                ratio: t
            }), e && this.report.reportsetBoardRatio([i])
        }, x.prototype.getBoardRatio = function () {
            return this.boardRatio[this.currentBoard]
        }, x.prototype.updateFileInfo = function (t) {
            for (var e = t.fid, i = !1, r = 0, o = this.groups.length; r < o; r++) {
                var s = this.groups[r];
                if (s.fid == e) {
                    s.title = s.title || t.title, s.pageCount = t.pageCount, s.currentPageIndex = void 0 === t.currentPageIndex ? s.currentPageIndex : t.currentPageIndex, s.currentPageStep = void 0 === t.currentPageStep ? s.currentPageStep : t.currentPageStep, s.downloadURL = s.downloadURL || t.downloadURL, s.uid = s.uid || t.uid, s.timestamp = s.timestamp || t.timestamp, i = !0;
                    break
                }
            }
            i || this.groups.push({
                fid: t.fid,
                title: t.title,
                pageCount: t.pageCount,
                currentPageIndex: t.currentPageIndex || 0,
                currentPageStep: t.currentPageStep || 0,
                downloadURL: t.downloadURL,
                uid: t.uid,
                timestamp: t.timestamp,
                type: t.type || 0
            })
        },x.prototype.previewImg = function () {
        },x.prototype.getPreloadList = function () {
            var t = this.getBoardList(), e = t.indexOf(this.getCurrentBoard()), i = "", r = 0,
                o = this.getBoardPicList();
            t.forEach(t => {
                r++
            });
            for (var s = new Array, n = e - this.preStep; n <= e + this.preStep; n++) n != e && n > 0 && n < r && "" != (i = o[t[n]].url) && s.push(i);
            return s
        },x.prototype.fireSwitchBoardEvent = function (t, e) {
            m.fire(this, y.EVENT.SWITCH_BOARD, {current: t, list: e}), setTimeout(() => {
                this.context.setPreLoadImgList(this.getPreloadList())
            }, 10)
        };
        var P = x;

        function q(t) {
            this.option = Object.assign({}, t), this.orientation = this.option.orientation || "vertical", this.boardMode = y.BOARD_MODE.FILE, this.classId = this.option.classId, this.canDraw = !0, "[object Undefined]" === Object.prototype.toString.call(t.drawEnable) ? this.canDraw = !0 : this.canDraw = !!t.drawEnable, this.isMoving = !1, this.needDraw = !1, this.store = new P(t), this.img = t.img, this.width = this.option.width, this.height = this.option.height, this.store.setBoardSize(this.width, this.height), this.canvasComponent = this.option.canvasComponent, this.context = this.option.context, this.store.setCanvasContext(this.canvasComponent), this.touchData = {
                onoff: !1,
                startx: -10,
                starty: -10,
                oldx: -10,
                oldy: -10,
                inCanvas: !1
            }, this.init()
        }

        q.prototype.resize = function (t, e) {
            this.width = t, this.height = e, this.store.setBoardSize(t, e), this.store.setNeedDraw(!0)
        }, q.prototype.getEventLocation = function (t) {
            var e = {x: 0, y: 0};
            if (e.x = t.changedTouches[0].x, e.y = t.changedTouches[0].y, "vertical" === this.orientation) e.x = parseInt(e.x / this.width * 1e4), e.y = parseInt(e.y / this.height * 1e4); else {
                var i = 1e4 - parseInt(e.x / this.height * 1e4), r = parseInt(e.y / this.width * 1e4);
                e.x = r, e.y = i
            }
            return e
        }, q.prototype.draw = function () {
            var t = this, e = this.canvasComponent;
            "horizontal" === this.orientation && this.setCanvasTranslate(), e.clearRect(0, 0, t.width, t.height), this.store.getTransparent();
            var i = this.store.getCurrentBoardData(), r = i.backgroundPic;
            r.url && r.show ? this.context.setCurrentImg(r.url, this.getCurrentBoard()) : this.context.setCurrentImg("", this.getCurrentBoard()), i.backgroundColor ? this.context.setBoardBgColor(i.backgroundColor) : this.context.setBoardBgColor(""), function () {
                var r = i.data;
                if ((r = r.sort((t, e) => t.seq - e.seq)).forEach(i => {
                    var r, o;
                    if ("line" == i.type && i.show) r = i.lines[0].x / 1e4 * t.width, o = i.lines[0].y / 1e4 * t.height, i.lines.forEach(s => {
                        e.beginPath(), e.moveTo(r, o);
                        let n = 0, a = 0, h = 0;
                        n = s.x / 1e4 * t.width, a = s.y / 1e4 * t.height, h = i.thin / 1e4 * t.height, e.lineTo(n, a), e.setLineWidth(h), e.setStrokeStyle(i.color), e.setLineCap("round"), e.stroke(), r = n, o = a
                    }); else if ("raser" == i.type && i.status) {
                        let r = 0, o = 0, s = 0;
                        r = i.location.x / 1e4 * t.width, o = i.location.y / 1e4 * t.height, s = i.radius / 1e4 * t.height, e.beginPath(), e.arc(r, o, s, 0, 2 * Math.PI), e.setFillStyle(n.dealColor(y.COLOR.RED)), e.fill(), e.closePath()
                    } else if ("select" == i.type && i.show) {
                        let r = 0, o = 0, s = 0, n = 0;
                        r = i.startInfo.x / 1e4 * t.width, o = i.startInfo.y / 1e4 * t.height, s = (i.location.x - i.startInfo.x) / 1e4 * t.width, n = (i.location.y - i.startInfo.y) / 1e4 * t.height, e.setLineDash([15, 5]), e.setLineWidth(1), e.setStrokeStyle(t.store.color), e.strokeRect(r, o, s, n), e.setLineDash([])
                    } else if ("graph" == i.type && i.show) {
                        let r = 0, o = 0, s = 0, n = 0, a = 0;
                        if (r = i.startPoint.x / 1e4 * t.width, o = i.startPoint.y / 1e4 * t.height, s = i.endPoint.x / 1e4 * t.width, n = i.endPoint.y / 1e4 * t.height, a = i.thin / 1e4 * t.height, "line" == i.graph) e.beginPath(), e.moveTo(r, o), e.lineTo(s, n), e.setLineWidth(a), e.setStrokeStyle(i.color), e.setLineCap("round"), e.stroke(); else if ("rect" == i.graph) {
                            let t = r > s ? s : r, h = o > n ? n : o, d = r + s - 2 * t, l = o + n - 2 * h;
                            e.setStrokeStyle(i.color), e.setLineWidth(a), i.solid ? (e.setFillStyle(i.color), e.fillRect(t, h, d, l)) : e.strokeRect(t, h, d, l)
                        } else if ("circle" == i.graph || "oval" == i.graph) {
                            let t = (r + s) / 2, h = (o + n) / 2, d = Math.abs(r - s) / 2, l = Math.abs(o - n) / 2;
                            e.setStrokeStyle(i.color), e.setLineWidth(a), function (t, e, i, r, o, s, n) {
                                var a = .5522848, h = r * a, d = o * a;
                                t.beginPath(), t.moveTo(e - r, i), t.bezierCurveTo(e - r, i - d, e - h, i - o, e, i - o), t.bezierCurveTo(e + h, i - o, e + r, i - d, e + r, i), t.bezierCurveTo(e + r, i + d, e + h, i + o, e, i + o), t.bezierCurveTo(e - h, i + o, e - r, i + d, e - r, i), t.closePath(), t.stroke(), s && (t.setFillStyle(n), t.fill())
                            }(e, t, h, d, l, i.solid, i.color), e.stroke()
                        }
                    } else "inputtext" == i.type && i.show && (e.beginPath(), e.setFontSize(Math.ceil(i.textSize / 1e4 * t.height)), e.setTextBaseline("top"), e.setFillStyle(i.color), e.fillText(i.text, i.location.x / 1e4 * t.width, i.location.y / 1e4 * t.height), e.stroke())
                }), t.isMoving) {
                    var o = t.store.getSelectArea(), s = t.store.getThin();
                    e.setLineDash([15, 5]), e.setLineWidth(1), e.strokeRect((o.x - s) / 1e4 * t.width, (o.y - s) / 1e4 * t.height, (o.width + 2 * s) / 1e4 * t.width, (o.height + 2 * s) / 1e4 * t.height), e.setLineDash([])
                } else {
                    this.store.getSelectList().forEach(i => {
                        if ("line" == i.type) e.setLineDash([15, 5]), e.setLineWidth(1), e.strokeRect((i.border.minX - 2 * i.thin) / 1e4 * t.width, (i.border.minY - 2 * i.thin) / 1e4 * t.height, (i.border.maxX - i.border.minX + 4 * i.thin) / 1e4 * t.width, (i.border.maxY - i.border.minY + 4 * i.thin) / 1e4 * t.height), e.setLineDash([]); else if ("graph" == i.type) {
                            var r = i.endPoint.x, o = i.endPoint.y, s = i.startPoint.x, n = i.startPoint.y;
                            r < s && (r += s, r -= s = r - s), o < n && (o += n, o -= n = o - n), e.setLineDash([15, 5]), e.setLineWidth(1), e.strokeRect((s - 2 * i.thin) / 1e4 * t.width, (n - 2 * i.thin) / 1e4 * t.height, (r - s + 4 * i.thin) / 1e4 * t.width, (o - n + 4 * i.thin) / 1e4 * t.height), e.setLineDash([])
                        } else "inputtext" == i.type && (e.setLineDash([15, 5]), e.setLineWidth(1), e.strokeRect(i.location.x / 1e4 * t.width - 5, i.location.y / 1e4 * t.height - 5, i.textWidth + 10, i.textSize / 1e4 * t.height + 10), e.setLineDash([]))
                    })
                }
                e.draw()
            }.apply(this)
        }, q.prototype.addBoard = function () {
            return this.store.switchFile(f.COMMON_GROUP), this.store.switchBoard()
        }, q.prototype.getBoardData = function () {
            return JSON.parse(JSON.stringify(this.store.getData()))
        }, q.prototype.addHistory = function (t) {
            this.store.addHistory(t)
        }, q.prototype.addData = function (t) {
            this.store.addData(t)
        }, q.prototype.deleteBoard = function (t = this.store.getCurrentBoard()) {
            n.boardId2Fid(t) == f.COMMON_GROUP && this.store.deleteBoard(t)
        }, q.prototype.getBoardList = function () {
            return JSON.parse(JSON.stringify(this.store.getBoardList()))
        }, q.prototype.getBoardPicList = function () {
            return JSON.parse(JSON.stringify(this.store.getBoardPicList()))
        }, q.prototype.getCurrentBoard = function () {
            return this.store.currentBoard
        }, q.prototype.getCurrentFile = function () {
            return this.store.getCurrentFile()
        }, q.prototype.switchBoard = function (t) {
            return this.store.switchBoard(t)
        }, q.prototype.switchPage = function (t = 0) {
            return this.store.switchPage(t)
        }, q.prototype.switchStep = function (t) {
            this.store.switchStep(t)
        }, q.prototype.prevBoard = function () {
            var t = this.getFileInfo(this.getCurrentFile()), e = this.getBoardByGroup(this.getCurrentFile());
            t.currentPageIndex < 1 || this.switchBoard(e[t.currentPageIndex - 1])
        }, q.prototype.prevStep = function () {
            var t = this.store.getFileInfo(this.store.getCurrentFile());
            t.type == f.FILE_TYPE.H5 ? I.gotoPreviousStep(this.iframeDOM, {
                currentPageIndex: t.currentPageIndex,
                currentPageStep: t.currentPageStep
            }) : this.prevBoard()
        }, q.prototype.nextBoard = function () {
            var t = this.getFileInfo(this.getCurrentFile()), e = this.getBoardByGroup(this.getCurrentFile());
            t.currentPageIndex < t.pageCount - 1 && this.switchBoard(e[t.currentPageIndex + 1])
        }, q.prototype.nextStep = function () {
            var t = this.store.getFileInfo(this.store.getCurrentFile());
            t.type == f.FILE_TYPE.H5 ? I.gotoNextStep(this.iframeDOM, {
                currentPageIndex: t.currentPageIndex,
                currentPageStep: t.currentPageStep
            }) : this.nextBoard()
        }, q.prototype.setGlobalBackgroundColor = function (t) {
            this.store.setGlobalBackgroundColor(t)
        }, q.prototype.setBackgroundColor = function (t) {
            this.store.setBackgroundColor(t)
        }, q.prototype.init = function () {
            D.report("init", {
                extra_info: JSON.stringify({
                    orientation: this.orientation,
                    width: this.width,
                    height: this.height
                })
            }), this.drawInterval = setInterval(() => {
                this.store.getNeedDraw() && (this.draw(), this.store.setNeedDraw(!1))
            }, 50)
        }, q.prototype.stopDefaultEvent = function (t) {
        }, q.prototype.canvasTouchStart = function (t) {
            var e = this.store.getType();
            "mouse" != e ? (this.stopDefaultEvent(t), this.canDraw && (this.touchData.inCanvas = !0, this.touchData.onoff = !0, this.store.resetOperation(), this.touchData.oldx = this.touchData.startx = this.getEventLocation(t).x, this.touchData.oldy = this.touchData.starty = this.getEventLocation(t).y, "line" == e ? (this.store.cancelSelect(), this.store.collectLineData().start(this.touchData.startx, this.touchData.starty)) : "eraser" == e ? (this.store.cancelSelect(), this.store.collectEraserData(this.touchData.startx, this.touchData.starty)) : "raser" == e ? (this.store.cancelSelect(), this.store.collectRaserData().start(this.touchData.startx, this.touchData.starty)) : "select" == e ? (this.store.cancelSelect(), this.store.collectSelectData().start(this.touchData.startx, this.touchData.starty)) : "pointselect" == e ? this.store.collectMoverData().beforeStart(this.touchData.startx, this.touchData.starty) && (this.isMoving = !0) : "keyboardinput" == e || ("move" == e ? this.store.collectMoverData().beforeStart(this.touchData.startx, this.touchData.starty) && (this.isMoving = !0, this.store.collectMoverData().start(this.touchData.startx, this.touchData.starty)) : e.indexOf("graph") > -1 && (this.store.cancelSelect(), this.store.collectGraphData().start(this.touchData.startx, this.touchData.starty))), 1 == this.isMoving && this.store.collectMoverData().beforeStart(this.touchData.startx, this.touchData.starty) && (this.isMoving = !0, this.store.collectMoverData().start(this.touchData.startx, this.touchData.starty)))) : this.nextStep()
        }, q.prototype.canvasTouchMove = function (t) {
            if (this.stopDefaultEvent(t), this.canDraw) {
                var e = this.store.getType();
                if (this.store.getColor(), this.store.getThin(), this.canvasComponent, "eraser" != e && this.touchData.onoff) {
                    var i = this.getEventLocation(t).x, r = this.getEventLocation(t).y;
                    "line" == e ? (this.store.setNeedDraw(!0), this.store.collectLineData().draw(i, r)) : "raser" == e ? this.store.collectRaserData().draw(i, r) : "select" == e ? this.store.collectSelectData().draw(i, r) : "pointselect" == e || ("move" == e ? this.store.collectMoverData().draw(i, r, this.touchData.oldx, this.touchData.oldy) : e.indexOf("graph") > -1 && this.store.collectGraphData().draw(i, r)), this.isMoving && this.store.collectMoverData().draw(i, r, this.touchData.oldx, this.touchData.oldy), this.touchData.oldx = i, this.touchData.oldy = r
                }
            }
        }, q.prototype.canvasTouchEnd = function (t) {
            if (this.stopDefaultEvent(t), this.canDraw) {
                this.touchData.onoff = !1;
                var e = this.store.getType(), i = this.getEventLocation(t).x, r = this.getEventLocation(t).y;
                if ("line" == e) {
                    if (!this.touchData.inCanvas) return;
                    this.store.collectLineData().end(i, r)
                } else {
                    if ("eraser" == e) return;
                    "raser" == e ? this.store.collectRaserData().end(i, r) : "select" != e || this.isMoving ? "pointselect" != e || this.isMoving ? e.indexOf("graph") > -1 && this.store.collectGraphData().end(i, r) : this.store.collectPointSelectData(i, r) : this.store.collectSelectData().end(this.touchData.startx, this.touchData.starty, i, r)
                }
                this.isMoving && (this.isMoving = !1, this.store.collectMoverData().end()), m.fire(this, "TEB_OPERATE_CANUNDO_STATUS_CHANGED", this.store.canUndo())
            }
        }, q.prototype.canvasTouchCancel = function (t) {
            if (this.stopDefaultEvent(t), this.canDraw) {
                var e, i = this.store.getType(), r = this.getEventLocation(t).x, o = this.getEventLocation(t).y;
                this.touchData.inCanvas = !1, 1 == this.touchData.onoff && ("line" == i ? (e = this.store.getThin(), r = n.getEffectivePoint(r, e), o = n.getEffectivePoint(o, e), this.store.collectLineData().over(r, o)) : "raser" == i ? this.store.collectRaserData().over() : "select" != i || this.isMoving ? i.indexOf("graph") > -1 && (e = this.store.getThin(), r = n.getEffectivePoint(r, e), o = n.getEffectivePoint(o, e), this.store.collectGraphData().over(r, o)) : this.store.collectSelectData().end(this.touchData.startx, this.touchData.starty, r, o), this.isMoving && (this.isMoving = !1, this.store.collectMoverData().end()), this.touchData.onoff = !1, m.fire(this, "TEB_OPERATE_CANUNDO_STATUS_CHANGED", this.store.canUndo()))
            }
        }, q.prototype.setColor = function (t) {
            this.store.setColor(t)
        }, q.prototype.setThin = function (t) {
            this.store.setThin(t)
        }, q.prototype.setTextSize = function (t) {
            this.store.setTextSize(t)
        }, q.prototype.getTextSize = function () {
            return this.store.getTextSize()
        }, q.prototype.setTextColor = function (t) {
            this.store.setTextColor(t)
        }, q.prototype.getTextColor = function () {
            return this.store.getTextColor()
        }, q.prototype.setRadius = function (t) {
            this.store.setRadius(t)
        }, q.prototype.setType = function (t) {
            this.store.setType(y.BOARD_ACTION_TYPE[["MOUSE", "LINE", "ERASER", "RASER", "GRAPH-LINE", "GRAPH-OVAL", "GRAPH-RECT", "GRAPH-OVAL-SOLID", "GRAPH-RECT-SOLID", "POINTSELECT", "SELECT", "INPUTTEXT", "H5-PPT"][t]])
        }, q.prototype.undo = function () {
            this.store.undo()
        }, q.prototype.canUndo = function () {
            return this.store.canUndo()
        }, q.prototype.redo = function () {
            this.store.redo()
        }, q.prototype.canRedo = function () {
            return this.store.canRedo()
        }, q.prototype.clearBoard = function (t) {
            this.store.clearBoard(t)
        }, q.prototype.clear = function () {
            this.store.clear()
        }, q.prototype.clearDraws = function () {
            this.store.clearDraws()
        }, q.prototype.clearAll = function () {
            this.store.clearAll()
        }, q.prototype.addBackgroundPic = function (t, e, i) {
            this.store.addBackgroundPic(t, e, i)
        }, q.prototype.setBackgroundPic = function (t, e = y.FILL_MODE.DEFAULT) {
            this.store.setBackgroundPic(t, e)
        }, q.prototype.updateCurrentFillMode = function (t = y.FILL_MODE.DEFAULT) {
            this.store.updateCurrentFillMode(t)
        }, q.prototype.deleteBackgroundPic = function (t) {
            this.store.deleteBackgroundPic(t)
        }, q.prototype.cancelBackgroundPic = function () {
            this.store.cancelBackgroundPic()
        }, q.prototype.clearGlobalBgColor = function () {
            this.store.clearGlobalBgColor()
        }, q.prototype.cancelSelect = function () {
            this.store.cancelSelect()
        }, q.prototype.setCanDraw = function (t = !1) {
            this.canDraw = t
        }, q.prototype.addFile = function (t, e, i) {
            return this.store.addFile(t, e, i)
        }, q.prototype.addH5PPTFile = function (t) {
            this.store.isExistH5PPTUrl(t) || this.iframeDOM.setAttribute("src", t)
        }, q.prototype.deleteFile = function (t) {
            return this.store.deleteFile(t)
        }, q.prototype.switchFile = function (t) {
            if (t) return this.store.switchFile(t)
        }, q.prototype.getGroup = function () {
            return this.store.getGroup()
        }, q.prototype.getFileInfo = function (t) {
            return this.store.getFileInfo(t)
        }, q.prototype.getBoardByGroup = function (t) {
            return this.store.getBoardByGroup(t)
        }, q.prototype.clearFileDraws = function (t) {
            return this.store.clearFileDraws(t)
        }, q.prototype.setOrientation = function (t) {
            this.orientation = t, this.store.setNeedDraw(!0)
        }, q.prototype.setCanvasTranslate = function () {
            this.canvasComponent.translate(this.height / 2, this.width / 2), this.canvasComponent.rotate(.5 * Math.PI), this.canvasComponent.translate(-this.width / 2, -this.height / 2)
        }, q.prototype.layout = function () {
            var t = this.container.clientWidth, e = this.container.clientHeight,
                i = this.store.getBoardRatio() || this.option.ratio, r = 16, o = 9;
            if (!1 === i) this.width = t, this.height = e; else {
                if (void 0 === i) r = 16, o = 9; else try {
                    var s = i.split(":");
                    r = 1 * s[0], r = isNaN(r) ? 16 : r, o = 1 * s[1], o = isNaN(o) ? 9 : o
                } catch (t) {
                    r = 16, o = 9
                }
                t / e > r / o ? (this.width = e * r / o, this.height = e) : (this.width = t, this.height = t * o / r)
            }
            this.width = Math.floor(this.width), this.height = Math.floor(this.height);
            var n = `position:relative;left: 50%;top: 50%;transform: translateX(-50%) translateY(-50%);width:${this.width}px;height:${this.height}px`;
            this.canvasWrap && this.canvasWrap.setAttribute("style", n), this.el && this.el.setAttribute("width", this.width), this.el && this.el.setAttribute("height", this.height), this.img && this.img.setAttribute("width", this.width), this.img && this.img.setAttribute("height", this.height), this.bgDiv && this.bgDiv.setAttribute("width", this.width), this.bgDiv && this.bgDiv.setAttribute("height", this.height), this.iframeDOM && this.iframeDOM.setAttribute("width", this.width), this.iframeDOM && this.iframeDOM.setAttribute("height", this.height), this.store.setBoardSize(this.width, this.height)
        }, q.prototype.drawLine = function (t, e, i, r) {
            if (t.lineWidth = r / 1e4 * this.height, t.lineCap = "round", t.strokeStyle = i, t.fillStyle = i, e.length < 3) {
                var o = e[0];
                return t.beginPath(), t.arc(o.x / 1e4 * this.width, o.y / 1e4 * this.height, t.lineWidth / 2, 0, 2 * Math.PI, !0), t.fill(), void t.closePath()
            }
            t.beginPath(), t.moveTo(e[0].x / 1e4 * this.width, e[0].y / 1e4 * this.height);
            for (var s = 1; s < e.length - 2; s++) {
                var n = (e[s].x / 1e4 * this.width + e[s + 1].x / 1e4 * this.width) / 2,
                    a = (e[s].y / 1e4 * this.height + e[s + 1].y / 1e4 * this.height) / 2;
                t.quadraticCurveTo(e[s].x / 1e4 * this.width, e[s].y / 1e4 * this.height, n, a)
            }
            t.quadraticCurveTo(e[s].x / 1e4 * this.width, e[s].y / 1e4 * this.height, e[s + 1].x / 1e4 * this.width, e[s + 1].y / 1e4 * this.height), t.stroke()
        }, q.prototype.isDrawEnable = function () {
            return this.canDraw
        }, q.prototype.getGlobalBackgroundColor = function () {
            return this.store.getGlobalBackgroundColor()
        }, q.prototype.getBackgroundColor = function () {
            return this.store.getBackgroundColor()
        }, q.prototype.getToolType = function () {
            var t = function (t, e = ((t, e) => t === e)) {
                return Object.keys(y.BOARD_ACTION_TYPE).find(i => e(y.BOARD_ACTION_TYPE[i], t))
            }(this.store.getType());
            return ["MOUSE", "LINE", "ERASER", "RASER", "GRAPH-LINE", "GRAPH-OVAL", "GRAPH-RECT", "GRAPH-OVAL-SOLID", "GRAPH-RECT-SOLID", "POINTSELECT", "SELECT", "INPUTTEXT", "h5-pptPPT"].indexOf(t)
        }, q.prototype.getBrushColor = function () {
            return this.store.getColor()
        }, q.prototype.getBrushThin = function () {
            return this.store.getThin()
        }, q.prototype.setTextFontFamily = function (t) {
            this.store.setTextFontFamily(t)
        }, q.prototype.getTextFontFamily = function () {
            return this.store.getTextFontFamily()
        }, q.prototype.setTextFontStyle = function (t) {
            this.store.setTextFontStyle(t)
        }, q.prototype.getTextFontStyle = function () {
            return this.store.getTextFontStyle()
        }, q.prototype.setBoardRatio = function (t) {
            var e = this.store.getCurrentBoard();
            n.boardId2Fid(e) === f.COMMON_GROUP && (this.store.setBoardRatio(t), this.draw())
        };
        var R = q;

        function v(t) {
            t.tlsData = {
                sdkAppId: t.sdkAppId,
                identifier: t.userId,
                userSig: t.userSig
            }, this.board = new R(t), this.version = "2.0.0_RC2"
        }

        v.EVENT = {
            TEB_INIT: "TEB_INIT",
            TEB_OPERATE_CANUNDO_STATUS_CHANGED: "TEB_OPERATE_CANUNDO_STATUS_CHANGED",
            TEB_OPERATE_CANREDO_STATUS_CHANGED: "TEB_OPERATE_CANREDO_STATUS_CHANGED",
            TEB_ADDBOARD: "TEB_ADDBOARD",
            TEB_SYNCDATA: "TEB_SYNCDATA",
            TEB_ERROR: "TEB_ERROR",
            TEB_WARNING: "TEB_WARNING",
            TEB_HISTROYDATA_SYNCCOMPLETED: "TEB_HISTROYDATA_SYNCCOMPLETED",
            TEB_IMAGE_STATUS_CHANGED: "TEB_IMAGE_STATUS_CHANGED",
            TEB_H5BACKGROUND_STATUS_CHANGED: "TEB_H5BACKGROUND_STATUS_CHANGED",
            TEB_DELETEBOARD: "TEB_DELETEBOARD",
            TEB_GOTOBOARD: "TEB_GOTOBOARD",
            TEB_ADDH5PPTFILE: "TEB_ADDH5PPTFILE",
            TEB_ADDFILE: "TEB_ADDFILE",
            TEB_DELETEFILE: "TEB_DELETEFILE",
            TEB_FILEUPLOADSTATUS: "TEB_FILEUPLOADSTATUS",
            TEB_SWITCHFILE: "TEB_SWITCHFILE",
            TEB_SETBACKGROUNDIMAGE: "TEB_SETBACKGROUNDIMAGE",
            TEB_FILEUPLOADPROGRESS: "TEB_FILEUPLOADPROGRESS"
        }, v.TOOL_TYPE = {
            TEDU_BOARD_TOOL_TYPE_MOUSE: 0,
            TEDU_BOARD_TOOL_TYPE_PEN: 1,
            TEDU_BOARD_TOOL_TYPE_ERASER: 2,
            TEDU_BOARD_TOOL_TYPE_LASER: 3,
            TEDU_BOARD_TOOL_TYPE_LINE: 4,
            TEDU_BOARD_TOOL_TYPE_OVAL: 5,
            TEDU_BOARD_TOOL_TYPE_RECT: 6,
            TEDU_BOARD_TOOL_TYPE_OVAL_SOLID: 7,
            TEDU_BOARD_TOOL_TYPE_RECT_SOLID: 8,
            TEDU_BOARD_TOOL_TYPE_POINT_SELECT: 9,
            TEDU_BOARD_TOOL_TYPE_RECT_SELECT: 10,
            TEDU_BOARD_TOOL_TYPE_TEXT: 11
        }, v.prototype.on = function (t, e) {
            m.on(t, e)
        }, v.prototype.off = function (t, e) {
            m.off(t, e)
        }, v.prototype.getVersion = function () {
            return this.version
        }, v.prototype.addBoard = function (t, e) {
            var i = this.board.addBoard();
            return this.board.setBackgroundPic(t, e), i
        }, v.prototype.deleteBoard = function (t) {
            this.board.deleteBoard(t)
        }, v.prototype.prevStep = function () {
            this.board.prevStep()
        }, v.prototype.nextStep = function () {
            this.board.nextStep()
        }, v.prototype.prevBoard = function () {
            this.board.prevBoard()
        }, v.prototype.nextBoard = function () {
            this.board.nextBoard()
        }, v.prototype.gotoBoard = function (t) {
            t && this.board.switchBoard(t)
        }, v.prototype.getCurrentBoard = function () {
            return this.board.getCurrentBoard()
        }, v.prototype.getBoardList = function () {
            return this.board.getBoardList()
        }, v.prototype.setBoardRatio = function () {
        }, v.prototype.addFile = function (t) {
            var e = "";
            if (t.data) e = "[object File]" === Object.prototype.toString.call(t.data) ? t.data.name : t.name, /\.(bmp|jpg|jpeg|png|gif|webp|svg|psd|ai)/i.test(e) ? this.fileCos.uploadImgFile(t, t => {
                this.board.setBackgroundPic(t)
            }) : this.fileCos.uploadFile(t, (t, e) => {
                this.board.addFile(e.picUrls, e.fileName, e.fileUrl)
            }); else if ("[object String]" === Object.prototype.toString.call(t)) {
                var i = t;
                this.fileCos.addFileFromCosUrl(i, (t, e, r) => {
                    this.board.addFile(e, r, i)
                }, () => {
                })
            }
        }, v.prototype.addH5PPTFile = function (t) {
            this.board.addH5PPTFile(t)
        }, v.prototype.deleteFile = function (t) {
            this.board.deleteFile(t)
        }, v.prototype.switchFile = function (t) {
            this.board.switchFile(t)
        }, v.prototype.getCurrentFile = function () {
            return this.board.getCurrentFile()
        }, v.prototype.getFileInfoList = function () {
            return this.board.getGroup()
        }, v.prototype.getFileBoardList = function (t) {
            return this.board.getBoardByGroup(t)
        }, v.prototype.clearFileDraws = function (t) {
            this.board.clearFileDraws(t)
        }, v.prototype.reset = function () {
            this.board.clearAll()
        }, v.prototype.addSyncData = function (t) {
            this.board.addData(t)
        }, v.prototype.setDrawEnable = function (t) {
            this.board.setCanDraw(t)
        }, v.prototype.isDrawEnable = function () {
            return this.board.isDrawEnable()
        }, v.prototype.setGlobalBackgroundColor = function (t) {
            this.board.setGlobalBackgroundColor(t)
        }, v.prototype.getGlobalBackgroundColor = function () {
            return this.board.getGlobalBackgroundColor()
        }, v.prototype.setBackgroundColor = function (t) {
            this.board.setBackgroundColor(t)
        }, v.prototype.getBackgroundColor = function () {
            return this.board.getBackgroundColor()
        }, v.prototype.setToolType = function (t) {
            this.board.setType(t)
        }, v.prototype.getToolType = function () {
            return this.board.getToolType()
        }, v.prototype.setBrushColor = function (t) {
            this.board.setColor(t)
        }, v.prototype.getBrushColor = function () {
            return this.board.getBrushColor()
        }, v.prototype.setBrushThin = function (t) {
            this.board.setThin(t)
        }, v.prototype.getBrushThin = function () {
            return this.board.getBrushThin()
        }, v.prototype.setTextColor = function (t) {
            this.board.setTextColor(t)
        }, v.prototype.getTextColor = function () {
            return this.board.getTextColor()
        }, v.prototype.setTextSize = function (t) {
            this.board.setTextSize(t)
        }, v.prototype.getTextSize = function () {
            return this.board.getTextSize()
        }, v.prototype.clear = function (t) {
            t ? this.board.clear() : this.board.clearDraws()
        }, v.prototype.setBackgroundImage = function (t, e) {
            if ("[object String]" === Object.prototype.toString.call(t)) this.board.setBackgroundPic(t, e); else if ("[object Object]" === Object.prototype.toString.call(t)) {
                var i = t;
                this.fileCos.uploadImgFile(i, t => {
                    this.board.setBackgroundPic(t, e)
                })
            }
        }, v.prototype.setBackgroundH5 = function () {
        }, v.prototype.undo = function () {
            this.board.undo()
        }, v.prototype.redo = function () {
            this.board.redo()
        }, v.prototype.resize = function (t, e) {
            this.board.resize(t, e)
        }, v.prototype.setTextStyle = function (t) {
            this.board.setTextFontStyle(t)
        }, v.prototype.getTextStyle = function () {
            return this.board.getTextFontStyle()
        }, v.prototype.setTextFamily = function (t) {
            this.board.setTextFontFamily(t)
        }, v.prototype.getTextFamily = function () {
            return this.board.getTextFontFamily()
        }, v.prototype.canvasTouchStart = function (t) {
            this.board.canvasTouchStart(t)
        }, v.prototype.canvasTouchMove = function (t) {
            this.board.canvasTouchMove(t)
        }, v.prototype.canvasTouchEnd = function (t) {
            this.board.canvasTouchEnd(t)
        }, v.prototype.canvasTouchCancel = function (t) {
            this.board.canvasTouchCancel(t)
        }, v.prototype.setOrientation = function (t = "vertical") {
            this.board.setOrientation(t)
        }, e.default = v
    }]).default
});
